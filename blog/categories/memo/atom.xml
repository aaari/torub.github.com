<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: memo | Saturday Programmer]]></title>
  <link href="http://sat-pg.com/blog/categories/memo/atom.xml" rel="self"/>
  <link href="http://sat-pg.com/"/>
  <updated>2014-01-26T18:18:34+09:00</updated>
  <id>http://sat-pg.com/</id>
  <author>
    <name><![CDATA[torub]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[第1回 Build Insider OFFLINEメモ]]></title>
    <link href="http://sat-pg.com/blog/buildinsider.html"/>
    <updated>2013-06-08T23:45:00+09:00</updated>
    <id>http://sat-pg.com/blog/buildinsider</id>
    <content type="html"><![CDATA[<p><a href="http://www.buildinsider.net/event/offline/01">第1回 Build Insider OFFLINE</a>に行ってきたので、聞いてきた話をメモ。</p>

<!-- more -->


<h2>Keynote</h2>

<p>キーノートには遅れていったので気になった言葉のみ：<a href="http://www.microsoft.com/japan/web/webmatrix/">WebMatrix</a>、<a href="http://research.microsoft.com/en-us/projects/illumiroom/">illumiroom</a>、<a href="http://re.buildinsider.net/about/biwanted.pdf">記事募集</a></p>

<hr />

<h2>JavaScript ライブラリーを使い倒そう</h2>

<p>WINGSプロジェクト 安西 剛さんの講演。</p>

<p>かつてはエンタープライズでは邪魔者扱いのJavaScriptだったが、GoogleMapでのAjax利用から、みんなが使い始め、
最近になってJavaScript天国な状況になってきた。その分、複雑化している状況。</p>

<p>今後ますますライブラリが重要ということで、6つの観点で紹介。</p>

<h4>1. 手間を省こう系</h4>

<ul>
<li><p>jQuery, prottotype.js：prototype.jsは既存オブジェクトを拡張している。jQueryはしていない。(この差が今の普及の差に繋がっている?)</p></li>
<li><p>UI系: 無数にありすぎる。利用によりできるだけコードを書かずにリッチなUIを実現する系。</p>

<ul>
<li>Chosen (セレクトボックス)</li>
<li>竹取JS (縦書き)</li>
<li>jQuery UI</li>
</ul>
</li>
<li>UIフレームワーク

<ul>
<li>Twitter Bootstrap: どちらかというとCSSフレームワーク?</li>
</ul>
</li>
</ul>


<p>これらのライブラリを使うと、ページの初期表示速度が遅くなるため、CSSスプライト等を利用して読み込むファイルを少なくしたり、JSの処理を一番下に記載して、ページ読み込み時の処理を最小限にすることが重要。</p>

<h4>2. 言語特性補う系</h4>

<ul>
<li>CoffeeScript：言語特性からくる問題を回避。スコープ、クロージャなど。</li>
<li>TypeScript</li>
</ul>


<h4>3. フレームワーク</h4>

<p>JavaScriptが大規模複雑化したことによる設計の困難さを回避。まだ乱立している状態。
ポイントはHTML/UIとの関係性をどのようにするかや、マウスやキーなどのイベントをどう拾うか。
github上ではbackbone.jsが人気の模様。(backbone/knockout/Angularは2つめの講演で詳細あり)</p>

<ul>
<li>MVCフレームワーク

<ul>
<li>backbone.js：後述</li>
</ul>
</li>
<li>MVVM

<ul>
<li>Knockout：後述</li>
</ul>
</li>
<li>CoffeeScript対応MVC

<ul>
<li>Batman.js</li>
<li>Spine.js：Ruby on Railsみたいな感じにコマンドベースで作れる</li>
</ul>
</li>
<li>ViewとModelのデータバインディング

<ul>
<li>Angular.js：後述</li>
<li>Ember.js：データバインディングに特徴あり。JSとHTMLを宣言部分で紐付け。テンプレートエンジンと組み合わせて表示。</li>
</ul>
</li>
</ul>


<h4>4. ゲーム系</h4>

<ul>
<li>enchant.js

<ul>
<li>教育に適しているのではないか。キャラクターをオブジェクトとして考えやすいため、オブジェクト思考の勉強にもよいかも。</li>
<li>イベントドリブンで、イベントは非同期処理</li>
</ul>
</li>
</ul>


<h4>5. サーバ系</h4>

<ul>
<li>Node.js

<ul>
<li>v8エンジンが入っていて速い</li>
<li>イベントルーブとノンブロッキングIOが特徴で、シングルスレッドが特徴。</li>
<li>イベントが起きてもどんどんキューに入れていって処理を行う形態。</li>
<li>同期的な処理は書きづらい。phpみたいなようなことは難しい。MySQL問い合わせなども非同期で書く必要がある。</li>
<li>Express.jsがデファクト。Webアプリケーションを作る最低限が準備されている。例外やセッションも作成可能。</li>
<li>app.js→ルーティング→ビュー(テンプレートエンジン)</li>
</ul>
</li>
</ul>


<h4>6. テスト系</h4>

<p>ウォーターフォールは、品質をあとで担保するモデル。皆、この考えがしみついている。
現在は、反応を見るため、早めに市場にリリースし、頻繁なバージョンアップが必要な時代になっており、
あとで担保するような考えかたは難しくなってきている。</p>

<p>そこで、自動テスト、テスト駆動開発、継続的インテグレーション、クロスブラウザ対応、、等々が必要で、
常にリリース可能な品質を保つよう、マインドを変えたほうがいい。品質はあとでなく、随時作りこんでいく必要がある。</p>

<p>ライブラリを利用してこれらに対応する。</p>

<ul>
<li>テスティングフレームワーク

<ul>
<li>Mocha
  BDD(振る舞い駆動開発)、TDD(テスト駆動)、、など色々できる。
  TDDはテストを書いてからメソッド実装
  BDDはユーザから見たふるまいから</li>
</ul>
</li>
<li>アサートモジュール</li>
<li>クロスブラウザ自動チェック

<ul>
<li>JSTestDriver</li>
<li>サーバプロセスを立ち上げ、各ブラウザでアクセス</li>
<li>テスト実行→各ブラウザで実行される</li>
</ul>
</li>
<li>モック、スタブ: sinon.js、レスポンスの偽装ができる</li>
<li>静的解析1 JSLint、JSHint</li>
<li>静的解析2 jscoverage: どこまで試験ができているか。</li>
</ul>


<hr />

<h2>3つのMVC系人気フレームワーク、Backbone.js／AngularJS／Knockout.js</h2>

<h4><a href="http://backbonejs.org/">Backbone.js</a></h4>

<p>LINE株式会社 開発１室 UITチーム　清水 大輔さんの講演。</p>

<ul>
<li>MV*アプリを作る手助けとなるJSライブラリ。軽量、シンプル。</li>
<li>オブジェクト思考、MVC知識が必要</li>
<li>動的要素が少ないページでは不要</li>
<li>必要なライブラリは、jQuery(Zepto, Enderでも可)、underscore.js(配列操作などのUtility)、json2.js(jsonパーサ)など。</li>
<li>構成要素は、Bacobone.Event、Model、Collection、View、Sync、Router</li>
<li>MVCの利点: DOMからビジネスロジックが分離できる、UTがやりやすい等</li>
<li>Grunt.jsというビルドツールが便利。jshint、jasminなどでのチェック、ミニファイ等を実施</li>
<li>パフォーマンス

<ul>
<li>DOM: reflow、repaintを減らす。delegate eventを利用する</li>
<li>メモリ管理: メモリリークがある。view#removeでの後処理を意識する</li>
<li>通信: localStrageをうまく利用する</li>
</ul>
</li>
</ul>


<h4><a href="http://angularjs.org/">AngularJS</a> 概説</h4>

<p>AngularJS Japan User Group 管理人の金井 健一さんの講演</p>

<ul>
<li>Google製のフルスタックMVCフレームワーク</li>
<li></li>
<li>得意：CRUD系のアプリケーション、管理ページ、マイページ等</li>
<li>苦手：モバイル向け(フルスタックのため容量が多め)、ゲーム系のグラフィックの扱い</li>
<li>開発環境：YEOMAN(YO, GRUNT, BOWER)

<ul>
<li>双方向データバインディング</li>
<li>テンプレートとしてのHTML：サーバからJSONもらって組み立て)</li>
<li>再利用可能なコンポーネント：WebComponentを見すえて、独自のタグ実装が可能。実装は結構複雑</li>
<li>ビューとルーティング</li>
<li>テストとその可用性：Karma(Angular用に開発されており相性がいい)</li>
</ul>
</li>
<li>モバイルについては、ng-mobileというモジュールが追加され機能が追加された。
ただし、その分容量が増加しているため、最初の一回が遅い(100kbほど)。2回目以降はキャッシュされる。</li>
<li>UIは、AngularUIなどのAngularが用意しているライブラリの他、プラグインもある。</li>
</ul>


<h4><a href="http://knockoutjs.com/">Knockout.js</a>の概要</h4>

<p>沢渡 真雪さんの講演</p>

<ul>
<li>JavascirptアプリケーションのためのMVVMパターン。MVVMとは、ModelとViewの間にある、Viewのための振る舞いや状態を持つModel(ViewModel)。</li>
<li><a href="https://www.google.co.jp/search?q=MVVM+ugaya40&amp;oq=MVVM+ugaya40&amp;aqs=chrome.0.57j0.307j0&amp;sourceid=chrome&amp;ie=UTF-8">MVVM ugaya40で検索</a>するとわかりやすいらしい</li>
<li>単一のライブラリ(knockout.js)で、Observableと、バインディング機構のみで成り立っており軽量、シンプル。</li>
<li>ASP.NET開発チームの方が個人で開発しているため、ASP.NET MVCとともに採用されていることも多い。</li>
<li>Windows Azureポータルや、アメーバピグのスマホ版で利用</li>
<li>Observable

<ul>
<li>値を監視可能な形にラップする仕組み。</li>
<li>ko.observable：var a = 1 は監視できないが、var v = ko.observable(1)とすると、v()で値取得(getter)、v(value)で値代入(setter)とすることができる。</li>
<li>subscribeメソッドで監視して、変更時にコールバックが可能。v.subscribe(function(newv) { ... }, this);</li>
<li>ko.observableArrayを使うことで、同様の監視を配列でも可能。push、popなどもあり。</li>
<li>ko.computed：observable同様の監視可能な形。observableの変更も取得可能。普通の変数の値を変えても特に変化なし。
```javascript
value1 = ko.observable(1);
value2 = ko.observable(2);
computed = ko.computed(function() {
return vaulue1() + value2();
});</li>
</ul>
</li>
</ul>


<p>computed();
->3
value2(10);
computed();
->11
computed.subscribe(function(newValue) {</p>

<pre><code>alert(newValue);
</code></pre>

<p>});
value1(10);
->アラートが出るはず
```</p>

<ul>
<li><p>バインディング：監視可能なオブジェクトを、HTMLのDOMにひもづける機能
<code>html
&lt;input type="text" data-bind="value: value1" /&gt;
&lt;input type="text" data-bind="value: value2" /&gt;
&lt;span data-bind="value: computed" /&gt;
</code></p></li>
<li><p>最後にJavaScript側でバインディグを適用する: applyBindings</p>

<ul>
<li>値を入力(value、text、html)、属性オンオフ(CSS、style)、イベント(click、event)などが可能</li>
</ul>
</li>
</ul>


<hr />

<h2>リアルタイム Web 最前線 ～ Socket.IO ＆ SignalR 徹底解説</h2>

<p>ソーシャルグリッド株式会社 取締役CTO 芝村 達郎さんの講演</p>

<ul>
<li>リアルタイム・ウェブ：クライアント・サーバ間での双方向通信が特徴</li>
<li>サーバ→クライアントへのプッシュ通信。WebSocket、Server-Sent Event等</li>
<li>クライアント→サーバはAJAXなどを利用して実現</li>
<li>最近はWebSocketやSignalRが一般的。複数の通信方式をラッピングしている。</li>
</ul>


<h4>Socket.IOとSignalR(比較まとめ)</h4>

<table>
<thead>
<tr>
<th></th>
<th>Socket.IO</th>
<th>SignalR</th>
</tr>
</thead>
<tbody>
<tr>
<td>基本</td>
<td>Node.js上で動作する。Node.jsなのでシングルスレッド。</td>
<td>ASP.NET上のライブラリ。マルチスレッド</td>
</tr>
<tr>
<td>対応トランスポート</td>
<td>WebSocket、Adobe Flash Socket、AJAX long polling、AJAX multipart streaming、Forever Iframe(ほぼIE専用)、JSONP Polling(クロスドメインで利用可能)</td>
<td>WebSocket、Server-Sent Event、Forever Frame、Long Polling</td>
</tr>
<tr>
<td>クライアント</td>
<td>JavaScriptのみでなく、Java、Objective-C、C/C++、PHP、.NET等々、多数</td>
<td>JavaScript(jQuery依存)、.NET Framework4, 4.5、Windows Storeアプリ、WinPhone8、Silverlight、Xamarin.iOS/Xamarin.Android</td>
</tr>
<tr>
<td>向いているOS</td>
<td>Mac/Linux系</td>
<td>Windows系</td>
</tr>
<tr>
<td>パフォーマンス</td>
<td>シングルスレッド + クラスタ化であげる</td>
<td>マルチスレッド</td>
</tr>
<tr>
<td>設計思想</td>
<td>イベントベース</td>
<td>リモートプロシジャーコール</td>
</tr>
</tbody>
</table>


<!--
* Socket.IO
    - Node.js上で動作する
    - 対応しているトランスポート：WebSocket、Adobe Flash Socket、AJAX long polling、AJAX multipart streaming、Forever Iframe(ほぼIE専用)、JSONP Polling(クロスドメインで利用可能)
    - Windowsでは、WebMatrixのNode.jsテンプレートを使うと簡単。IISで動く独自のNodeを準備している。
    - Macでは、好きなエディタでどうぞ。
    - クライアントは、JavaScriptのみでなく、Java、Objective-C、C/C++、PHP、.NET等々、多数用意されている。
* SingnalR
    - ASP.NET上のライブラリ。マルチスレッド、Taskベースの非同期処理。シングルスレッドのNode.jsとはマルチコア時に速度差が出る
    - 対応しているトランスポート：WebSocket、Server-Sent Event、Forever Frame、Long Polling
    - Windowsの.NETで動作。
    - クライアントは、JavaScript(jQuery依存)、.NET Framework4, 4.5、Windows Storeアプリ、WinPhone8、Silverlight、Xamarin.iOS/Xamarin.Android
* 比較
    - パフォーマンス
        - Socket.IO: シングルスレッド + クラスタ化
        - SignalR: マルチスレッド
    - 設計思想
        - Socket.IO: イベントベース
        - SignalR: リモートプロシジャーコール
* WinならSignalR、Mac、LinuxならSocket.IOでいいんじゃ。
-->


<h4>スケールアウト</h4>

<ul>
<li>コネクションが貼りっぱなしであり、リソースを消費するため、1台のサーバで処理できるクライアント数は決まる。</li>
<li>単純に台数増やすだけではスケールしない。クライアントがどのサーバに繋っているかは他のサーバからは確認できない。WebSocketを使うAPの制約。メッセージング用サーバを用意して中継してあげる必要がある。</li>
<li>共通：Pub/Subメッセージングを利用する(RedisやWindowsAzureサービスバス)。  ※(?このへんよくわからず)</li>
<li>Socket.IO：接続情報をメモリでなく、外部ストレージに保存</li>
<li>SignalR：接続情報は共有せず、メッセージングに投げる(unique idを使って投げるのみ)</li>
</ul>


<h4>その他</h4>

<ul>
<li>双方向通信は必須ではない。必要なときにサーバからプッシュできればいい。<a href="http://pusher.com/">PUSHER</a>(プッシュするだけのサービス)がなりたつのでサーバからのプッシュの需要はあるんではないか。</li>
<li><p>通信頻度を下げる。underscore.jsのthrottle/debounceを使うことで、指定された秒数に最大1回実行/呼び出し後、指定された秒数がたったら呼び出しされる。</p></li>
<li><p>リアルタイム性を活かすアプリはあまり浮かばない(チャットアプリはもう飽きた)</p></li>
<li>プッシュ+クライアント同時接続を活かしたアプリ(チャット以外)を作ればいい。</li>
<li>スケールアウトは難しい。SignalRはメモリリーク解消に長い時間悩まされた。</li>
<li>今後は複数人でのリアルタイムコラボアプリに期待</li>
<li>センサーと同期して入退室管理とかもいいかも</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第39回html5とか勉強会+日本Androidの会5月定例]]></title>
    <link href="http://sat-pg.com/blog/html5.html"/>
    <updated>2013-05-28T18:58:00+09:00</updated>
    <id>http://sat-pg.com/blog/html5</id>
    <content type="html"><![CDATA[<p>第39回html5とか勉強会+日本Androidの会5月定例のでメモ</p>

<!-- more -->


<hr />

<h2>最近のHTML5はどうなっているのか</h2>

<p>html5jの白石俊平さんの講演。</p>

<p>「Android開発はよく知っているけど、Web技術の最新トレンドとかはあんまり・・」という方向けの、 最近のHTML5界隈がどう進化しているかを簡潔なおさらいとのこと。</p>

<h4>なぜHTML5か?</h4>

<ul>
<li>HTML5はマルチプラットフォームやマルチデバイスに対応しやすい</li>
<li>技術的な成熟-> 7つの○○ウェブで表現</li>
</ul>


<h4>1. オフラインウェブ: 地下鉄、飛行機でも観ることができる。</h4>

<ul>
<li>Web Storage</li>
<li>Indexed Database API</li>
<li>File API</li>
</ul>


<h4>2. リアルタイムウェブ</h4>

<ul>
<li>WebSocket</li>
<li>ServerSent-Event(Commetの実装)</li>
<li>WebRTC(ブラウザtoブラウザ) ->ChromeとFirefoxで疎通した</li>
</ul>


<h4>3. レスポンシブウェブ</h4>

<ul>
<li>1枚のHTMLで複数スクリーンに対応</li>
<li>CSSメディアクエリとかとか</li>
</ul>


<h4>4. セマンティックウェブ</h4>

<ul>
<li>エンジニアによる意図を持たせたマークアップが可能になる</li>
<li>検索エンジンが読み取ることができるので、Web全体がデータベースになる</li>
<li>HTML5 Semantic Elements</li>
<li>HTML5 Microdata</li>
<li>RDF/FDFa/RDFa Lite</li>
</ul>


<h4>5. スピーディウェブ</h4>

<ul>
<li>リクエスト1回→レスポンス1回の構造を変化させる(SPDY、HTTP2.0、オフライン)</li>
</ul>


<h4>6.プラットフォームウェブ</h4>

<ul>
<li>Tizen</li>
<li>Chrome OS</li>
<li>WinOS、、</li>
</ul>


<h4>7.インプレッシブ(感動的な)ウェブ</h4>

<ul>
<li>3Dの空間をいったりきたり</li>
<li>WebGL</li>
<li>Canvas</li>
<li>SVG</li>
<li>WebGL</li>
<li>WebAudioAPI</li>
</ul>


<hr />

<h2>AndroidとChromeの統合について</h2>

<p>日本Androidの会の丸山先生の講演。</p>

<p><a href="https://docs.google.com/file/d/0B04ol8GVySUuajVQTGxFbF9ibkk/edit">スライド</a></p>

<h4>「Webアプリ」の変化</h4>

<ul>
<li>サーバで作ってクライアントに送り出す、が普通だった</li>
<li>ANdroidアプリの多くが単体で動くアプリ。サーバサイドとの接点が少なかった</li>
<li>サーバサイドとHTML5を結合すると新しいものが生まれるのではないか。</li>
<li>クライアントのデバイスの処理能力が大きくなりはじめた。

<ul>
<li>PCよりクライアントがはるかにリッチ(センサ系)</li>
</ul>
</li>
<li>サーバ側はビジネスロジックに専念して、クライアント側でプレゼンテーション層(ViewとController)を実現することで、サーバの負荷低減にも繋がる。</li>
</ul>


<!--
    * Packagedd Web App
        - ChromeとかのApp
        - ネイティブと同等の機能を持つ。デバイス、OS、HWに依存しない
        - Offline enabled by default
        - cloud enabled by default
        - デバイスのHW、OSリソースへのアクセス
        - Packageの形であぷり配布
        - セキュリティポリシーも担保
    * サーバとクライアントの役割の見直し
        - PCよりクライアントがはるかにリッチ(センサ系)
        - サーバ負荷の増加
        - プログラムとViewの分離の難しさ
            - 全てがサーバ側でこんとろーるされているから
        - 8coreAndroidの始まり(4c + 4c)
        - Thin Server Architecture(TSA) 今日のWebアプリケーションへの反発
        - サーバ側はビジネスロジックに専念
        - サーバはDBとロジック
        - クライアントはviewとcontroller
        - プレゼンテーション層を全部クライアント側でやる
        - サーバの負荷が減る
    -->


<h4>AndroidとChromeの統合</h4>

<ul>
<li>今年何かが起こるかもしれない(?)</li>
<li>Android5とか、Chrome29とか</li>
</ul>


<!--
* Nexus7でChrome入れた。3月にChrome25出た
* HTML TestのおかげでHTML5対応が進んだ
* 今後は同じバージョンで出ることに
* ChromeOSで、デバイスに触るAPIが非常に多い
* 第3勢力は??
* ChromeのパッケージAPpをAndroidで動くように
* Androidはpackegeappの最大のプラットフォームになるだろう
* ChromeへDARTを載せるだろう
#### いつ合流? わからん
* Android5
* Chrome29

次のOSがキモかもね。
-->


<h4>マーケットの統合</h4>

<ul>
<li>最終的には統合されるだろう(Packaged Web Appとして)</li>
<li>ここで販売されるアプリは、デバイスだけでなく、OSも関係なく動く</li>
</ul>


<!--
#### Chrome Packaged App の開発
* ブラウザ上からランタイムへ
-->


<h4>Andorid > iOS</h4>

<ul>
<li>売り上げは3〜5倍の差</li>
<li>アプリ開発者は国内だけじゃなく、世界に出ることを考えるべき</li>
<li>日本の開発者は単なるオフラインでなくクラウドも使うべき</li>
</ul>


<hr />

<h2>ハイブリッドアプリの設計</h2>

<p>クックパッドの日高さんの講演。</p>

<!--
* メリデリ、ゲーム、ソーシャルゲーム、コードの話はしない
* 端末のスペックあがった →webviewでも許せる速さ
* HTML5決まってきた! →ブラウザ共通化
* iOS審査緩くなってきた →独自UIやりやすい
* AndroidのOS分布も変わってきた 4.2増えてきた
-->


<h4>ハイブリッドアプリの利点</h4>

<ul>
<li>HTML5を活かしたアプリ</li>
<li>公式マーケット配布できる</li>
<li>複数プラットフォーム対応しやすいメリット</li>
</ul>


<h4>ハイブリドアプリのタイプ</h4>

<ul>
<li>タイプ1: WebViewをラッピング1

<ul>
<li>包むだけ</li>
<li>HTMLはサーバに置く</li>
<li>Webアプリをそのまま置く</li>
<li>jsonじゃなくデータ量が多い</li>
</ul>
</li>
<li>タイプ2: webviewをラッピング2

<ul>
<li>1と違いHTMLはアプリに埋め込む</li>
<li>サーバとはAPI通信</li>
<li>ローカルでもだいたい動く。アプリの実装の変わりにHTML5使う</li>
</ul>
</li>
<li>タイプ3: 一部の画面でWebView。ピグトークはこれ

<ul>
<li>基本ネイティブ。</li>
<li>WebViewを利用するメリットのあるところは使う
クックパッドは1+3</li>
</ul>
</li>
</ul>


<p>とりあずHTMLで、ではなく、どちらでやったほうが価値(品質面・コスト面・運用面)がある画面なのか</p>

<h4>Webviewが適さないもの</h4>

<ul>
<li>リスト・ギャラリー画面

<ul>
<li>Nativeのリストが持つ再利用・画像キャッシュ、開放などのメリットが大きい</li>
<li>HTMLだとDomがどんどん増えていく。メモリ足りんくなる</li>
</ul>
</li>
<li>起動時の画面</li>
</ul>


<h4>webviewが適しているもの</h4>

<ul>
<li>詳細画面などのコンテンツ</li>
<li>レイアウト能力はNativeよりも高い。回り込み。枠付け、リンク挿入とか</li>
<li>更新されているくコンテンツとか</li>
</ul>


<h4>実装例</h4>

<ul>
<li>WebViewの進む・戻る遷移と、Nativeの画面遷移の管理の問題が起きやすい。</li>
<li>Webviewでのリンク遷移はさせないほうがいい or
遷移はWebviewで行い、Native部分はダイアログ管理</li>
</ul>


<!--
#### 実装例2
* 長押しの処理。フォーカスの管理とかはJSでやって、Nativeに通知
* Call: Mail: は使いたい
* Coookiieでログイン状態を連動させる
-->


<h4>忘れがちな違い</h4>

<ul>
<li>HTMLは画面毎に通信が発生するが、ネイティブならばデータを保持しておいてあとから展開とか、いろいろできる。</li>
</ul>


<h4>cookpadは何故ハイブリッドか</h4>

<ul>
<li>基本、コンテンツはWeb上にあり、ローカルで管理するものが少ない。</li>
<li>更新が多い。リアルタイム性も必要</li>
<li>A/Bテスト等で仮説・検証が行われている</li>
<li>特定の機能を提供するよりは、総合アプリ</li>
</ul>


<h4>ローカルでやってること</h4>

<ul>
<li>アカウント管理</li>
<li>ダイアログ、API通信</li>
<li>検索候補、音声検索</li>
</ul>


<hr />

<h2>ハイブリットソーシャルゲームの現場</h2>

<p>株式会社ポケラボの鈴木さんと前田さんの講演</p>

<!--
### 概要
* 200名
* GREE(プラットフォーム技術)
* SEGA(コンソール技術) 
* aeriaGames(北米. ドイツとかで売れてる。南国で1位)
* GROSS。Androidで悪い
-->


<h4>なぜハイブリッドか?</h4>

<ul>
<li>Webが最終的には勝つだろう! (iアプリ vs モバゲーグリー の結果などからも)</li>
<li>Flash作ってたのでネイティブが難しい</li>
<li>今はCreate.JS使ってる</li>
</ul>


<h3>今どうなの?</h3>

<ul>
<li>運用が楽。ios+androidできる</li>
<li>ネイティブ-> 映画。ソーシャル-> TV番組みたいな感覚のため、更新多い部分でネイティブはつらい</li>
<li>WebViewは遅いか?

<ul>
<li>適材適所で使ってやればいい。アニメがすくないとことか。</li>
<li>cssアニメ辛いところはCreateJSでやってる</li>
<li>通信はキャッシュで1回しかDLしないようにする。</li>
<li>WebViewが重いのでAndroid版でリリースできていない</li>
</ul>
</li>
</ul>


<!--
### Androidで目指すところ
* よりはやく、かいてきに、楽しんでもらう
* ハイブリッド・固定メニュー、高速アニメ、ユーザ連携

* ヘッダフッタの固定メニュー
iScroll->遅い
ヘッダフッタ用のコマンド用意。
JSONを解釈してネイティブでViewに変換してあげる
-->


<ul>
<li>高速アニメーションはライブラリ作って対応。</li>
<li>Flash->HTML5(JS)->Nativeの2段階変換をしている。</li>
<li>CreateJSの3倍のフレームレートが出る</li>
</ul>


<!--
* iOSとのUUID連携
AndroidのUUIDは使い辛い。サーバ側で作る。
AndroidではアンインスールされるとUUIDも消えちゃう。
別になってしまって連携できない。
ポケラボネットワークシステム→1uuid / 1台
コラボかのう。
-->


<hr />

<h2>「パネルディスカッション」</h2>

<h4>WebアプリケーションのプラットフォームとしてAndroidやモバイルデバイスのこれから</h4>

<ul>
<li><p>ブラウザでChromeのランタイムが動くようにしてる。
Packaged Web Appの流れが今年の流れになりそう。</p></li>
<li><p>Webアップはデバイスの機能を使い切れない。
今はインストール型にだけ特権を与えるかたちになりつつある。
今後は、インストール型で使えるAPI(Firefoxは標準、Chrome独自)と、
ブラウザベースのものの2つにわかれていくだろう。
ブラウザベースは標準化が追いつかない。</p></li>
</ul>


<h4>JS性能、ライブラリ、オフライン、リアルタイム動向</h4>

<ul>
<li>クライアントで処理するなら、好きなほうでやればいい。</li>
<li>サーバの処理を減らすのが基本的な流れだろう。</li>
<li>チップレベルでブラウザレイヤが最適化されないとつらい。</li>
<li>チューンナップが終わったらネイティブなくてもいいかも。</li>
<li>webアプリにできないこと、課題はまだまだある。ただ、どうにかしようと考えている人がいっぱいいる。
解決されないわけない!!</li>
<li>例えばasm.js→2倍くらいの速さ動く。</li>
<li>今後のアップルの動向も気になる。</li>
</ul>


<!--
#### 新野淳一（モデレーター）、丸山不二夫、佐々木陽、白石俊平

最近: GoogleIO

丸山さん: AndroidとCHrome統合

佐々木さん: GalaxyS4、超速い。アプリよくうごくよ。今のChromeが、2、3年後には、モバイルで体験できそう。

白石さん: GoogleIO。Chrome+HTML5セッション出た。多かったがめあたらしいのあんまなし。
パフォーマンス重視が多い。クロームのPackagedwebのver2。とWebコンポーネント。

新野さん: PublicKeyの人。

### WebアプリケーションのプラットフォームとしてAndroidやモバイルデバイスのこれから
Androidの5T対応は遅れてた。4まで。まだ半分くらい。
Chromeのポーティング進めてる。
ブラウザからChromeRuntime動くようにしてる。
Packaged Web Appの流れが今年の流れになりそう。

PhoneGapみたいなの作ってる。RuntimeEngine作って、jsでラップしてネイティブで売る。
iOS、Androidで移植→Tizen。楽。OpenGL使ってても。
これまでは遅かったからネイティブ使ってた。
最近は早くなってきたから移行? でも適材適所でしょ。
どんくらい遅い? 今は5だとCHromeくらいしかできん。リッチなやつは。
それいがいは5でもいいかもね。

2、3年まえからわかってたこと。Webアップはデバイスの機能を使い切れん。
今はインストール型にだけ特権を与えるかたちになりつつある。
2つにわかれていくだろう。
インストール型で使えるAPI(Firefoxは標準、Chrome独自)
HTMLは標準が必要。ブラウザベースは標準化が追いつかない。


### HTML5のCanvasやSVGに対して、OpenGLやネイティブAPの動向は
性能は大きな課題。
業務系ならHTML5でもけっこういける。
3Dまわりの動向は??

リッチはWebGL。
Canvas使わないのは回転拡大縮小ではつらい。
GPUで書けるから全然違う。
iPhone、webgl動かん。配信手段なし。独自のランタイム作った。WebViewはみんな作ってない。
HTML5+ネイティブエンジン(V8みたいなのを作るイメージ)→配布
古い端末サポートはつらい。結局C++で書いたほうがいい。
OpenGLで書くのがいい。Unityとかでもいい。
↑ゲームの世界の話。

ネイティブのUXになれちゃってるので、そういう要望もある。

Canvasについてどう思ってる??
一般的なWebサイトはそんなに重くないでしょ。
Canvasは最終手段。CSS3とかDOMでできるでしょ。

GPUにのると、100倍くらい速い。
Canvasの書きかたがよくわからん。3Dの属性をCSSに付けるとよいらしい。
WEB-RTCで画像編集→ GLFxjsは使える。


### Webアプリ=/ ハイブリッドAPの進化とは
#### JS性能、ライブラリ、オフライン、リアルタイム動向
* エンタープライズとWebの世界->いんぱくとを与えてる
* クライアントで処理するなら、好きなほうでやればいい。
* サーバの処理を減らすのが基本的な流れだろう。

* チップレベルでブラウザレイヤが最適化されないとつらい。
* Tizenとかは始めている。
* Galaxyではめちゃくちゃよく動く
* チューンナップが終わったらネイティブなくてもいいかも。

* webアップにできないこと、課題はまだまだある。
* どうにかしようと考えている人がいっぱいいる。
* 解決されないわけない!!
* asm.js->2倍くらい!の速さ動く。
* アップルの動向も気になる。

* Packaged Web App押し!!!!

6/26 UDX

-->



]]></content>
  </entry>
  
</feed>
