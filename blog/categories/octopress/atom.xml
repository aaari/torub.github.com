<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: octopress | Saturday Programmer]]></title>
  <link href="http://sat-pg.com/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://sat-pg.com/"/>
  <updated>2013-08-06T02:06:46+09:00</updated>
  <id>http://sat-pg.com/</id>
  <author>
    <name><![CDATA[torub]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopressのいろいろ]]></title>
    <link href="http://sat-pg.com/blog/2013/05/06/octopress-config.html"/>
    <updated>2013-05-06T03:02:00+09:00</updated>
    <id>http://sat-pg.com/blog/2013/05/06/octopress-config</id>
    <content type="html"><![CDATA[<p>Octopressの設定など色々まとめていきます。<br/>
設定追加毎に記事も追加していきます。</p>

<ul>
<li><a href="#include_code">ソースコードの引用</a></li>
<li><a href="#escape">特殊文字のエスケープ</a></li>
<li><a href="#image">画像貼り付け</a></li>
<li><a href="#publish">記事の非公開設定</a></li>
<li><a href="#domain">ドメインの設定</a></li>
<li><a href="#table">テーブルの作成</a></li>
</ul>


<!-- more -->


<h2><a name="include_code"></a>ソースコードの引用</h2>

<p>以下の通り記載することで引用が可能です

<code>
{% include_code [title] [lang:language] path/to/file %}
</code>
</p>

<p>ファイルは、<code>source/downloads/code</code> が基本のパスのようです。
例えばindex.htmlを、<code>source/downloads/code/</code> に置いて

<code>
{% include_code index.html %}
</code>

と書くと、以下の通り出力されます。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (index.html)</span> <a href='/downloads/code/index.html'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>---
</span><span class='line'>layout: default
</span><span class='line'>---
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;blog-index&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  {% assign index = true %}
</span><span class='line'>  {% for post in paginator.posts %}
</span><span class='line'>  {% assign content = post.content %}
</span><span class='line'>    <span class="nt">&lt;article&gt;</span>
</span><span class='line'>      {% include article.html %}
</span><span class='line'>    <span class="nt">&lt;/article&gt;</span>
</span><span class='line'>  {% endfor %}
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;pagination&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    {% if paginator.next_page %}
</span><span class='line'>      <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;prev&quot;</span> <span class="na">href=</span><span class="s">&quot;{{paginator.next_page}}&quot;</span><span class="nt">&gt;</span><span class="ni">&amp;larr;</span> Older<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>    {% endif %}
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/blog/archives&quot;</span><span class="nt">&gt;</span>Blog Archives<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>    {% if paginator.previous_page %}
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;next&quot;</span> <span class="na">href=</span><span class="s">&quot;{{paginator.previous_page}}&quot;</span><span class="nt">&gt;</span>Newer <span class="ni">&amp;rarr;</span><span class="nt">&lt;/a&gt;</span>
</span><span class='line'>    {% endif %}
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;aside</span> <span class="na">class=</span><span class="s">&quot;sidebar&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  {% if site.blog_index_asides.size %}
</span><span class='line'>    {% include_array blog_index_asides %}
</span><span class='line'>  {% else %}
</span><span class='line'>    {% include_array default_asides %}
</span><span class='line'>  {% endif %}
</span><span class='line'><span class="nt">&lt;/aside&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li><a href="http://octopress.org/docs/plugins/include-code/">公式の説明ページ</a></li>
</ul>


<h2><a name="escape"></a>特殊文字のエスケープ</h2>

<p>include_codeなど、自動的にoctopressによって展開される文字を
そのまま出力させるには、

<code>
{% raw %}
と
{％ endraw ％}
</code>
</p>

<p>で囲むことでエスケープして文字を出力可能です。
(endrawの％部分は半角に直す必要があり。)</p>

<h2><a name="image"></a>画像貼り付け</h2>

<p>ソースコードとほぼ同様で、以下の通り記載することで引用が可能です

<code>
{% img [class names] /path/to/image [width] [height] [title text [alt text]] %}
</code>

画像ファイルのトップディレクトリは、<code>source/</code> のようです。例えば、<code>source/images/search.png</code>というファイルがデフォルトでありますが、

<code>
{% img /images/search.png %}
</code>

と記載することで以下の通り表示されます。</p>

<p><img class="[class names]" src="/images/search.png"></p>

<ul>
<li><a href="http://octopress.org/docs/plugins/image-tag/">公式の説明ページ</a></li>
</ul>


<h2><a name="publish"></a>記事の非公開</h2>

<p><code>rake new_post['hogehoge']</code> で新規markdownファイルを作ったあとも、
すぐには公開したくない場合、記事の設定部分に
<code>published: false</code>を追加することで対応可能です。</p>

<h2>```</h2>

<p>layout: post
title: "hogehoge"
date: 2013-05-06 22:46
published: false
comments: true</p>

<h2>categories: phonegap</h2>

<p><code>``
編集が完了した後、</code>published: true`としてdeployすれば記事が公開されます。</p>

<p>※ちなみに、publishをfalseにしても、プレビューでは表示されます。</p>

<h2><a name="domain"></a>ドメインの設定</h2>

<p>サブドメインを使わない場合、</p>

<p><code>
% echo 'sat-pg.com' &gt;&gt; source/CNAME
</code></p>

<p>のように、新たにCNAMEファイルを作成する。</p>

<p>上記と合わせて、取得したドメインに対応するDNSのAレコードに、207.97.227.245 を設定することで、
30分くらいすると指定したドメインでのアクセスが可能になります。</p>

<ul>
<li><a href="http://octopress.org/docs/deploying/github/">公式の説明ページ</a>: ここの「Custom Domains」に記載があります。</li>
</ul>


<h2><a name="table"></a>テーブルの作成</h2>

<p>table用のCSSを作成し、source/_includes/head.htmlから参照するように設定する。以下を参考にさせて頂きました。</p>

<ul>
<li><a href="http://morizyun.github.io/blog/octopress-table-tag-css/">Octopressでテーブルをmarkdownで編集できるようにする</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressの導入]]></title>
    <link href="http://sat-pg.com/blog/2013/05/04/octopress.html"/>
    <updated>2013-05-04T03:37:00+09:00</updated>
    <id>http://sat-pg.com/blog/2013/05/04/octopress</id>
    <content type="html"><![CDATA[<p>GitHubを初めるにあたって、Octopressを導入したのでその方法についてまとめました。</p>

<p>以下4点、順番に説明します。</p>

<ol>
<li><a href="#ruby_install">Rubyインストール</a></li>
<li><a href="#github_pages">GitHub Pagesレポジトリ作成</a></li>
<li><a href="#octopress">Octopressインストール</a></li>
<li><a href="#newpost">記事作成</a></li>
</ol>


<!-- more -->


<h2><a name="ruby_install"></a>1. Rubyインストール</h2>

<p>私の環境は、Mac OS 10.8.3 ですが、デフォルトのRubyは1.8.7が入っていました。
Octopressのインストールには1.9.3以上が必要とのことなので、
rvmというRubyのバージョン管理用ソフトをインストールします。</p>

<h3>RVMとRuby1.9.3のインストール</h3>

<p><code>
% curl -L https://get.rvm.io | bash -s stable --ruby
% rvm list known
</code>
とすることで、インストール可能なRubyのバージョンのリストが表示されます。</p>

<p>色々とネット上の記事を見ていると、XCode4.2の付属のLLVM gccではコンパイル不可らしく、
別途gccをダウンロードした上で作業をした等の記載を見つけましたが、
ここでは、
<code>
% rvm autolibs enable
</code>
で依存関係を自動で解決するようにし、その後、
<code>
% rvm install 1.9.3-p392
</code>
とすることで、問題無くインストールが進み、利用可能となりました。
(自分の環境ではpatchレベルの指定も必要でした。)</p>

<h3>RVMの設定</h3>

<p>以下の通りで利用バージョンが設定できます。
<code>
% rvm use 1.9.3
% ruby -v
ruby 1.9.3p392 (2013-02-22 revision 39386) [x86_64-darwin12.3.0]
</code>
<code>rvm use ...</code>の実行後にバージョンを戻すときは、<code>% rvm reset</code>とし、
デフォルトの使用バージョンを変える場合は、<code>% rvm --default 1.9.3</code>とすればOKです。</p>

<p>なお、各フォルダ毎に、.rvmrcファイルを作成して<code>rvm use ...</code>と記載しておくことで、
そのフォルダでのrubyの実行バージョンを制御できる模様です。</p>

<h2><a name="github_pages"></a>2. GitHub Pagesレポジトリ作成</h2>

<p>これは簡単で、GitHubに USERNAME.github.comのレポジトリを作成するのみです。
作成後、しばらくたつと、
http://USERNAME.github.com でアクセスできるようになります。</p>

<p>ドメインの指定等も可能みたいだけど、とりあえず省略です。</p>

<h2><a name="octopress"></a>3. Octopressインストール</h2>

<p>以下の通りでインストールできます。
<code>
% git clone git://github.com/imathis/octopress.git octopress
% cd octopress
</code>
※octopressディレクトリには、.rvmrcが設置してあり、自動で1.9.3を使うように設定できます</p>

<p><code>
% sudo gem install bundler
% sudo bundle install
% rake install
% rake setup_github_pages
</code>
ここまで来ると、Enter the read/write url for your repository と聞かれるので、
git@github.com:USERNAME/USERNAME.github.com.git と入力します。その後、</p>

<p><code>
% rake generate
% rake deploy
</code>
とすることで、USERNAME.github.comにアクセス可能になります。</p>

<h2><a name="newpost"></a> 記事の投稿</h2>

<p>インストール後、以下コマンドで新規記事が作成できます。
<code>
% rake new_post['post title']
</code></p>

<p>post title部分がURLになる(post-titleになる)ため、英語の必要があります。
ファイルは、source/_posts/yyyy-mm-dd-post-title.markdown が自動作成されるので、
markdown形式で編集することで記事を作成できます。</p>

<p>例えばこの記事の場合、markdownファイルの先頭は以下の通り。</p>

<h2>```</h2>

<p>layout: post
title: "Octopressの導入"
date: 2013-05-04 03:37
comments: true</p>

<h2>categories: octopress</h2>

<p>```</p>

<p>title部分は、最初はpost titleが入るけど、後から日本語に変更が可能です。
この先頭の後は、普通にmarkdownで書くのみです。</p>

<p>書いた後、
<code>
% rake preview
</code>
とすることでhttp://localhost:4000/ で記載内容を確認できます。</p>

<p>確認できたら、
<code>
% rake gen_deploy
</code>
とすることでGithubに反映されます。(rake generate; rake deployの省略形のようです)<br/>
また、不要な記事は、markdownファイルを削除してから
再度gen_deployを実行することで削除可能です。</p>

<p>記事投稿をまとめると、</p>

<ul>
<li><code>rake new_post</code>でsourceフォルダにmarkdownファイルが作られ、</li>
<li><code>rake generate</code>でsourceフォルダからpublicフォルダにHTML形式が出力され、</li>
<li><code>rake deploy</code>でpublicフォルダから_deployフォルダにコピーされると共に、
GitHub側にも反映</li>
</ul>


<p>という流れです。</p>

<p>設定はおいおいやるとして、ひとまずこれでブログとして公開することができました。</p>

<h3>参考にさせて頂いたサイト</h3>

<ul>
<li><a href="http://octopress.org/">Octopress公式</a></li>
<li><a href="http://www.creativegear.jp/2012/12/29/octopress-post/">GitHubとOctopressで作るプログラマ向けブログ</a></li>
<li><a href="http://qiita.com/items/34e0ff2c369899169f90">Ruby1.9.3-p286インストール(RVM)</a></li>
<li><a href="http://spring-mt.tumblr.com/post/18486101350/ruby-rvm-install">rubyをrvmを使ってinstallする</a></li>
<li><a href="http://www.sankitch.me/blog/2012/05/05/build-octopress-on-github-dropbox/">Octopress + Github Pages + Dropbox でブログを構築</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
