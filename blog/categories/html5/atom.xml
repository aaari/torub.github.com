<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: html5 | Saturday Programmer]]></title>
  <link href="http://sat-pg.com/blog/categories/html5/atom.xml" rel="self"/>
  <link href="http://sat-pg.com/"/>
  <updated>2013-06-09T02:32:12+09:00</updated>
  <id>http://sat-pg.com/</id>
  <author>
    <name><![CDATA[torub]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[第1回 Build Insider OFFLINEメモ]]></title>
    <link href="http://sat-pg.com/blog/2013/06/08/buildinsider.html"/>
    <updated>2013-06-08T23:45:00+09:00</updated>
    <id>http://sat-pg.com/blog/2013/06/08/buildinsider</id>
    <content type="html"><![CDATA[<p><a href="http://www.buildinsider.net/event/offline/01">第1回 Build Insider OFFLINE</a>に行ってきたので、聞いてきた話をメモ。</p>

<!-- more -->


<h2>Keynote</h2>

<p>キーノートには遅れていったので気になった言葉のみ：<a href="http://www.microsoft.com/japan/web/webmatrix/">WebMatrix</a>、<a href="http://research.microsoft.com/en-us/projects/illumiroom/">illumiroom</a>、<a href="http://re.buildinsider.net/about/biwanted.pdf">記事募集</a></p>

<hr />

<h2>JavaScript ライブラリーを使い倒そう</h2>

<p>WINGSプロジェクト 安西 剛さんの講演。</p>

<p>かつてはエンタープライズでは邪魔者扱いのJavaScriptだったが、GoogleMapでのAjax利用から、みんなが使い始め、
最近になってJavaScript天国な状況になってきた。その分、複雑化している状況。</p>

<p>今後ますますライブラリが重要ということで、6つの観点で紹介。</p>

<h4>1. 手間を省こう系</h4>

<ul>
<li><p>jQuery, prottotype.js：prototype.jsは既存オブジェクトを拡張している。jQueryはしていない。(この差が今の普及の差に繋がっている?)</p></li>
<li><p>UI系: 無数にありすぎる。利用によりできるだけコードを書かずにリッチなUIを実現する系。</p>

<ul>
<li>Chosen (セレクトボックス)</li>
<li>竹取JS (縦書き)</li>
<li>jQuery UI</li>
</ul>
</li>
<li>UIフレームワーク

<ul>
<li>Twitter Bootstrap: どちらかというとCSSフレームワーク?</li>
</ul>
</li>
</ul>


<p>これらのライブラリを使うと、ページの初期表示速度が遅くなるため、CSSスプライト等を利用して読み込むファイルを少なくしたり、JSの処理を一番下に記載して、ページ読み込み時の処理を最小限にすることが重要。</p>

<h4>2. 言語特性補う系</h4>

<ul>
<li>CoffeeScript：言語特性からくる問題を回避。スコープ、クロージャなど。</li>
<li>TypeScript</li>
</ul>


<h4>3. フレームワーク</h4>

<p>JavaScriptが大規模複雑化したことによる設計の困難さを回避。まだ乱立している状態。
ポイントはHTML/UIとの関係性をどのようにするかや、マウスやキーなどのイベントをどう拾うか。
github上ではbackbone.jsが人気の模様。(backbone/knockout/Angularは2つめの講演で詳細あり)</p>

<ul>
<li>MVCフレームワーク

<ul>
<li>backbone.js：後述</li>
</ul>
</li>
<li>MVVM

<ul>
<li>Knockout：後述</li>
</ul>
</li>
<li>CoffeeScript対応MVC

<ul>
<li>Batman.js</li>
<li>Spine.js：Ruby on Railsみたいな感じにコマンドベースで作れる</li>
</ul>
</li>
<li>ViewとModelのデータバインディング

<ul>
<li>Angular.js：後述</li>
<li>Ember.js：データバインディングに特徴あり。JSとHTMLを宣言部分で紐付け。テンプレートエンジンと組み合わせて表示。</li>
</ul>
</li>
</ul>


<h4>4. ゲーム系</h4>

<ul>
<li>enchant.js

<ul>
<li>教育に適しているのではないか。キャラクターをオブジェクトとして考えやすいため、オブジェクト思考の勉強にもよいかも。</li>
<li>イベントドリブンで、イベントは非同期処理</li>
</ul>
</li>
</ul>


<h4>5. サーバ系</h4>

<ul>
<li>Node.js

<ul>
<li>v8エンジンが入っていて速い</li>
<li>イベントルーブとノンブロッキングIOが特徴で、シングルスレッドが特徴。</li>
<li>イベントが起きてもどんどんキューに入れていって処理を行う形態。</li>
<li>同期的な処理は書きづらい。phpみたいなようなことは難しい。MySQL問い合わせなども非同期で書く必要がある。</li>
<li>Express.jsがデファクト。Webアプリケーションを作る最低限が準備されている。例外やセッションも作成可能。</li>
<li>app.js→ルーティング→ビュー(テンプレートエンジン)</li>
</ul>
</li>
</ul>


<h4>6. テスト系</h4>

<p>ウォーターフォールは、品質をあとで担保するモデル。皆、この考えがしみついている。
現在は、反応を見るため、早めに市場にリリースし、頻繁なバージョンアップが必要な時代になっており、
あとで担保するような考えかたは難しくなってきている。</p>

<p>そこで、自動テスト、テスト駆動開発、継続的インテグレーション、クロスブラウザ対応、、等々が必要で、
常にリリース可能な品質を保つよう、マインドを変えたほうがいい。品質はあとでなく、随時作りこんでいく必要がある。</p>

<p>ライブラリを利用してこれらに対応する。</p>

<ul>
<li>テスティングフレームワーク

<ul>
<li>Mocha
  BDD(振る舞い駆動開発)、TDD(テスト駆動)、、など色々できる。
  TDDはテストを書いてからメソッド実装
  BDDはユーザから見たふるまいから</li>
</ul>
</li>
<li>アサートモジュール</li>
<li>クロスブラウザ自動チェック

<ul>
<li>JSTestDriver</li>
<li>サーバプロセスを立ち上げ、各ブラウザでアクセス</li>
<li>テスト実行→各ブラウザで実行される</li>
</ul>
</li>
<li>モック、スタブ: sinon.js、レスポンスの偽装ができる</li>
<li>静的解析1 JSLint、JSHint</li>
<li>静的解析2 jscoverage: どこまで試験ができているか。</li>
</ul>


<hr />

<h2>3つのMVC系人気フレームワーク、Backbone.js／AngularJS／Knockout.js</h2>

<h4><a href="http://backbonejs.org/">Backbone.js</a></h4>

<p>LINE株式会社 開発１室 UITチーム　清水 大輔さんの講演。</p>

<ul>
<li>MV*アプリを作る手助けとなるJSライブラリ。軽量、シンプル。</li>
<li>オブジェクト思考、MVC知識が必要</li>
<li>動的要素が少ないページでは不要</li>
<li>必要なライブラリは、jQuery(Zepto, Enderでも可)、underscore.js(配列操作などのUtility)、json2.js(jsonパーサ)など。</li>
<li>構成要素は、Bacobone.Event、Model、Collection、View、Sync、Router</li>
<li>MVCの利点: DOMからビジネスロジックが分離できる、UTがやりやすい等</li>
<li>Grunt.jsというビルドツールが便利。jshint、jasminなどでのチェック、ミニファイ等を実施</li>
<li>パフォーマンス

<ul>
<li>DOM: reflow、repaintを減らす。delegate eventを利用する</li>
<li>メモリ管理: メモリリークがある。view#removeでの後処理を意識する</li>
<li>通信: localStrageをうまく利用する</li>
</ul>
</li>
</ul>


<h4><a href="http://angularjs.org/">AngularJS</a> 概説</h4>

<p>AngularJS Japan User Group 管理人の金井 健一さんの講演</p>

<ul>
<li>Google製のフルスタックMVCフレームワーク</li>
<li></li>
<li>得意：CRUD系のアプリケーション、管理ページ、マイページ等</li>
<li>苦手：モバイル向け(フルスタックのため容量が多め)、ゲーム系のグラフィックの扱い</li>
<li>開発環境：YEOMAN(YO, GRUNT, BOWER)

<ul>
<li>双方向データバインディング</li>
<li>テンプレートとしてのHTML：サーバからJSONもらって組み立て)</li>
<li>再利用可能なコンポーネント：WebComponentを見すえて、独自のタグ実装が可能。実装は結構複雑</li>
<li>ビューとルーティング</li>
<li>テストとその可用性：Karma(Angular用に開発されており相性がいい)</li>
</ul>
</li>
<li>モバイルについては、ng-mobileというモジュールが追加され機能が追加された。
ただし、その分容量が増加しているため、最初の一回が遅い(100kbほど)。2回目以降はキャッシュされる。</li>
<li>UIは、AngularUIなどのAngularが用意しているライブラリの他、プラグインもある。</li>
</ul>


<h4><a href="http://knockoutjs.com/">Knockout.js</a>の概要</h4>

<p>沢渡 真雪さんの講演</p>

<ul>
<li>JavascirptアプリケーションのためのMVVMパターン。MVVMとは、ModelとViewの間にある、Viewのための振る舞いや状態を持つModel(ViewModel)。</li>
<li><a href="https://www.google.co.jp/search?q=MVVM+ugaya40&amp;oq=MVVM+ugaya40&amp;aqs=chrome.0.57j0.307j0&amp;sourceid=chrome&amp;ie=UTF-8">MVVM ugaya40で検索</a>するとわかりやすいらしい</li>
<li>単一のライブラリ(knockout.js)で、Observableと、バインディング機構のみで成り立っており軽量、シンプル。</li>
<li>ASP.NET開発チームの方が個人で開発しているため、ASP.NET MVCとともに採用されていることも多い。</li>
<li>Windows Azureポータルや、アメーバピグのスマホ版で利用</li>
<li>Observable

<ul>
<li>値を監視可能な形にラップする仕組み。</li>
<li>ko.observable：var a = 1 は監視できないが、var v = ko.observable(1)とすると、v()で値取得(getter)、v(value)で値代入(setter)とすることができる。</li>
<li>subscribeメソッドで監視して、変更時にコールバックが可能。v.subscribe(function(newv) { ... }, this);</li>
<li>ko.observableArrayを使うことで、同様の監視を配列でも可能。push、popなどもあり。</li>
<li>ko.computed：observable同様の監視可能な形。observableの変更も取得可能。普通の変数の値を変えても特に変化なし。
```javascript
value1 = ko.observable(1);
value2 = ko.observable(2);
computed = ko.computed(function() {
return vaulue1() + value2();
});</li>
</ul>
</li>
</ul>


<p>computed();
->3
value2(10);
computed();
->11
computed.subscribe(function(newValue) {</p>

<pre><code>alert(newValue);
</code></pre>

<p>});
value1(10);
->アラートが出るはず
```</p>

<ul>
<li><p>バインディング：監視可能なオブジェクトを、HTMLのDOMにひもづける機能
<code>html
&lt;input type="text" data-bind="value: value1" /&gt;
&lt;input type="text" data-bind="value: value2" /&gt;
&lt;span data-bind="value: computed" /&gt;
</code></p></li>
<li><p>最後にJavaScript側でバインディグを適用する: applyBindings</p>

<ul>
<li>値を入力(value、text、html)、属性オンオフ(CSS、style)、イベント(click、event)などが可能</li>
</ul>
</li>
</ul>


<hr />

<h2>リアルタイム Web 最前線 ～ Socket.IO ＆ SignalR 徹底解説</h2>

<p>ソーシャルグリッド株式会社 取締役CTO 芝村 達郎さんの講演</p>

<ul>
<li>リアルタイム・ウェブ：クライアント・サーバ間での双方向通信が特徴</li>
<li>サーバ→クライアントへのプッシュ通信。WebSocket、Server-Sent Event等</li>
<li>クライアント→サーバはAJAXなどを利用して実現</li>
<li>最近はWebSocketやSignalRが一般的。複数の通信方式をラッピングしている。</li>
</ul>


<h4>Socket.IOとSignalR(比較まとめ)</h4>

<table>
<thead>
<tr>
<th></th>
<th>Socket.IO</th>
<th>SignalR</th>
</tr>
</thead>
<tbody>
<tr>
<td>基本</td>
<td>Node.js上で動作する。Node.jsなのでシングルスレッド。</td>
<td>ASP.NET上のライブラリ。マルチスレッド</td>
</tr>
<tr>
<td>対応トランスポート</td>
<td>WebSocket、Adobe Flash Socket、AJAX long polling、AJAX multipart streaming、Forever Iframe(ほぼIE専用)、JSONP Polling(クロスドメインで利用可能)</td>
<td>WebSocket、Server-Sent Event、Forever Frame、Long Polling</td>
</tr>
<tr>
<td>クライアント</td>
<td>JavaScriptのみでなく、Java、Objective-C、C/C++、PHP、.NET等々、多数</td>
<td>JavaScript(jQuery依存)、.NET Framework4, 4.5、Windows Storeアプリ、WinPhone8、Silverlight、Xamarin.iOS/Xamarin.Android</td>
</tr>
<tr>
<td>向いているOS</td>
<td>Mac/Linux系</td>
<td>Windows系</td>
</tr>
<tr>
<td>パフォーマンス</td>
<td>シングルスレッド + クラスタ化であげる</td>
<td>マルチスレッド</td>
</tr>
<tr>
<td>設計思想</td>
<td>イベントベース</td>
<td>リモートプロシジャーコール</td>
</tr>
</tbody>
</table>


<!--
* Socket.IO
    - Node.js上で動作する
    - 対応しているトランスポート：WebSocket、Adobe Flash Socket、AJAX long polling、AJAX multipart streaming、Forever Iframe(ほぼIE専用)、JSONP Polling(クロスドメインで利用可能)
    - Windowsでは、WebMatrixのNode.jsテンプレートを使うと簡単。IISで動く独自のNodeを準備している。
    - Macでは、好きなエディタでどうぞ。
    - クライアントは、JavaScriptのみでなく、Java、Objective-C、C/C++、PHP、.NET等々、多数用意されている。
* SingnalR
    - ASP.NET上のライブラリ。マルチスレッド、Taskベースの非同期処理。シングルスレッドのNode.jsとはマルチコア時に速度差が出る
    - 対応しているトランスポート：WebSocket、Server-Sent Event、Forever Frame、Long Polling
    - Windowsの.NETで動作。
    - クライアントは、JavaScript(jQuery依存)、.NET Framework4, 4.5、Windows Storeアプリ、WinPhone8、Silverlight、Xamarin.iOS/Xamarin.Android
* 比較
    - パフォーマンス
        - Socket.IO: シングルスレッド + クラスタ化
        - SignalR: マルチスレッド
    - 設計思想
        - Socket.IO: イベントベース
        - SignalR: リモートプロシジャーコール
* WinならSignalR、Mac、LinuxならSocket.IOでいいんじゃ。
-->


<h4>スケールアウト</h4>

<ul>
<li>コネクションが貼りっぱなしであり、リソースを消費するため、1台のサーバで処理できるクライアント数は決まる。</li>
<li>単純に台数増やすだけではスケールしない。クライアントがどのサーバに繋っているかは他のサーバからは確認できない。WebSocketを使うAPの制約。メッセージング用サーバを用意して中継してあげる必要がある。</li>
<li>共通：Pub/Subメッセージングを利用する(RedisやWindowsAzureサービスバス)。  ※(?このへんよくわからず)</li>
<li>Socket.IO：接続情報をメモリでなく、外部ストレージに保存</li>
<li>SignalR：接続情報は共有せず、メッセージングに投げる(unique idを使って投げるのみ)</li>
</ul>


<h4>その他</h4>

<ul>
<li>双方向通信は必須ではない。必要なときにサーバからプッシュできればいい。<a href="http://pusher.com/">PUSHER</a>(プッシュするだけのサービス)がなりたつのでサーバからのプッシュの需要はあるんではないか。</li>
<li><p>通信頻度を下げる。underscore.jsのthrottle/debounceを使うことで、指定された秒数に最大1回実行/呼び出し後、指定された秒数がたったら呼び出しされる。</p></li>
<li><p>リアルタイム性を活かすアプリはあまり浮かばない(チャットアプリはもう飽きた)</p></li>
<li>プッシュ+クライアント同時接続を活かしたアプリ(チャット以外)を作ればいい。</li>
<li>スケールアウトは難しい。SignalRはメモリリーク解消に長い時間悩まされた。</li>
<li>今後は複数人でのリアルタイムコラボアプリに期待</li>
<li>センサーと同期して入退室管理とかもいいかも</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SVCのテスト]]></title>
    <link href="http://sat-pg.com/blog/2013/05/19/svctest.html"/>
    <updated>2013-05-19T11:35:00+09:00</updated>
    <id>http://sat-pg.com/blog/2013/05/19/svctest</id>
    <content type="html"><![CDATA[<p>SVCのサンプルを記載します。</p>

<ul>
<li><a href="#base">基本図形</a></li>
<li><a href="#gra">グラデーション</a></li>
<li><a href="#poly">線、ポリゴン</a></li>
<li><a href="#text">テキスト</a></li>
<li><a href="#animation">アニメーション</a></li>
<li><a href="#sanko">参考</a></li>
</ul>


<!-- more -->


<h2><a name="base"></a>基本図形</h2>

<ul>
<li>rect: 長方形</li>
<li>line: 直線</li>
<li>circle: 円</li>
<li>ellipse: 楕円</li>
</ul>


<h4>サンプル</h4>

<p>```html</p>

<pre><code>&lt;svg width="600" height="300"&gt;
    &lt;rect x="100" y="10" rx="20" ry="10" width="400" height="200" fill="lightblue" /&gt;
    &lt;line x1="100" y1="50" x2="400" y2="200" stroke-width="20" stroke="blue" stroke-linecap="round" /&gt;
    &lt;circle cx="250" cy="150" r="50" fill="red" /&gt;
    &lt;ellipse cx="450" cy="50" rx="50" ry="20" fill="green" /&gt;
&lt;/svg&gt;
</code></pre>

<p>```</p>

<dl>
    <svg width="600" height="300">
        <rect x="100" y="10" rx="20" ry="10" width="400" height="200" fill="lightblue" />
        <line x1="100" y1="50" x2="400" y2="200" stroke-width="20" stroke="blue" stroke-linecap="round" />
        <circle cx="250" cy="150" r="50" fill="red" />
        <ellipse cx="450" cy="50" rx="50" ry="20" fill="green" />
    </svg>
</dl>


<h2><a name="gra"></a>グラデーション</h2>

<ul>
<li>defsタグの中で設定の定義ができる。</li>
<li>linearGradient: 直線上のグラデーション</li>
<li>radialGradient: 円形のグラデーション</li>
</ul>


<h4>サンプル</h4>

<p>```html</p>

<pre><code>&lt;svg width="400" height="200"&gt;
    &lt;defs&gt;
        &lt;linearGradient id="g1" x1="0" y1="0" x2="1" y2="0.5"&gt;
            &lt;stop offset="0" stop-color="skyblue" /&gt;
            &lt;stop offset="0.5" stop-color="pink" /&gt;
            &lt;stop offset="1" stop-color="yellow" stop-opacity="0.5" /&gt;                  
        &lt;/linearGradient&gt;
        &lt;radialGradient id="g2" cx="0.5" cy="0.5" r="0.5"&gt;
            &lt;stop offset="0" stop-color="lightgreen" /&gt;
            &lt;stop offset="0.8" stop-color="pink" /&gt;
            &lt;stop offset="1" stop-color="yellow" stop-opacity="0.5" /&gt;                  
        &lt;/radialGradient&gt;
    &lt;/defs&gt;
    &lt;rect width="200" height="200" fill="url(#g1)" /&gt;
    &lt;rect x="200" width="400" height="200" fill="url(#g2)" /&gt;
&lt;/svg&gt;
</code></pre>

<p>```</p>

<dl>
    <svg width="600" height="250">
        <defs>
            <linearGradient id="g1" x1="0" y1="0" x2="1" y2="0.5">
                <stop offset="0" stop-color="skyblue" />
                <stop offset="0.5" stop-color="pink" />
                <stop offset="1" stop-color="yellow" stop-opacity="0.5" />                  
            </linearGradient>
            <radialGradient id="g2" cx="0.5" cy="0.5" r="0.5">
                <stop offset="0" stop-color="lightgreen" />
                <stop offset="0.8" stop-color="pink" />
                <stop offset="1" stop-color="yellow" stop-opacity="0.5" />                  
            </radialGradient>
        </defs>
        <rect width="300" height="200" fill="url(#g1)" />
        <rect x="300" width="300" height="200" fill="url(#g2)" />
    </svg>
</dl>


<h2><a name="poly"></a>線、ポリゴン</h2>

<ul>
<li>polygonタグで図形描画: 座標を複数記入すると繋いでくれる</li>
<li>pathタグで直線

<ul>
<li>M: 移動する座標を記載</li>
<li>l: 線を引く座標を記載(?)</li>
<li>h: 水平方向に線を引く</li>
<li>v: 垂直方向に線を引く</li>
</ul>
</li>
</ul>


<h4>サンプル</h4>

<p>```html</p>

<pre><code>&lt;svg width="600" height="300"&gt;
    &lt;polygon points="100 50 250 100 50 100 100 0" stroke="black" fill="url(#g1)" /&gt;
    &lt;!-- (100,150) から x方向に50、y方向に50の線を引き、水平方向に50、
        垂直方向に30、水平方向に-30の線を引く   --&gt;
    &lt;path d="M100 150 l50 50 h50 v30 h-30" stroke="black" fill="none" /&gt;
&lt;/svg&gt;
</code></pre>

<p>```</p>

<dl>
    <svg width="600" height="300">
        <polygon points="100 50 250 100 50 100 100 0" stroke="black" fill="url(#g1)" />
        <path d="M100 150 l50 50 h50 v30 h-30" stroke="black" fill="none" />
    </svg>
</dl>


<h2><a name="text"></a>テキスト</h2>

<ul>
<li>テキストタグで記載</li>
<li>rotateで傾けたりも可能</li>
</ul>


<h4>サンプル</h4>

<p>```html</p>

<pre><code>&lt;svg width="500" height="300"&gt;
    &lt;rect width="500" height="300" fill="black" /&gt;
    &lt;text x="100" y="100" font-size="96" fill="lightpink" stroke="blue"
        stroke-width="3"&gt;Hello!&lt;/text&gt;
    &lt;text x="100" y="200" font-size="96" fill="lightblue" stroke="blue" 
        stroke-width="3" rotate="30"&gt;World!!&lt;/text&gt; 
&lt;/svg&gt;
</code></pre>

<p>```</p>

<dl>
    <svg width="500" height="300">
        <rect width="500" height="300" fill="black" />
        <text x="100" y="100" font-size="96" fill="lightpink" stroke="blue"
            stroke-width="3">Hello!</text>
        <text x="100" y="200" font-size="96" fill="lightblue" stroke="blue" 
            stroke-width="3" rotate="30">World!!</text> 
    </svg>
</dl>


<h2><a name="animation"></a>アニメーション</h2>

<ul>
<li>図形タグの中にanimateタグを追記して作成する</li>
<li>属性を指定して、fromとtoで値を指定し、durで時間を指定</li>
<li>repeatCountで回数を指定。無限回はindefinite</li>
</ul>


<h4>サンプル</h4>

<p>```html</p>

<pre><code>&lt;svg width="500" height="250"&gt;
    &lt;rect width="10" height="10" fill="url(#g1)" &gt;
        &lt;animate attributeName="width" from="10" to="500" dur="5s" repeatCount="10" /&gt;
        &lt;animate attributeName="height" from="10" to="200" dur="3s" repeatCount="10" /&gt;
    &lt;/rect&gt;
&lt;/svg&gt;
</code></pre>

<p>```</p>

<dl>
    <svg width="500" height="250">
        <rect width="10" height="10" fill="url(#g1)" >
            <animate attributeName="width" from="10" to="500" dur="5s" repeatCount="10" />
            <animate attributeName="height" from="10" to="200" dur="3s" repeatCount="indefinite" />
        </rect>
    </svg>
</dl>


<h2><a name="js"></a>JavaScriptとの連携</h2>

<ul>
<li>setAttributeメソッドを利用して、JavaScriptから値の変更が容易に可能</li>
</ul>


<h4>ボタン押すたびに変更するサンプル</h4>

<p>```html</p>

<pre><code>&lt;svg width="600" height="250"&gt;
    &lt;rect width="600" height="250" stroke="black" fill="white" /&gt;
    &lt;circle cx="100" cy="100" r="20" fill="white" name="test" /&gt;
    &lt;circle cx="100" cy="100" r="20" fill="white" name="test" /&gt;
    &lt;circle cx="100" cy="100" r="20" fill="white" name="test" /&gt;
    &lt;circle cx="100" cy="100" r="20" fill="white" name="test" /&gt;
    &lt;circle cx="100" cy="100" r="20" fill="white" name="test" /&gt;
    &lt;circle cx="100" cy="100" r="20" fill="white" name="test" /&gt;
    &lt;circle cx="100" cy="100" r="20" fill="white" name="test" /&gt;
    &lt;circle cx="100" cy="100" r="20" fill="white" name="test" /&gt;
    &lt;circle cx="100" cy="100" r="20" fill="white" name="test" /&gt;
&lt;/svg&gt;
&lt;button type="button" onclick="
    var c = document.getElementsByName('test');
    for (var i = 0; i &lt; c.length; i ++) {
        c[i].setAttribute('cx', r(500));
        c[i].setAttribute('cy', r(250));
        c[i].setAttribute('r', r(100));
        c[i].setAttribute('fill', 'rgb(' +r(255)+',' +r(255)+',' +r(255)+')');
    }
    function r(n) {
        return Math.floor(Math.random() * (n + 1));
    }
"&gt;reload&lt;/button&gt;
</code></pre>

<p>```</p>

<dl>
    <svg width="600" height="250">
        <rect width="600" height="250" stroke="black" fill="white" />
        <circle cx="100" cy="100" r="20" fill="white" name="test" />
        <circle cx="100" cy="100" r="20" fill="white" name="test" />
        <circle cx="100" cy="100" r="20" fill="white" name="test" />
        <circle cx="100" cy="100" r="20" fill="white" name="test" />
        <circle cx="100" cy="100" r="20" fill="white" name="test" />
        <circle cx="100" cy="100" r="20" fill="white" name="test" />
        <circle cx="100" cy="100" r="20" fill="white" name="test" />
        <circle cx="100" cy="100" r="20" fill="white" name="test" />
        <circle cx="100" cy="100" r="20" fill="white" name="test" />
    </svg>
    <button type="button" onclick="
        var c = document.getElementsByName('test');
        for (var i = 0; i < c.length; i ++) {
            c[i].setAttribute('cx', r(500));
            c[i].setAttribute('cy', r(250));
            c[i].setAttribute('r', r(100));
            c[i].setAttribute('fill', 'rgb(' +r(255)+',' +r(255)+',' +r(255)+')');
        }
        function r(n) {
            return Math.floor(Math.random() * (n + 1));
        }
    ">reload</button><br><br>
</dl>


<h2>参考</h2>

<ul>
<li><a href="http://dotinstall.com/lessons/basic_svg">ドットインストール</a> を参考にさせて頂きました。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WebRTCサンプル]]></title>
    <link href="http://sat-pg.com/blog/2013/05/06/webrtc.html"/>
    <updated>2013-05-06T04:05:00+09:00</updated>
    <id>http://sat-pg.com/blog/2013/05/06/webrtc</id>
    <content type="html"><![CDATA[<p>WebRTCのサンプルを動かしてみたのでまとめます。</p>

<h3><a href="http://dl.dropboxusercontent.com/u/321302/html5/webrtc.html">カメラから映像を取り込み、そのまま流すのみのサンプル</a></h3>

<p>2013/5/6現在、MacのGoogle Chorome Version 26では以下を読み込んで動作しました。
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (webrtc.html)</span> <a href='/downloads/code/webrtc.html'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;ja&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>WebRTC<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://code.jquery.com/jquery-1.9.1.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;video</span> <span class="na">id=</span><span class="s">&quot;myvideo&quot;</span> <span class="na">width=</span><span class="s">&quot;320&quot;</span> <span class="na">height=</span><span class="s">&quot;240&quot;</span> <span class="na">autoplay</span> <span class="na">style=</span><span class="s">&quot;border:1px solid black&quot;</span><span class="nt">&gt;&lt;/video&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">navigator</span><span class="p">.</span><span class="nx">webkitGetUserMedia</span><span class="p">({</span><span class="nx">video</span><span class="o">:</span><span class="kc">true</span><span class="p">,</span> <span class="nx">audio</span><span class="o">:</span><span class="kc">true</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">stream</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">myvideo</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#myvideo&quot;</span><span class="p">).</span><span class="nx">get</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">myvideo</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="nx">webkitURL</span><span class="p">.</span><span class="nx">createObjectURL</span><span class="p">(</span><span class="nx">stream</span><span class="p">);</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Androidでは、version26を利用し、アドレスバーに
<code>about:flags</code>と入力後、以下の「WebRTCを有効にする」を選択してChromeを再起動することで
実行が可能になります。</p>

<p><img src="/images/cap/webrtc_android.png"></p>

<p>iOSは現状ではSafari, Chromeとも動作しない模様です。</p>
]]></content>
  </entry>
  
</feed>
