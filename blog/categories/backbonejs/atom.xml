<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: backbonejs | Saturday Programmer]]></title>
  <link href="http://sat-pg.com/blog/categories/backbonejs/atom.xml" rel="self"/>
  <link href="http://sat-pg.com/"/>
  <updated>2013-06-17T00:58:18+09:00</updated>
  <id>http://sat-pg.com/</id>
  <author>
    <name><![CDATA[torub]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Backbone.jsお試し]]></title>
    <link href="http://sat-pg.com/blog/2013/06/17/backbonejs1.html"/>
    <updated>2013-06-17T00:21:00+09:00</updated>
    <id>http://sat-pg.com/blog/2013/06/17/backbonejs1</id>
    <content type="html"><![CDATA[<p>Knockout.jsの次はBackbone.jsのテスト。</p>

<p><a href="http://dotinstall.com/lessons/basic_backbonejs">ドットインストールのBackbone.js入門</a>を試してみた結果を添付します。</p>

<!-- more -->


<h5>index.html</h5>

<p>```html</p>

<pre><code>&lt;style type="text/css"&gt;
    .completed {
        text-decoration: line-through;
        color: gray;
    }
&lt;/style&gt;
&lt;form id="addTask"&gt;
    &lt;input type="text" id="title"/&gt;
    &lt;input type="submit" value="add"/&gt;
    &lt;span id="error"&gt;&lt;/span&gt;
&lt;/form&gt;

&lt;div id="tasks"&gt;&lt;/div&gt;
&lt;p&gt;Tasks left: &lt;span id="count"&gt;&lt;/span&gt;&lt;/p&gt;

&lt;script type="text/template" id="task-template"&gt;
    &lt;input type="checkbox" class="toggle" &lt;%- completed ? 'checked' : '' %&gt; /&gt; 
    &lt;span class="&lt;%- completed? 'completed':''%&gt;"&gt; &lt;%- title %&gt; &lt;/span&gt;
    &lt;span class="delete"&gt;[x]&lt;/span&gt;
&lt;/script&gt;
&lt;script src="http://underscorejs.org/underscore-min.js"&gt;&lt;/script&gt;
&lt;script src="http://code.jquery.com/jquery-1.10.1.min.js"&gt;&lt;/script&gt;
&lt;script src="http://backbonejs.org/backbone-min.js"&gt;&lt;/script&gt;
&lt;script src="js/app.js"&gt;&lt;/script&gt;
</code></pre>

<p>```</p>

<h5>app.js</h5>

<p>```javascript
(function() {</p>

<pre><code>// Model
var Task = Backbone.Model.extend({
    defaults: {
        title: "do something",
        completed: false
    },
    validate: function(attrs) {
        if (_.isEmpty(attrs.title)) {
            return 'title must not be empty';
        }
    },
    initialize: function() {
        this.on('invalid', function(model, error) {
            $('#error').html(error);
        })
    }
});
var Tasks = Backbone.Collection.extend({ model: Task });

// View
var TaskView = Backbone.View.extend({
    tagName: 'li',
    initialize: function() {
        this.model.on('destroy', this.remove, this);
        this.model.on('change', this.render, this);
    },
    events: {
        'click .delete': 'destroy',
        'click .toggle': 'toggle'
    },
    destroy: function() {
        if(confirm(' are you ok ?')) {
            this.model.destroy();
        }
    },
    toggle: function() {
        this.model.set('completed', !this.model.get('completed'));
    },
    remove: function() {
        this.$el.remove();
    },
    template: _.template($('#task-template').html()),
    render: function() {
        var temp = this.template(this.model.toJSON());
        this.$el.html(temp);
        return this;
    }
});
var TasksView = Backbone.View.extend({
    tagName: 'ul',
    initialize: function() {
        this.collection.on('add', this.addNew, this);
        this.collection.on('change', this.updateCount, this);
        this.collection.on('destroy', this.updateCount, this);
    },
    addNew: function(task) {
        var taskView = new TaskView({model:task});
        this.$el.append(taskView.render().el);
        $('#title').val('').focus();
        this.updateCount();
    },
    updateCount: function() {
        var uncompletedTasks = this.collection.filter(function(task) {
            return !task.get('completed');
        });
        $('#count').html(uncompletedTasks.length);
    },
    render: function() {
        this.collection.each(function(task) {
            var taskView = new TaskView({model: task});
            this.$el.append(taskView.render().el);
        }, this);
        this.updateCount();
        return this;
    }
});

var AddTaskView = Backbone.View.extend({
    el: '#addTask',
    events: {
        'submit': 'submit'
    },
    submit: function(e) {
        e.preventDefault();
        var task = new Task();
        if (task.set({title: $('#title').val()}, {validate: true})) {
            this.collection.add(task);
            $('#error').empty();
        }
    }
});
var tasks = new Tasks([
        {title: 'task1', completed: true},
        {title: 'task2'},
        {title: 'task3'},
        {title: 'task4'}
    ]);
var tasksView = new TasksView({collection: tasks});
var addTaskView = new AddTaskView({collection: tasks});
$('#tasks').html(tasksView.render().el)
</code></pre>

<p>}());
```</p>

<h4>実行結果</h4>



<p><form id="addTask">
<input type="text" id="title"/>
<input type="submit" value="add"/>
<span id="error"></span>
</form></p>

<div id="tasks"></div>


<p>Tasks left: <span id="count"></span></p>




<script type="text/template" id="task-template">
    <input type="checkbox" class="toggle" <%- completed ? 'checked' : '' %> />
    <span <%- completed? 'style=text-decoration:line-through;color:gray;':''%>> <%- title %> </span>
    <span class="delete">[x]</span>
</script>


<script src="http://underscorejs.org/underscore-min.js"></script>


<script src="http://code.jquery.com/jquery-1.10.1.min.js"></script>


<script src="http://backbonejs.org/backbone-min.js"></script>


<script>
(function() {
    // Model
    var Task = Backbone.Model.extend({
        defaults: {
            title: "do something",
            completed: false
        },
        validate: function(attrs) {
            if (_.isEmpty(attrs.title)) {
                return 'title must not be empty';
            }
        },
        initialize: function() {
            this.on('invalid', function(model, error) {
                $('#error').html(error);
            })
        }
    });
    var Tasks = Backbone.Collection.extend({ model: Task });

    // View
    var TaskView = Backbone.View.extend({
        tagName: 'li',
        initialize: function() {
            this.model.on('destroy', this.remove, this);
            this.model.on('change', this.render, this);
        },
        events: {
            'click .delete': 'destroy',
            'click .toggle': 'toggle'
        },
        destroy: function() {
            if(confirm(' are you ok ?')) {
                this.model.destroy();
            }
        },
        toggle: function() {
            this.model.set('completed', !this.model.get('completed'));
        },
        remove: function() {
            this.$el.remove();
        },
        template: _.template($('#task-template').html()),
        render: function() {
            var temp = this.template(this.model.toJSON());
            this.$el.html(temp);
            return this;
        }
    });
    var TasksView = Backbone.View.extend({
        tagName: 'ul',
        initialize: function() {
            this.collection.on('add', this.addNew, this);
            this.collection.on('change', this.updateCount, this);
            this.collection.on('destroy', this.updateCount, this);
        },
        addNew: function(task) {
            var taskView = new TaskView({model:task});
            this.$el.append(taskView.render().el);
            $('#title').val('').focus();
            this.updateCount();
        },
        updateCount: function() {
            var uncompletedTasks = this.collection.filter(function(task) {
                return !task.get('completed');
            });
            $('#count').html(uncompletedTasks.length);
        },
        render: function() {
            this.collection.each(function(task) {
                var taskView = new TaskView({model: task});
                this.$el.append(taskView.render().el);
            }, this);
            this.updateCount();
            return this;
        }
    });

    var AddTaskView = Backbone.View.extend({
        el: '#addTask',
        events: {
            'submit': 'submit'
        },
        submit: function(e) {
            e.preventDefault();
            var task = new Task();
            if (task.set({title: $('#title').val()}, {validate: true})) {
                this.collection.add(task);
                $('#error').empty();
            }
        }
    });
    var tasks = new Tasks([
            {title: 'task1', completed: true},
            {title: 'task2'},
            {title: 'task3'},
            {title: 'task4'}
        ]);
    var tasksView = new TasksView({collection: tasks});
    var addTaskView = new AddTaskView({collection: tasks});
    $('#tasks').html(tasksView.render().el)
}());
</script>

]]></content>
  </entry>
  
</feed>
