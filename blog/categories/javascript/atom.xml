<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | Saturday Programmer]]></title>
  <link href="http://sat-pg.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://sat-pg.com/"/>
  <updated>2013-08-06T02:08:16+09:00</updated>
  <id>http://sat-pg.com/</id>
  <author>
    <name><![CDATA[torub]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[HTML5勉強会「HTML5×Internet Exploler」メモ]]></title>
    <link href="http://sat-pg.com/blog/2013/08/02/html5j-ie.html"/>
    <updated>2013-08-02T23:50:00+09:00</updated>
    <id>http://sat-pg.com/blog/2013/08/02/html5j-ie</id>
    <content type="html"><![CDATA[<p>HTML5jえんぷら部主催の勉強会に参加したためメモ。</p>

<p>タイトルは、「HTML5✕Internet Explorer 〜IEを使ってどこまでモダンなWebへ突き進めるのか？〜」ということで、
エンタープライズとは切っても切り離せないIEのお話。</p>

<p>全体を通して、IEの互換モードや、Compat Inspector、modern.IEにより検証を行っていくことで、エンタープライズの開発に対応していくのか、というのが印象に残りました。</p>

<!-- more -->


<h2>新しいIEとJavaScriptで動かす最近のWebアプリケーション</h2>

<p>株式会社ピクセルグリッド MicrosoftMVP（InternetExplorer）小山田さんのお話</p>

<h4>古いIEで作ったものが新しいIEで動かない理由は?</h4>

<ul>
<li>Quirks Modeで作っている

<ul>
<li>CSSの解釈が違う。widthとpadding程度でも異なる。</li>
<li>Quirks Modeには、HTMLのDOCTYPE宣言でスイッチする。正しく書けばStandardモードに替えられる</li>
<li>今後作る場合は、正しいDoctype宣言を使って、Standartモードで動作させることを勧める</li>
</ul>
</li>
<li>IE独自拡張を使っている

<ul>
<li>ActiveXObjectや、VBScriptや、VML等。ActiveXObjectはJavaScriptへ、VMLはSVGへと修正すべき</li>
</ul>
</li>
<li>プラグインに頼っている

<ul>
<li>Flash、Sliverlightなどなど</li>
</ul>
</li>
</ul>


<h4>新しいIEで動かすには?</h4>

<ul>
<li>IEは古いエンジンを持っているのでそれを使う

<ul>
<li>IE9は、IE7,8,9相当のモードを持っている。エミュレートできる。古いサイトを見ているときは、古いモードで。</li>
<li>headにmetaタグとして、<code>&lt;meta http-equiv="X-UA-Compatible" content="IE=EmulateIE7" /&gt;</code>と記載するとIE7モードになる。</li>
<li>Trident(レンダリングエンジン)はエミュレートできるが、JScriptはだめ。</li>
</ul>
</li>
</ul>


<h4>これからはどうするか?</h4>

<ul>
<li>重要なのはJavaScript</li>
<li>Word、ExcelなんかもJavaScriptで動く。ほぼ標準技術のみでWebシステムを作ることができる。</li>
<li>既存システムにWebAPIを追加してJSONをやりとりするようにすればいい。ブラウザはそれを受け取りJavaScriptで画面を作る。</li>
<li>jQuery + Backbone.jsなどで、それらが実現できる。</li>
</ul>


<h2>IT管理者と新しいIE</h2>

<p>MicrosoftMVP（InternetExplorer）の村地さんのお話</p>

<ul>
<li>IEは進化している。古いのはいつまで使えるのか

<ul>
<li>IE6 2014/4/8 EOL(XPとおなじ)</li>
<li>IE7 2017/4/11 EOL(Vistaとおなじ)</li>
<li>IE8,9 2020/1/14 EOL(win7とおなじ)</li>
<li>IE10,11 2023/1/10 EOL(win8とおなじ)</li>
</ul>
</li>
<li>更新のサイクルはだんだん短かくなっていて、今後は、高速リリースも想定される。10年サポートの見直しもあるかもしれない。</li>
<li>バージョン統一が難しくなっていくかもしれない。</li>
<li>クラウドは最新から1つ前のバージョンまでしか対応していない。(N-1対応)</li>
</ul>


<h4>短期的な対応策</h4>

<ul>
<li>互換モードを活用する

<ul>
<li>エミュレートされるもの：レンダリング、JavaScript(パースとか)、DOM、CSS、User Agent String(互換モードとわかる)</li>
<li>イントラネットゾーンのサイトは、規定で互換モード表示。企業内に閉じていれば互換モード表示される</li>
<li>ユーザが互換表示ボタンをクリックすることでも互換モードにできる</li>
<li>サーバレスポンスで互換表示、またはページのmetaタグで互換表示

<ul>
<li>X-UA-Compatible HTTPヘッダー</li>
<li>X-UA-Compatible: IE-EmulateIE7</li>
<li>edge(IE=edge 最新で表示する)</li>
</ul>
</li>
<li>Microsoftが提供する互換表示リスト(Web Browser Controlの互換モード)

<ul>
<li>デフォルト必ずIE7モードで動作する。設定変更はレジストリを変更する必要あり</li>
<li>http://msdn.microsoft.com/en-us/library/ee330730.aspx 参照</li>
<li>IE上げても変わらないから注意</li>
</ul>
</li>
<li>互換モード問題点

<ul>
<li>動かないものは動かない</li>
<li>Win8のスタート画面のIEには互換モードない</li>
</ul>
</li>
</ul>
</li>
<li>互換性検証を活用する

<ul>
<li>既存の互換性上の問題を検証する</li>
<li>新しいIEと非互換の部分、改善すべき部分とその改善方法を確認する</li>
<li>改善作業をスケジュール化する</li>
<li><a href="http://ie.microsoft.com/testdrive/html5/compatinspector/">Compat Inspector</a>を利用すると簡単

<ul>
<li>Compat InspectorはJavaScriptをページの先頭で読み込むと、互換性スコアがページ内に表示されるもの。赤は致命的、黄色は問題がある可能性がある、青は軽微なもの。クリックすると概要教えてくれる。</li>
<li>Compat Inspectorの設置は、サーバのコンテンツを書き替えるか、難しければFiddlerを使ってレスポンスに挿入するのを推奨。<a href="http://www.slideshare.net/hebikuzure/cod2012-room-t1">参考</a></li>
</ul>
</li>
</ul>
</li>
</ul>


<h4>中長期的</h4>

<ul>
<li>ロックイン(ベンダロックイン、バージョンロックイン)を避ける</li>
<li>Webの本質に立ち返る

<ul>
<li>クライアントでのインストールレス</li>
<li>サーバのみの改修で完結</li>
<li>NWに繋がればすぐ利用できる</li>
<li>迅速に対応できる、効率化とスピードアップする</li>
<li>レガシーブラウザに縛られるのは本末転倒</li>
</ul>
</li>
<li>Web Standardsへの準拠

<ul>
<li>標準化されていない技術は避ける</li>
<li>User Agent/Browser Versionを固定したコードを書かない</li>
<li>HackではなくFeature Detection(機能検出)</li>
<li><strong>些細な違いを気にしない(重要!!)</strong></li>
</ul>
</li>
<li>後方互換性はいつまで維持されるのかわからない。短期的な手段は時間を買うための手段。新しい標準準拠のブラウザ対応するための仕組み作りのための時間</li>
</ul>


<h2>だから、IEは業務システムで使われている。いままでもこれからも</h2>

<p>日本マイクロソフトの内河さんのお話</p>

<h4>IE11の紹介</h4>

<ul>
<li>とにかく速いとのこと。WebGLサンプル(ヒマラヤの気候とか。3Dのエベレスト。GLACERWORKS)もIEならスムーズに動く</li>
<li><a href="http://ie.microsoft.com/testdrive">IE Test Drive</a>で他ブラウザとの差を見て欲しい</li>
</ul>


<h4>Web標準への取り組みとmodern.IE</h4>

<ul>
<li>レガシーIE(6,7,8)の存在により、プラットフォーム、バージョンが断片化し、開発者の負担が増える。</li>
<li>検証には、<a href="http://modern.ie/">modern.IE</a>を使って欲しい

<ul>
<li>検証ウィザード、検証のための仮想環境、ベストプラクティスなどがある。</li>
</ul>
</li>
<li>開発者ツール(F12)でも、ブラウザモード、ドキュメントモードによる検証が実施できる</li>
</ul>


<h4>バグ報告は connect.microsoft.com/ie</h4>

<ul>
<li>エンジニアチームに直接フィードバックできる</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone.jsのtutorial(1)]]></title>
    <link href="http://sat-pg.com/blog/2013/06/18/backbone-tutorial-1.html"/>
    <updated>2013-06-18T02:57:00+09:00</updated>
    <id>http://sat-pg.com/blog/2013/06/18/backbone-tutorial-1</id>
    <content type="html"><![CDATA[<p>ひきつづきBackbone.jsの勉強。</p>

<p><a href="http://dailyjs.com/2012/11/29/backbone-tutorial-1/">DailyJSのBackboneチュートリアルPart1</a>見てみたけど、
不明点だらけのため、調べたことをメモ。</p>

<h3>Step1: package.json</h3>

<ul>
<li>node.jsによるパッケージ管理ツール(npm)で、パッケージのバージョン管理をするためのもの。</li>
<li>package.jsonを記載して、<code>npm install</code>とすることで必要なモジュールがインストールされる。</li>
<li><code>./node_modules</code>以下にファイルがコピーされるため、git使う場合は.gitignoreに記載したほうがいい。</li>
<li>gruntのバージョンが変わっているためサンプルを一部修正。(gruntは、gruntの他にgrunt-cliとgrunt-initの3つに分かれたとのこと。<a href="https://github.com/gruntjs/grunt/wiki/Upgrading-from-0.3-to-0.4">gruntのmigration guide</a>)</li>
</ul>


<h3>Step2: server.js</h3>

<ul>
<li><a href="http://www.senchalabs.org/connect/">Connect</a>はNode.jsのミドルウェアフレームワークで、複数のミドルウェアが扱える。</li>
<li>Connectのstaticは、静的なファイルを返すサーバを作れるみたい。</li>
<li>Connect#useで、マウントポイントやルーティングの設定等ができるので、サンプルでは、<code>app</code>をルートディレクトリとし、<code>node_modules</code>はそのまま、<code>/js/lib/</code>は、<code>node_modules/requirejs/</code>にマウントをしている。</li>
<li>例) <code>http://localhost:8000/js/lib/require.js</code>と<code>http://localhost:8000/node_modules/requirejs/require.js</code>は同じファイルで、両方ともブラウザからアクセスできる。</li>
</ul>


<h3>Step3: RequrireJS</h3>

<p><a href="http://requirejs.org/">RequreJSの公式</a>から引用。</p>

<pre><code>RequireJS is a JavaScript file and module loader. It is optimized for in-browser use, 
but it can be used in other JavaScript environments, like Rhino and Node. 
Using a modular script loader like RequireJS will improve the speed and quality of your code.
</code></pre>

<ul>
<li>JavaScriptのファイル・モジュールの読み込み用ライブラリで、必要になったとき読み込む等で、スピードと品質を改善する。</li>
<li>RequireJSの設定はmain.jsに書くのが普通らしい。(このサンプルでもapp/js/main.jsに<code>requirejs.config..</code>を記載)</li>
<li><code>require(['hoge']..</code>と書くとapp/js/hoge.jsを読み込む</li>
<li><code>require</code>の後は、読み込んだjs内の関数や変数が使える。サンプルでは、<code>require['app']</code>として、app.js内のAppを<code>new App()</code>として呼び出している。</li>
<li>呼び出されるjs側では、1つのモジュールの単位毎にdefineで定義する模様。</li>
<li>defineの後の[]には、依存関係にあるモジュールを記載して使う。例えば<code>define(['lib/jquery'], function($){ ... })</code> のようにすると、jquery.jsに依存するモジュールが書ける。(define内部で$も使える。)</li>
<li>JSHintでエラーが出ないようにするには、JSHintの設定ファイルで、<code>"dojo" : true</code>とすればいい。(defineとrequireが許可される模様。)</li>
</ul>


<h3>Step4: テストの環境(Mocha, Chai)</h3>

<p><a href="http://visionmedia.github.io/mocha/">Mochaフレームワーク</a>を利用する環境の作成。</p>

<ul>
<li>Mochaは、先日のBuildInsiderの講演によると、TDDとかBDD(テストドリブン開発とビヘイビアドリブン開発)を実現するためのフレームワークらしい。</li>
<li>TDDとBDDで利用する関数が異なる。

<ul>
<li>TDDは、suite()、test()、setup()とteardown()</li>
<li>BDDは、describe()、it()、before()、beforeEach()とafterEach()</li>
</ul>
</li>
<li>setup.jsでTDD or BDD等を設定する。</li>
<li><p><code>require['app']</code>でapp.jsを読み込んで、<code>mocha.run();</code>としてテスト実行</p></li>
<li><p>(この作者は?)<a href="http://chaijs.com/api/assert/">chaiのassert</a>を使ってテストする。簡単のためっぽい。</p></li>
<li>server.jsのマウントポイントに/testを追加。(test/とapp両方を/testに。こうしないとrequire['app']が動かない。)</li>
</ul>


<h3>Step5: ビルド環境(grunt)</h3>

<ul>
<li><a href="http://grantjs.com">grant.js</a>は、JavaScriptのタスクランナー。

<ul>
<li>antとかMakefileのJavaScript版みたいなもの(?)</li>
</ul>
</li>
<li>JSHintのチェックとか、CoffeeScriptのコンパイルとかRequireJSの設定とかを自動化できる</li>
<li>grunt.jsが0.4系にバージョンアップしているので、サンプルを以下の通り修正

<ul>
<li>grunt.jsは、バージョンアップに伴いGrantfile.jsに変更(中身は同じ)</li>
<li>package.jsonに、<code>"grunt-cli": "latest", "grunt-init": "latest"</code>を追加</li>
<li>scriptsのgrunt部分を<code>"grunt" : "grunt"</code>に修正</li>
</ul>
</li>
<li>grunt.jsのコマンドラインインターフェイス(CLI)はgrunt-cliにある。<code>./node_modules/grunt-cli/bin/grunt</code>が本体。</li>
<li>全てのgrunt.jsのコードは、<code>module.exports = function(grunt) { };</code>内に書く必要がある。</li>
<li>loadNpmTasksでプラグインをロード、initConfigでロードしたプラグインの設定。</li>
<li>registerTaskは、プラグインを使わないような作業の設定(多分)。</li>
<li>defaultはgruntに引数を与えない場合に実行されるタスク。</li>
<li>サンプルの例で言えば、grunt とすると、execとcopy-requireが実行される。</li>
<li>grunt execとするとexec部分のみが実行される。</li>
</ul>


<p>※今後チュートリアルを進めていくのと並行して、出てきたライブラリ(RequireJS、mocha.js、grunt.jsなどなど)のサンプルを書いてみたい。</p>

<h3><a href="https://github.com/torub/backbone-tutorial/tree/7081a6f20be7e3a29a359dcc3904d40c09bfb11d">動作版のファイル - github</a></h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone.jsお試し]]></title>
    <link href="http://sat-pg.com/blog/2013/06/17/backbonejs1.html"/>
    <updated>2013-06-17T00:21:00+09:00</updated>
    <id>http://sat-pg.com/blog/2013/06/17/backbonejs1</id>
    <content type="html"><![CDATA[<p>Knockout.jsの次はBackbone.jsのテスト。</p>

<p><a href="http://dotinstall.com/lessons/basic_backbonejs">ドットインストールのBackbone.js入門</a>を試してみた結果を添付します。</p>

<!-- more -->


<h5>index.html</h5>

<p>```html</p>

<pre><code>&lt;style type="text/css"&gt;
    .completed {
        text-decoration: line-through;
        color: gray;
    }
&lt;/style&gt;
&lt;form id="addTask"&gt;
    &lt;input type="text" id="title"/&gt;
    &lt;input type="submit" value="add"/&gt;
    &lt;span id="error"&gt;&lt;/span&gt;
&lt;/form&gt;

&lt;div id="tasks"&gt;&lt;/div&gt;
&lt;p&gt;Tasks left: &lt;span id="count"&gt;&lt;/span&gt;&lt;/p&gt;

&lt;script type="text/template" id="task-template"&gt;
    &lt;input type="checkbox" class="toggle" &lt;%- completed ? 'checked' : '' %&gt; /&gt; 
    &lt;span class="&lt;%- completed? 'completed':''%&gt;"&gt; &lt;%- title %&gt; &lt;/span&gt;
    &lt;span class="delete"&gt;[x]&lt;/span&gt;
&lt;/script&gt;
&lt;script src="http://underscorejs.org/underscore-min.js"&gt;&lt;/script&gt;
&lt;script src="http://code.jquery.com/jquery-1.10.1.min.js"&gt;&lt;/script&gt;
&lt;script src="http://backbonejs.org/backbone-min.js"&gt;&lt;/script&gt;
&lt;script src="js/app.js"&gt;&lt;/script&gt;
</code></pre>

<p>```</p>

<h5>app.js</h5>

<p>```javascript
(function() {</p>

<pre><code>// Model
var Task = Backbone.Model.extend({
    defaults: {
        title: "do something",
        completed: false
    },
    validate: function(attrs) {
        if (_.isEmpty(attrs.title)) {
            return 'title must not be empty';
        }
    },
    initialize: function() {
        this.on('invalid', function(model, error) {
            $('#error').html(error);
        })
    }
});
var Tasks = Backbone.Collection.extend({ model: Task });

// View
var TaskView = Backbone.View.extend({
    tagName: 'li',
    initialize: function() {
        this.model.on('destroy', this.remove, this);
        this.model.on('change', this.render, this);
    },
    events: {
        'click .delete': 'destroy',
        'click .toggle': 'toggle'
    },
    destroy: function() {
        if(confirm(' are you ok ?')) {
            this.model.destroy();
        }
    },
    toggle: function() {
        this.model.set('completed', !this.model.get('completed'));
    },
    remove: function() {
        this.$el.remove();
    },
    template: _.template($('#task-template').html()),
    render: function() {
        var temp = this.template(this.model.toJSON());
        this.$el.html(temp);
        return this;
    }
});
var TasksView = Backbone.View.extend({
    tagName: 'ul',
    initialize: function() {
        this.collection.on('add', this.addNew, this);
        this.collection.on('change', this.updateCount, this);
        this.collection.on('destroy', this.updateCount, this);
    },
    addNew: function(task) {
        var taskView = new TaskView({model:task});
        this.$el.append(taskView.render().el);
        $('#title').val('').focus();
        this.updateCount();
    },
    updateCount: function() {
        var uncompletedTasks = this.collection.filter(function(task) {
            return !task.get('completed');
        });
        $('#count').html(uncompletedTasks.length);
    },
    render: function() {
        this.collection.each(function(task) {
            var taskView = new TaskView({model: task});
            this.$el.append(taskView.render().el);
        }, this);
        this.updateCount();
        return this;
    }
});

var AddTaskView = Backbone.View.extend({
    el: '#addTask',
    events: {
        'submit': 'submit'
    },
    submit: function(e) {
        e.preventDefault();
        var task = new Task();
        if (task.set({title: $('#title').val()}, {validate: true})) {
            this.collection.add(task);
            $('#error').empty();
        }
    }
});
var tasks = new Tasks([
        {title: 'task1', completed: true},
        {title: 'task2'},
        {title: 'task3'},
        {title: 'task4'}
    ]);
var tasksView = new TasksView({collection: tasks});
var addTaskView = new AddTaskView({collection: tasks});
$('#tasks').html(tasksView.render().el)
</code></pre>

<p>}());
```</p>

<h4>実行結果</h4>



<p><form id="addTask">
<input type="text" id="title"/>
<input type="submit" value="add"/>
<span id="error"></span>
</form></p>

<div id="tasks"></div>


<p>Tasks left: <span id="count"></span></p>




<script type="text/template" id="task-template">
    <input type="checkbox" class="toggle" <%- completed ? 'checked' : '' %> />
    <span <%- completed? 'style=text-decoration:line-through;color:gray;':''%>> <%- title %> </span>
    <span class="delete">[x]</span>
</script>


<script src="http://underscorejs.org/underscore-min.js"></script>


<script src="http://code.jquery.com/jquery-1.10.1.min.js"></script>


<script src="http://backbonejs.org/backbone-min.js"></script>


<script>
(function() {
    // Model
    var Task = Backbone.Model.extend({
        defaults: {
            title: "do something",
            completed: false
        },
        validate: function(attrs) {
            if (_.isEmpty(attrs.title)) {
                return 'title must not be empty';
            }
        },
        initialize: function() {
            this.on('invalid', function(model, error) {
                $('#error').html(error);
            })
        }
    });
    var Tasks = Backbone.Collection.extend({ model: Task });

    // View
    var TaskView = Backbone.View.extend({
        tagName: 'li',
        initialize: function() {
            this.model.on('destroy', this.remove, this);
            this.model.on('change', this.render, this);
        },
        events: {
            'click .delete': 'destroy',
            'click .toggle': 'toggle'
        },
        destroy: function() {
            if(confirm(' are you ok ?')) {
                this.model.destroy();
            }
        },
        toggle: function() {
            this.model.set('completed', !this.model.get('completed'));
        },
        remove: function() {
            this.$el.remove();
        },
        template: _.template($('#task-template').html()),
        render: function() {
            var temp = this.template(this.model.toJSON());
            this.$el.html(temp);
            return this;
        }
    });
    var TasksView = Backbone.View.extend({
        tagName: 'ul',
        initialize: function() {
            this.collection.on('add', this.addNew, this);
            this.collection.on('change', this.updateCount, this);
            this.collection.on('destroy', this.updateCount, this);
        },
        addNew: function(task) {
            var taskView = new TaskView({model:task});
            this.$el.append(taskView.render().el);
            $('#title').val('').focus();
            this.updateCount();
        },
        updateCount: function() {
            var uncompletedTasks = this.collection.filter(function(task) {
                return !task.get('completed');
            });
            $('#count').html(uncompletedTasks.length);
        },
        render: function() {
            this.collection.each(function(task) {
                var taskView = new TaskView({model: task});
                this.$el.append(taskView.render().el);
            }, this);
            this.updateCount();
            return this;
        }
    });

    var AddTaskView = Backbone.View.extend({
        el: '#addTask',
        events: {
            'submit': 'submit'
        },
        submit: function(e) {
            e.preventDefault();
            var task = new Task();
            if (task.set({title: $('#title').val()}, {validate: true})) {
                this.collection.add(task);
                $('#error').empty();
            }
        }
    });
    var tasks = new Tasks([
            {title: 'task1', completed: true},
            {title: 'task2'},
            {title: 'task3'},
            {title: 'task4'}
        ]);
    var tasksView = new TasksView({collection: tasks});
    var addTaskView = new AddTaskView({collection: tasks});
    $('#tasks').html(tasksView.render().el)
}());
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Knockout.jsお試し(2)]]></title>
    <link href="http://sat-pg.com/blog/2013/06/10/knockoutjs2.html"/>
    <updated>2013-06-10T11:09:00+09:00</updated>
    <id>http://sat-pg.com/blog/2013/06/10/knockoutjs2</id>
    <content type="html"><![CDATA[<p>せっかく勉強会で概要を聞いてきたので、サンプルを動かすその2。 <a href="http://learn.knockoutjs.com/#/?tutorial=collections">公式ページのサンプルその2</a>の内容をちょっとだけ変更。</p>

<h4>サンプル2</h4>

<ol>
<li>複数の要素を監視対象にするにはobservableArrayを使う</li>
<li>observableArrayからのデータ削除にはremoveを使う</li>
<li>observableArrayへのデータ追加にはpushを使う</li>
<li>ここがobservableでなくても動くのがよくわからない??</li>
<li>繰り返したい項目はforeachを使う</li>
</ol>


<p>```javascript</p>

<script type='text/javascript' src='http://ajax.aspnetcdn.com/ajax/knockout/knockout-2.2.1.js'></script>


<script>
window.addEventListener('DOMContentLoaded', function(){
    function Checkout(name, menu, num) {
        var self = this;
        self.name = name;
        self.menu = ko.observable(menu);
        self.num = ko.observable(num);
        self.check = ko.computed(function() {
            return self.menu().price * self.num();
        });
    }

    function CashierViewModel() {
        var self = this;
        self.menuList = [
            { menuName:'Aランチ', price:1000 },
            { menuName:'Bランチ', price:1500 },
            { menuName:'スペシャルランチ', price:3000 }
        ];
        self.checkoutList = ko.observableArray([    // 1
            new Checkout('鈴木', self.menuList[0], 1),
            new Checkout('鈴木', self.menuList[1], 2),
        ]);
        self.removeData = function(data) { self.checkoutList.remove(data); }    // 2
        self.addData = function() {
            self.checkoutList.push(new Checkout('佐藤', self.newmenu, self.newnum));  //3
        }
        self.total = ko.computed(function() {
            var t = 0;
            for(var i = 0; i < self.checkoutList().length; i ++) {
                t += self.checkoutList()[i].check();
            }
            return t;
        });

        self.newmenu = self.menuList[0];    //4
        self.newnum = 1;    //4
    }

    ko.applyBindings(new CashierViewModel());
});
</script>


<p><code>
</code>html
<strong>配列表示のテスト(レストランの会計)</strong></p>

<p>売り上げ合計：<span data-bind="text: total()"></span>円</p>


<table>
    <thead><tr>
        <th>レジ担当者</th><th>メニュー</th><th>数量</th><th>価格</th><th></th>
    </tr></thead>
    <tbody data-bind="foreach: checkoutList"> <!-- 5 -->
        <tr>
            <td data-bind="text: name"></td>
            <td><select data-bind="options: $root.menuList, value: menu, optionsText: 'menuName'"></select></td>
            <td><input type="text" data-bind="value: num" /></td>
            <td data-bind="text: check"></td>
            <td><a href="#" data-bind="click: $root.removeData">Remove</a></td>
        </tr>
    </tbody>
</table>


<p>データ追加</p>


<p>メニュー：<select data-bind="options: $root.menuList, value: newmenu, optionsText: 'menuName'"></select>
数量：<input type="text" data-bind="value: newnum" />
<button data-bind="click: addData">追加</button></p>


<p>```</p>

<p>実行結果は↓</p>

<!-- more -->


<h4>サンプル2実行結果</h4>

<script type='text/javascript' src='http://ajax.aspnetcdn.com/ajax/knockout/knockout-2.2.1.js'></script>


<script>
window.addEventListener('DOMContentLoaded', function(){
    function Checkout(name, menu, num) {
        var self = this;
        self.name = name;
        self.menu = ko.observable(menu);    // 1
        self.num = ko.observable(num);
        self.check = ko.computed(function() {
            return self.menu().price * self.num();
        });
    }

    function CashierViewModel() {
        var self = this;
        self.menuList = [
            { menuName:'Aランチ', price:1000 },
            { menuName:'Bランチ', price:1500 },
            { menuName:'スペシャルランチ', price:3000 }
        ];
        self.newmenu = self.menuList[0];
        self.newnum = 1;
        self.checkoutList = ko.observableArray([
            new Checkout('鈴木', self.menuList[0], 1),
            new Checkout('鈴木', self.menuList[1], 2),
        ]);
        self.removeData = function(data) { self.checkoutList.remove(data); }
        self.addData = function() {
            self.checkoutList.push(new Checkout('佐藤', self.newmenu, self.newnum));
        }

        self.total = ko.computed(function() {
            var t = 0;
            for(var i = 0; i < self.checkoutList().length; i ++) {
                t += self.checkoutList()[i].check();
            }
            return t;
        });
    }

    ko.applyBindings(new CashierViewModel());
});
</script>


<p><strong>配列表示のテスト(レストランの会計)</strong></p>

<p>売り上げ合計：<span data-bind="text: total()"></span>円</p>


<table>
    <thead><tr>
        <th>レジ担当者</th><th>メニュー</th><th>数量</th><th>価格</th><th></th>
    </tr></thead>
    <tbody data-bind="foreach: checkoutList"> <!-- -->
        <tr>
            <td data-bind="text: name"></td>
            <td><select data-bind="options: $root.menuList, value: menu, optionsText: 'menuName'"></select></td>
            <td><input type="text" data-bind="value: num" /></td>
            <td data-bind="text: check"></td>
            <td><a href="#" data-bind="click: $root.removeData">Remove</a></td>
        </tr>
    </tbody>
</table>


<p>データ追加</p>


<p>メニュー：<select data-bind="options: $root.menuList, value: newmenu, optionsText: 'menuName'"></select>
数量：<input type="text" data-bind="value: newnum" />
<button data-bind="click: addData">追加</button></p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Knockout.jsお試し(1)]]></title>
    <link href="http://sat-pg.com/blog/2013/06/10/knockoutjs1.html"/>
    <updated>2013-06-10T01:37:00+09:00</updated>
    <id>http://sat-pg.com/blog/2013/06/10/knockoutjs1</id>
    <content type="html"><![CDATA[<p>せっかく勉強会で概要を聞いてきたので、サンプルを動かしてみる。
<a href="http://learn.knockoutjs.com/#/?tutorial=intro">公式ページのサンプル</a>の内容をちょっとだけ変更。</p>

<h4>サンプル1</h4>

<ol>
<li>変数をko.observable()で囲うことで、監視対象にできる。</li>
<li>computedを使うことで、複数のobservableな変数を組み合わせた値を作れる。observableな変数が変更されると、computedな値も変更される。</li>
<li>applyBindingでViewModelを登録</li>
<li>data-bindを利用してDOMとViewModelの変数を関連付け</li>
<li>clickイベントと関数の紐付け。サンプルはクリックで大文字小文字を変更。</li>
</ol>


<p>```javascript</p>

<script type='text/javascript' src='http://ajax.aspnetcdn.com/ajax/knockout/knockout-2.2.1.js'></script>


<script>
window.addEventListener('DOMContentLoaded', function(){
    var flag = true;
    function AppViewModel() {
        this.firstName = ko.observable("hello");    // 1
        this.lastName = ko.observable("world!");
        this.fullName = ko.computed(function() {    // 2
            return this.firstName() + " " + this.lastName();
        }, this);

        this.toggleLastName = function() {
            var current = this.lastName();
            if (flag) {
                this.lastName(current.toUpperCase());
            } else {
                this.lastName(current.toLowerCase());
            }
            flag = !flag;
        };
    }
    // Activates knockout.js
    ko.applyBindings(new AppViewModel());   // 3
});
</script>


<p><code>
</code>html</p>

<p>First name: <input data-bind="value: firstName" /></p>


<p>   <!-- 4 --></p>

<p>Last name: <input data-bind="value: lastName" /></p>


<p>FULL NAME: <strong data-bind="text: fullName"></strong></P>


<p><button data-bind="click: toggleLastName">toggle!</button>  <!-- 5 -->
```</p>

<p>実行結果は↓</p>

<!-- more -->


<h4>サンプル1実行結果</h4>

<p>toggleボタンを押すと、Last nameのみでなく、FULL NAMEも同時に変わる。jQueryでやるより楽かも。</p>

<script type='text/javascript' src='http://ajax.aspnetcdn.com/ajax/knockout/knockout-2.2.1.js'></script>


<script>
window.addEventListener('DOMContentLoaded', function(){
    var flag = true;
    function AppViewModel() {
        this.firstName = ko.observable("hello");
        this.lastName = ko.observable("world!");
        this.fullName = ko.computed(function() {
            return this.firstName() + " " + this.lastName();
        }, this);

        this.toggleLastName = function() {
            var current = this.lastName();
            if (flag) {
                this.lastName(current.toUpperCase());
            } else {
                this.lastName(current.toLowerCase());
            }
            flag = !flag;
        };
    }
    // Activates knockout.js
    ko.applyBindings(new AppViewModel());
});
</script>




<p>First name: <input data-bind="value: firstName" /></p>


<p>Last name: <input data-bind="value: lastName" /></p>


<p>FULL NAME: <strong data-bind="text: fullName"></strong></P>


<p><button data-bind="click: toggleLastName">toggle!</button></p>

<hr />
]]></content>
  </entry>
  
</feed>
