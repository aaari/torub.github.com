<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | Saturday Programmer]]></title>
  <link href="http://sat-pg.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://sat-pg.com/"/>
  <updated>2013-06-26T02:08:00+09:00</updated>
  <id>http://sat-pg.com/</id>
  <author>
    <name><![CDATA[torub]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Backbone.jsのtutorial(1)]]></title>
    <link href="http://sat-pg.com/blog/2013/06/18/backbone-tutorial-1.html"/>
    <updated>2013-06-18T02:57:00+09:00</updated>
    <id>http://sat-pg.com/blog/2013/06/18/backbone-tutorial-1</id>
    <content type="html"><![CDATA[<p>ひきつづきBackbone.jsの勉強。</p>

<p><a href="http://dailyjs.com/2012/11/29/backbone-tutorial-1/">DailyJSのBackboneチュートリアルPart1</a>見てみたけど、
不明点だらけのため、調べたことをメモ。</p>

<h3>Step1: package.json</h3>

<ul>
<li>node.jsによるパッケージ管理ツール(npm)で、パッケージのバージョン管理をするためのもの。</li>
<li>package.jsonを記載して、<code>npm install</code>とすることで必要なモジュールがインストールされる。</li>
<li><code>./node_modules</code>以下にファイルがコピーされるため、git使う場合は.gitignoreに記載したほうがいい。</li>
<li>gruntのバージョンが変わっているためサンプルを一部修正。(gruntは、gruntの他にgrunt-cliとgrunt-initの3つに分かれたとのこと。<a href="https://github.com/gruntjs/grunt/wiki/Upgrading-from-0.3-to-0.4">gruntのmigration guide</a>)</li>
</ul>


<h3>Step2: server.js</h3>

<ul>
<li><a href="http://www.senchalabs.org/connect/">Connect</a>はNode.jsのミドルウェアフレームワークで、複数のミドルウェアが扱える。</li>
<li>Connectのstaticは、静的なファイルを返すサーバを作れるみたい。</li>
<li>Connect#useで、マウントポイントやルーティングの設定等ができるので、サンプルでは、<code>app</code>をルートディレクトリとし、<code>node_modules</code>はそのまま、<code>/js/lib/</code>は、<code>node_modules/requirejs/</code>にマウントをしている。</li>
<li>例) <code>http://localhost:8000/js/lib/require.js</code>と<code>http://localhost:8000/node_modules/requirejs/require.js</code>は同じファイルで、両方ともブラウザからアクセスできる。</li>
</ul>


<h3>Step3: RequrireJS</h3>

<p><a href="http://requirejs.org/">RequreJSの公式</a>から引用。</p>

<pre><code>RequireJS is a JavaScript file and module loader. It is optimized for in-browser use, 
but it can be used in other JavaScript environments, like Rhino and Node. 
Using a modular script loader like RequireJS will improve the speed and quality of your code.
</code></pre>

<ul>
<li>JavaScriptのファイル・モジュールの読み込み用ライブラリで、必要になったとき読み込む等で、スピードと品質を改善する。</li>
<li>RequireJSの設定はmain.jsに書くのが普通らしい。(このサンプルでもapp/js/main.jsに<code>requirejs.config..</code>を記載)</li>
<li><code>require(['hoge']..</code>と書くとapp/js/hoge.jsを読み込む</li>
<li><code>require</code>の後は、読み込んだjs内の関数や変数が使える。サンプルでは、<code>require['app']</code>として、app.js内のAppを<code>new App()</code>として呼び出している。</li>
<li>呼び出されるjs側では、1つのモジュールの単位毎にdefineで定義する模様。</li>
<li>defineの後の[]には、依存関係にあるモジュールを記載して使う。例えば<code>define(['lib/jquery'], function($){ ... })</code> のようにすると、jquery.jsに依存するモジュールが書ける。(define内部で$も使える。)</li>
<li>JSHintでエラーが出ないようにするには、JSHintの設定ファイルで、<code>"dojo" : true</code>とすればいい。(defineとrequireが許可される模様。)</li>
</ul>


<h3>Step4: テストの環境(Mocha, Chai)</h3>

<p><a href="http://visionmedia.github.io/mocha/">Mochaフレームワーク</a>を利用する環境の作成。</p>

<ul>
<li>Mochaは、先日のBuildInsiderの講演によると、TDDとかBDD(テストドリブン開発とビヘイビアドリブン開発)を実現するためのフレームワークらしい。</li>
<li>TDDとBDDで利用する関数が異なる。

<ul>
<li>TDDは、suite()、test()、setup()とteardown()</li>
<li>BDDは、describe()、it()、before()、beforeEach()とafterEach()</li>
</ul>
</li>
<li>setup.jsでTDD or BDD等を設定する。</li>
<li><p><code>require['app']</code>でapp.jsを読み込んで、<code>mocha.run();</code>としてテスト実行</p></li>
<li><p>(この作者は?)<a href="http://chaijs.com/api/assert/">chaiのassert</a>を使ってテストする。簡単のためっぽい。</p></li>
<li>server.jsのマウントポイントに/testを追加。(test/とapp両方を/testに。こうしないとrequire['app']が動かない。)</li>
</ul>


<h3>Step5: ビルド環境(grunt)</h3>

<ul>
<li><a href="http://grantjs.com">grant.js</a>は、JavaScriptのタスクランナー。

<ul>
<li>antとかMakefileのJavaScript版みたいなもの(?)</li>
</ul>
</li>
<li>JSHintのチェックとか、CoffeeScriptのコンパイルとかRequireJSの設定とかを自動化できる</li>
<li>grunt.jsが0.4系にバージョンアップしているので、サンプルを以下の通り修正

<ul>
<li>grunt.jsは、バージョンアップに伴いGrantfile.jsに変更(中身は同じ)</li>
<li>package.jsonに、<code>"grunt-cli": "latest", "grunt-init": "latest"</code>を追加</li>
<li>scriptsのgrunt部分を<code>"grunt" : "grunt"</code>に修正</li>
</ul>
</li>
<li>grunt.jsのコマンドラインインターフェイス(CLI)はgrunt-cliにある。<code>./node_modules/grunt-cli/bin/grunt</code>が本体。</li>
<li>全てのgrunt.jsのコードは、<code>module.exports = function(grunt) { };</code>内に書く必要がある。</li>
<li>loadNpmTasksでプラグインをロード、initConfigでロードしたプラグインの設定。</li>
<li>registerTaskは、プラグインを使わないような作業の設定(多分)。</li>
<li>defaultはgruntに引数を与えない場合に実行されるタスク。</li>
<li>サンプルの例で言えば、grunt とすると、execとcopy-requireが実行される。</li>
<li>grunt execとするとexec部分のみが実行される。</li>
</ul>


<p>※今後チュートリアルを進めていくのと並行して、出てきたライブラリ(RequireJS、mocha.js、grunt.jsなどなど)のサンプルを書いてみたい。</p>

<h3><a href="https://github.com/torub/backbone-tutorial/tree/7081a6f20be7e3a29a359dcc3904d40c09bfb11d">動作版のファイル - github</a></h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone.jsお試し]]></title>
    <link href="http://sat-pg.com/blog/2013/06/17/backbonejs1.html"/>
    <updated>2013-06-17T00:21:00+09:00</updated>
    <id>http://sat-pg.com/blog/2013/06/17/backbonejs1</id>
    <content type="html"><![CDATA[<p>Knockout.jsの次はBackbone.jsのテスト。</p>

<p><a href="http://dotinstall.com/lessons/basic_backbonejs">ドットインストールのBackbone.js入門</a>を試してみた結果を添付します。</p>

<!-- more -->


<h5>index.html</h5>

<p>```html</p>

<pre><code>&lt;style type="text/css"&gt;
    .completed {
        text-decoration: line-through;
        color: gray;
    }
&lt;/style&gt;
&lt;form id="addTask"&gt;
    &lt;input type="text" id="title"/&gt;
    &lt;input type="submit" value="add"/&gt;
    &lt;span id="error"&gt;&lt;/span&gt;
&lt;/form&gt;

&lt;div id="tasks"&gt;&lt;/div&gt;
&lt;p&gt;Tasks left: &lt;span id="count"&gt;&lt;/span&gt;&lt;/p&gt;

&lt;script type="text/template" id="task-template"&gt;
    &lt;input type="checkbox" class="toggle" &lt;%- completed ? 'checked' : '' %&gt; /&gt; 
    &lt;span class="&lt;%- completed? 'completed':''%&gt;"&gt; &lt;%- title %&gt; &lt;/span&gt;
    &lt;span class="delete"&gt;[x]&lt;/span&gt;
&lt;/script&gt;
&lt;script src="http://underscorejs.org/underscore-min.js"&gt;&lt;/script&gt;
&lt;script src="http://code.jquery.com/jquery-1.10.1.min.js"&gt;&lt;/script&gt;
&lt;script src="http://backbonejs.org/backbone-min.js"&gt;&lt;/script&gt;
&lt;script src="js/app.js"&gt;&lt;/script&gt;
</code></pre>

<p>```</p>

<h5>app.js</h5>

<p>```javascript
(function() {</p>

<pre><code>// Model
var Task = Backbone.Model.extend({
    defaults: {
        title: "do something",
        completed: false
    },
    validate: function(attrs) {
        if (_.isEmpty(attrs.title)) {
            return 'title must not be empty';
        }
    },
    initialize: function() {
        this.on('invalid', function(model, error) {
            $('#error').html(error);
        })
    }
});
var Tasks = Backbone.Collection.extend({ model: Task });

// View
var TaskView = Backbone.View.extend({
    tagName: 'li',
    initialize: function() {
        this.model.on('destroy', this.remove, this);
        this.model.on('change', this.render, this);
    },
    events: {
        'click .delete': 'destroy',
        'click .toggle': 'toggle'
    },
    destroy: function() {
        if(confirm(' are you ok ?')) {
            this.model.destroy();
        }
    },
    toggle: function() {
        this.model.set('completed', !this.model.get('completed'));
    },
    remove: function() {
        this.$el.remove();
    },
    template: _.template($('#task-template').html()),
    render: function() {
        var temp = this.template(this.model.toJSON());
        this.$el.html(temp);
        return this;
    }
});
var TasksView = Backbone.View.extend({
    tagName: 'ul',
    initialize: function() {
        this.collection.on('add', this.addNew, this);
        this.collection.on('change', this.updateCount, this);
        this.collection.on('destroy', this.updateCount, this);
    },
    addNew: function(task) {
        var taskView = new TaskView({model:task});
        this.$el.append(taskView.render().el);
        $('#title').val('').focus();
        this.updateCount();
    },
    updateCount: function() {
        var uncompletedTasks = this.collection.filter(function(task) {
            return !task.get('completed');
        });
        $('#count').html(uncompletedTasks.length);
    },
    render: function() {
        this.collection.each(function(task) {
            var taskView = new TaskView({model: task});
            this.$el.append(taskView.render().el);
        }, this);
        this.updateCount();
        return this;
    }
});

var AddTaskView = Backbone.View.extend({
    el: '#addTask',
    events: {
        'submit': 'submit'
    },
    submit: function(e) {
        e.preventDefault();
        var task = new Task();
        if (task.set({title: $('#title').val()}, {validate: true})) {
            this.collection.add(task);
            $('#error').empty();
        }
    }
});
var tasks = new Tasks([
        {title: 'task1', completed: true},
        {title: 'task2'},
        {title: 'task3'},
        {title: 'task4'}
    ]);
var tasksView = new TasksView({collection: tasks});
var addTaskView = new AddTaskView({collection: tasks});
$('#tasks').html(tasksView.render().el)
</code></pre>

<p>}());
```</p>

<h4>実行結果</h4>



<p><form id="addTask">
<input type="text" id="title"/>
<input type="submit" value="add"/>
<span id="error"></span>
</form></p>

<div id="tasks"></div>


<p>Tasks left: <span id="count"></span></p>




<script type="text/template" id="task-template">
    <input type="checkbox" class="toggle" <%- completed ? 'checked' : '' %> />
    <span <%- completed? 'style=text-decoration:line-through;color:gray;':''%>> <%- title %> </span>
    <span class="delete">[x]</span>
</script>


<script src="http://underscorejs.org/underscore-min.js"></script>


<script src="http://code.jquery.com/jquery-1.10.1.min.js"></script>


<script src="http://backbonejs.org/backbone-min.js"></script>


<script>
(function() {
    // Model
    var Task = Backbone.Model.extend({
        defaults: {
            title: "do something",
            completed: false
        },
        validate: function(attrs) {
            if (_.isEmpty(attrs.title)) {
                return 'title must not be empty';
            }
        },
        initialize: function() {
            this.on('invalid', function(model, error) {
                $('#error').html(error);
            })
        }
    });
    var Tasks = Backbone.Collection.extend({ model: Task });

    // View
    var TaskView = Backbone.View.extend({
        tagName: 'li',
        initialize: function() {
            this.model.on('destroy', this.remove, this);
            this.model.on('change', this.render, this);
        },
        events: {
            'click .delete': 'destroy',
            'click .toggle': 'toggle'
        },
        destroy: function() {
            if(confirm(' are you ok ?')) {
                this.model.destroy();
            }
        },
        toggle: function() {
            this.model.set('completed', !this.model.get('completed'));
        },
        remove: function() {
            this.$el.remove();
        },
        template: _.template($('#task-template').html()),
        render: function() {
            var temp = this.template(this.model.toJSON());
            this.$el.html(temp);
            return this;
        }
    });
    var TasksView = Backbone.View.extend({
        tagName: 'ul',
        initialize: function() {
            this.collection.on('add', this.addNew, this);
            this.collection.on('change', this.updateCount, this);
            this.collection.on('destroy', this.updateCount, this);
        },
        addNew: function(task) {
            var taskView = new TaskView({model:task});
            this.$el.append(taskView.render().el);
            $('#title').val('').focus();
            this.updateCount();
        },
        updateCount: function() {
            var uncompletedTasks = this.collection.filter(function(task) {
                return !task.get('completed');
            });
            $('#count').html(uncompletedTasks.length);
        },
        render: function() {
            this.collection.each(function(task) {
                var taskView = new TaskView({model: task});
                this.$el.append(taskView.render().el);
            }, this);
            this.updateCount();
            return this;
        }
    });

    var AddTaskView = Backbone.View.extend({
        el: '#addTask',
        events: {
            'submit': 'submit'
        },
        submit: function(e) {
            e.preventDefault();
            var task = new Task();
            if (task.set({title: $('#title').val()}, {validate: true})) {
                this.collection.add(task);
                $('#error').empty();
            }
        }
    });
    var tasks = new Tasks([
            {title: 'task1', completed: true},
            {title: 'task2'},
            {title: 'task3'},
            {title: 'task4'}
        ]);
    var tasksView = new TasksView({collection: tasks});
    var addTaskView = new AddTaskView({collection: tasks});
    $('#tasks').html(tasksView.render().el)
}());
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Knockout.jsお試し(2)]]></title>
    <link href="http://sat-pg.com/blog/2013/06/10/knockoutjs2.html"/>
    <updated>2013-06-10T11:09:00+09:00</updated>
    <id>http://sat-pg.com/blog/2013/06/10/knockoutjs2</id>
    <content type="html"><![CDATA[<p>せっかく勉強会で概要を聞いてきたので、サンプルを動かすその2。 <a href="http://learn.knockoutjs.com/#/?tutorial=collections">公式ページのサンプルその2</a>の内容をちょっとだけ変更。</p>

<h4>サンプル2</h4>

<ol>
<li>複数の要素を監視対象にするにはobservableArrayを使う</li>
<li>observableArrayからのデータ削除にはremoveを使う</li>
<li>observableArrayへのデータ追加にはpushを使う</li>
<li>ここがobservableでなくても動くのがよくわからない??</li>
<li>繰り返したい項目はforeachを使う</li>
</ol>


<p>```javascript</p>

<script type='text/javascript' src='http://ajax.aspnetcdn.com/ajax/knockout/knockout-2.2.1.js'></script>


<script>
window.addEventListener('DOMContentLoaded', function(){
    function Checkout(name, menu, num) {
        var self = this;
        self.name = name;
        self.menu = ko.observable(menu);
        self.num = ko.observable(num);
        self.check = ko.computed(function() {
            return self.menu().price * self.num();
        });
    }

    function CashierViewModel() {
        var self = this;
        self.menuList = [
            { menuName:'Aランチ', price:1000 },
            { menuName:'Bランチ', price:1500 },
            { menuName:'スペシャルランチ', price:3000 }
        ];
        self.checkoutList = ko.observableArray([    // 1
            new Checkout('鈴木', self.menuList[0], 1),
            new Checkout('鈴木', self.menuList[1], 2),
        ]);
        self.removeData = function(data) { self.checkoutList.remove(data); }    // 2
        self.addData = function() {
            self.checkoutList.push(new Checkout('佐藤', self.newmenu, self.newnum));  //3
        }
        self.total = ko.computed(function() {
            var t = 0;
            for(var i = 0; i < self.checkoutList().length; i ++) {
                t += self.checkoutList()[i].check();
            }
            return t;
        });

        self.newmenu = self.menuList[0];    //4
        self.newnum = 1;    //4
    }

    ko.applyBindings(new CashierViewModel());
});
</script>


<p><code>
</code>html
<strong>配列表示のテスト(レストランの会計)</strong></p>

<p>売り上げ合計：<span data-bind="text: total()"></span>円</p>


<table>
    <thead><tr>
        <th>レジ担当者</th><th>メニュー</th><th>数量</th><th>価格</th><th></th>
    </tr></thead>
    <tbody data-bind="foreach: checkoutList"> <!-- 5 -->
        <tr>
            <td data-bind="text: name"></td>
            <td><select data-bind="options: $root.menuList, value: menu, optionsText: 'menuName'"></select></td>
            <td><input type="text" data-bind="value: num" /></td>
            <td data-bind="text: check"></td>
            <td><a href="#" data-bind="click: $root.removeData">Remove</a></td>
        </tr>
    </tbody>
</table>


<p>データ追加</p>


<p>メニュー：<select data-bind="options: $root.menuList, value: newmenu, optionsText: 'menuName'"></select>
数量：<input type="text" data-bind="value: newnum" />
<button data-bind="click: addData">追加</button></p>


<p>```</p>

<p>実行結果は↓</p>

<!-- more -->


<h4>サンプル2実行結果</h4>

<script type='text/javascript' src='http://ajax.aspnetcdn.com/ajax/knockout/knockout-2.2.1.js'></script>


<script>
window.addEventListener('DOMContentLoaded', function(){
    function Checkout(name, menu, num) {
        var self = this;
        self.name = name;
        self.menu = ko.observable(menu);    // 1
        self.num = ko.observable(num);
        self.check = ko.computed(function() {
            return self.menu().price * self.num();
        });
    }

    function CashierViewModel() {
        var self = this;
        self.menuList = [
            { menuName:'Aランチ', price:1000 },
            { menuName:'Bランチ', price:1500 },
            { menuName:'スペシャルランチ', price:3000 }
        ];
        self.newmenu = self.menuList[0];
        self.newnum = 1;
        self.checkoutList = ko.observableArray([
            new Checkout('鈴木', self.menuList[0], 1),
            new Checkout('鈴木', self.menuList[1], 2),
        ]);
        self.removeData = function(data) { self.checkoutList.remove(data); }
        self.addData = function() {
            self.checkoutList.push(new Checkout('佐藤', self.newmenu, self.newnum));
        }

        self.total = ko.computed(function() {
            var t = 0;
            for(var i = 0; i < self.checkoutList().length; i ++) {
                t += self.checkoutList()[i].check();
            }
            return t;
        });
    }

    ko.applyBindings(new CashierViewModel());
});
</script>


<p><strong>配列表示のテスト(レストランの会計)</strong></p>

<p>売り上げ合計：<span data-bind="text: total()"></span>円</p>


<table>
    <thead><tr>
        <th>レジ担当者</th><th>メニュー</th><th>数量</th><th>価格</th><th></th>
    </tr></thead>
    <tbody data-bind="foreach: checkoutList"> <!-- -->
        <tr>
            <td data-bind="text: name"></td>
            <td><select data-bind="options: $root.menuList, value: menu, optionsText: 'menuName'"></select></td>
            <td><input type="text" data-bind="value: num" /></td>
            <td data-bind="text: check"></td>
            <td><a href="#" data-bind="click: $root.removeData">Remove</a></td>
        </tr>
    </tbody>
</table>


<p>データ追加</p>


<p>メニュー：<select data-bind="options: $root.menuList, value: newmenu, optionsText: 'menuName'"></select>
数量：<input type="text" data-bind="value: newnum" />
<button data-bind="click: addData">追加</button></p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Knockout.jsお試し(1)]]></title>
    <link href="http://sat-pg.com/blog/2013/06/10/knockoutjs1.html"/>
    <updated>2013-06-10T01:37:00+09:00</updated>
    <id>http://sat-pg.com/blog/2013/06/10/knockoutjs1</id>
    <content type="html"><![CDATA[<p>せっかく勉強会で概要を聞いてきたので、サンプルを動かしてみる。
<a href="http://learn.knockoutjs.com/#/?tutorial=intro">公式ページのサンプル</a>の内容をちょっとだけ変更。</p>

<h4>サンプル1</h4>

<ol>
<li>変数をko.observable()で囲うことで、監視対象にできる。</li>
<li>computedを使うことで、複数のobservableな変数を組み合わせた値を作れる。observableな変数が変更されると、computedな値も変更される。</li>
<li>applyBindingでViewModelを登録</li>
<li>data-bindを利用してDOMとViewModelの変数を関連付け</li>
<li>clickイベントと関数の紐付け。サンプルはクリックで大文字小文字を変更。</li>
</ol>


<p>```javascript</p>

<script type='text/javascript' src='http://ajax.aspnetcdn.com/ajax/knockout/knockout-2.2.1.js'></script>


<script>
window.addEventListener('DOMContentLoaded', function(){
    var flag = true;
    function AppViewModel() {
        this.firstName = ko.observable("hello");    // 1
        this.lastName = ko.observable("world!");
        this.fullName = ko.computed(function() {    // 2
            return this.firstName() + " " + this.lastName();
        }, this);

        this.toggleLastName = function() {
            var current = this.lastName();
            if (flag) {
                this.lastName(current.toUpperCase());
            } else {
                this.lastName(current.toLowerCase());
            }
            flag = !flag;
        };
    }
    // Activates knockout.js
    ko.applyBindings(new AppViewModel());   // 3
});
</script>


<p><code>
</code>html</p>

<p>First name: <input data-bind="value: firstName" /></p>


<p>   <!-- 4 --></p>

<p>Last name: <input data-bind="value: lastName" /></p>


<p>FULL NAME: <strong data-bind="text: fullName"></strong></P>


<p><button data-bind="click: toggleLastName">toggle!</button>  <!-- 5 -->
```</p>

<p>実行結果は↓</p>

<!-- more -->


<h4>サンプル1実行結果</h4>

<p>toggleボタンを押すと、Last nameのみでなく、FULL NAMEも同時に変わる。jQueryでやるより楽かも。</p>

<script type='text/javascript' src='http://ajax.aspnetcdn.com/ajax/knockout/knockout-2.2.1.js'></script>


<script>
window.addEventListener('DOMContentLoaded', function(){
    var flag = true;
    function AppViewModel() {
        this.firstName = ko.observable("hello");
        this.lastName = ko.observable("world!");
        this.fullName = ko.computed(function() {
            return this.firstName() + " " + this.lastName();
        }, this);

        this.toggleLastName = function() {
            var current = this.lastName();
            if (flag) {
                this.lastName(current.toUpperCase());
            } else {
                this.lastName(current.toLowerCase());
            }
            flag = !flag;
        };
    }
    // Activates knockout.js
    ko.applyBindings(new AppViewModel());
});
</script>




<p>First name: <input data-bind="value: firstName" /></p>


<p>Last name: <input data-bind="value: lastName" /></p>


<p>FULL NAME: <strong data-bind="text: fullName"></strong></P>


<p><button data-bind="click: toggleLastName">toggle!</button></p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第1回 Build Insider OFFLINEメモ]]></title>
    <link href="http://sat-pg.com/blog/2013/06/08/buildinsider.html"/>
    <updated>2013-06-08T23:45:00+09:00</updated>
    <id>http://sat-pg.com/blog/2013/06/08/buildinsider</id>
    <content type="html"><![CDATA[<p><a href="http://www.buildinsider.net/event/offline/01">第1回 Build Insider OFFLINE</a>に行ってきたので、聞いてきた話をメモ。</p>

<!-- more -->


<h2>Keynote</h2>

<p>キーノートには遅れていったので気になった言葉のみ：<a href="http://www.microsoft.com/japan/web/webmatrix/">WebMatrix</a>、<a href="http://research.microsoft.com/en-us/projects/illumiroom/">illumiroom</a>、<a href="http://re.buildinsider.net/about/biwanted.pdf">記事募集</a></p>

<hr />

<h2>JavaScript ライブラリーを使い倒そう</h2>

<p>WINGSプロジェクト 安西 剛さんの講演。</p>

<p>かつてはエンタープライズでは邪魔者扱いのJavaScriptだったが、GoogleMapでのAjax利用から、みんなが使い始め、
最近になってJavaScript天国な状況になってきた。その分、複雑化している状況。</p>

<p>今後ますますライブラリが重要ということで、6つの観点で紹介。</p>

<h4>1. 手間を省こう系</h4>

<ul>
<li><p>jQuery, prottotype.js：prototype.jsは既存オブジェクトを拡張している。jQueryはしていない。(この差が今の普及の差に繋がっている?)</p></li>
<li><p>UI系: 無数にありすぎる。利用によりできるだけコードを書かずにリッチなUIを実現する系。</p>

<ul>
<li>Chosen (セレクトボックス)</li>
<li>竹取JS (縦書き)</li>
<li>jQuery UI</li>
</ul>
</li>
<li>UIフレームワーク

<ul>
<li>Twitter Bootstrap: どちらかというとCSSフレームワーク?</li>
</ul>
</li>
</ul>


<p>これらのライブラリを使うと、ページの初期表示速度が遅くなるため、CSSスプライト等を利用して読み込むファイルを少なくしたり、JSの処理を一番下に記載して、ページ読み込み時の処理を最小限にすることが重要。</p>

<h4>2. 言語特性補う系</h4>

<ul>
<li>CoffeeScript：言語特性からくる問題を回避。スコープ、クロージャなど。</li>
<li>TypeScript</li>
</ul>


<h4>3. フレームワーク</h4>

<p>JavaScriptが大規模複雑化したことによる設計の困難さを回避。まだ乱立している状態。
ポイントはHTML/UIとの関係性をどのようにするかや、マウスやキーなどのイベントをどう拾うか。
github上ではbackbone.jsが人気の模様。(backbone/knockout/Angularは2つめの講演で詳細あり)</p>

<ul>
<li>MVCフレームワーク

<ul>
<li>backbone.js：後述</li>
</ul>
</li>
<li>MVVM

<ul>
<li>Knockout：後述</li>
</ul>
</li>
<li>CoffeeScript対応MVC

<ul>
<li>Batman.js</li>
<li>Spine.js：Ruby on Railsみたいな感じにコマンドベースで作れる</li>
</ul>
</li>
<li>ViewとModelのデータバインディング

<ul>
<li>Angular.js：後述</li>
<li>Ember.js：データバインディングに特徴あり。JSとHTMLを宣言部分で紐付け。テンプレートエンジンと組み合わせて表示。</li>
</ul>
</li>
</ul>


<h4>4. ゲーム系</h4>

<ul>
<li>enchant.js

<ul>
<li>教育に適しているのではないか。キャラクターをオブジェクトとして考えやすいため、オブジェクト思考の勉強にもよいかも。</li>
<li>イベントドリブンで、イベントは非同期処理</li>
</ul>
</li>
</ul>


<h4>5. サーバ系</h4>

<ul>
<li>Node.js

<ul>
<li>v8エンジンが入っていて速い</li>
<li>イベントルーブとノンブロッキングIOが特徴で、シングルスレッドが特徴。</li>
<li>イベントが起きてもどんどんキューに入れていって処理を行う形態。</li>
<li>同期的な処理は書きづらい。phpみたいなようなことは難しい。MySQL問い合わせなども非同期で書く必要がある。</li>
<li>Express.jsがデファクト。Webアプリケーションを作る最低限が準備されている。例外やセッションも作成可能。</li>
<li>app.js→ルーティング→ビュー(テンプレートエンジン)</li>
</ul>
</li>
</ul>


<h4>6. テスト系</h4>

<p>ウォーターフォールは、品質をあとで担保するモデル。皆、この考えがしみついている。
現在は、反応を見るため、早めに市場にリリースし、頻繁なバージョンアップが必要な時代になっており、
あとで担保するような考えかたは難しくなってきている。</p>

<p>そこで、自動テスト、テスト駆動開発、継続的インテグレーション、クロスブラウザ対応、、等々が必要で、
常にリリース可能な品質を保つよう、マインドを変えたほうがいい。品質はあとでなく、随時作りこんでいく必要がある。</p>

<p>ライブラリを利用してこれらに対応する。</p>

<ul>
<li>テスティングフレームワーク

<ul>
<li>Mocha
  BDD(振る舞い駆動開発)、TDD(テスト駆動)、、など色々できる。
  TDDはテストを書いてからメソッド実装
  BDDはユーザから見たふるまいから</li>
</ul>
</li>
<li>アサートモジュール</li>
<li>クロスブラウザ自動チェック

<ul>
<li>JSTestDriver</li>
<li>サーバプロセスを立ち上げ、各ブラウザでアクセス</li>
<li>テスト実行→各ブラウザで実行される</li>
</ul>
</li>
<li>モック、スタブ: sinon.js、レスポンスの偽装ができる</li>
<li>静的解析1 JSLint、JSHint</li>
<li>静的解析2 jscoverage: どこまで試験ができているか。</li>
</ul>


<hr />

<h2>3つのMVC系人気フレームワーク、Backbone.js／AngularJS／Knockout.js</h2>

<h4><a href="http://backbonejs.org/">Backbone.js</a></h4>

<p>LINE株式会社 開発１室 UITチーム　清水 大輔さんの講演。</p>

<ul>
<li>MV*アプリを作る手助けとなるJSライブラリ。軽量、シンプル。</li>
<li>オブジェクト思考、MVC知識が必要</li>
<li>動的要素が少ないページでは不要</li>
<li>必要なライブラリは、jQuery(Zepto, Enderでも可)、underscore.js(配列操作などのUtility)、json2.js(jsonパーサ)など。</li>
<li>構成要素は、Bacobone.Event、Model、Collection、View、Sync、Router</li>
<li>MVCの利点: DOMからビジネスロジックが分離できる、UTがやりやすい等</li>
<li>Grunt.jsというビルドツールが便利。jshint、jasminなどでのチェック、ミニファイ等を実施</li>
<li>パフォーマンス

<ul>
<li>DOM: reflow、repaintを減らす。delegate eventを利用する</li>
<li>メモリ管理: メモリリークがある。view#removeでの後処理を意識する</li>
<li>通信: localStrageをうまく利用する</li>
</ul>
</li>
</ul>


<h4><a href="http://angularjs.org/">AngularJS</a> 概説</h4>

<p>AngularJS Japan User Group 管理人の金井 健一さんの講演</p>

<ul>
<li>Google製のフルスタックMVCフレームワーク</li>
<li></li>
<li>得意：CRUD系のアプリケーション、管理ページ、マイページ等</li>
<li>苦手：モバイル向け(フルスタックのため容量が多め)、ゲーム系のグラフィックの扱い</li>
<li>開発環境：YEOMAN(YO, GRUNT, BOWER)

<ul>
<li>双方向データバインディング</li>
<li>テンプレートとしてのHTML：サーバからJSONもらって組み立て)</li>
<li>再利用可能なコンポーネント：WebComponentを見すえて、独自のタグ実装が可能。実装は結構複雑</li>
<li>ビューとルーティング</li>
<li>テストとその可用性：Karma(Angular用に開発されており相性がいい)</li>
</ul>
</li>
<li>モバイルについては、ng-mobileというモジュールが追加され機能が追加された。
ただし、その分容量が増加しているため、最初の一回が遅い(100kbほど)。2回目以降はキャッシュされる。</li>
<li>UIは、AngularUIなどのAngularが用意しているライブラリの他、プラグインもある。</li>
</ul>


<h4><a href="http://knockoutjs.com/">Knockout.js</a>の概要</h4>

<p>沢渡 真雪さんの講演</p>

<ul>
<li>JavascirptアプリケーションのためのMVVMパターン。MVVMとは、ModelとViewの間にある、Viewのための振る舞いや状態を持つModel(ViewModel)。</li>
<li><a href="https://www.google.co.jp/search?q=MVVM+ugaya40&amp;oq=MVVM+ugaya40&amp;aqs=chrome.0.57j0.307j0&amp;sourceid=chrome&amp;ie=UTF-8">MVVM ugaya40で検索</a>するとわかりやすいらしい</li>
<li>単一のライブラリ(knockout.js)で、Observableと、バインディング機構のみで成り立っており軽量、シンプル。</li>
<li>ASP.NET開発チームの方が個人で開発しているため、ASP.NET MVCとともに採用されていることも多い。</li>
<li>Windows Azureポータルや、アメーバピグのスマホ版で利用</li>
<li>Observable

<ul>
<li>値を監視可能な形にラップする仕組み。</li>
<li>ko.observable：var a = 1 は監視できないが、var v = ko.observable(1)とすると、v()で値取得(getter)、v(value)で値代入(setter)とすることができる。</li>
<li>subscribeメソッドで監視して、変更時にコールバックが可能。v.subscribe(function(newv) { ... }, this);</li>
<li>ko.observableArrayを使うことで、同様の監視を配列でも可能。push、popなどもあり。</li>
<li>ko.computed：observable同様の監視可能な形。observableの変更も取得可能。普通の変数の値を変えても特に変化なし。
```javascript
value1 = ko.observable(1);
value2 = ko.observable(2);
computed = ko.computed(function() {
return vaulue1() + value2();
});</li>
</ul>
</li>
</ul>


<p>computed();
->3
value2(10);
computed();
->11
computed.subscribe(function(newValue) {</p>

<pre><code>alert(newValue);
</code></pre>

<p>});
value1(10);
->アラートが出るはず
```</p>

<ul>
<li><p>バインディング：監視可能なオブジェクトを、HTMLのDOMにひもづける機能
<code>html
&lt;input type="text" data-bind="value: value1" /&gt;
&lt;input type="text" data-bind="value: value2" /&gt;
&lt;span data-bind="value: computed" /&gt;
</code></p></li>
<li><p>最後にJavaScript側でバインディグを適用する: applyBindings</p>

<ul>
<li>値を入力(value、text、html)、属性オンオフ(CSS、style)、イベント(click、event)などが可能</li>
</ul>
</li>
</ul>


<hr />

<h2>リアルタイム Web 最前線 ～ Socket.IO ＆ SignalR 徹底解説</h2>

<p>ソーシャルグリッド株式会社 取締役CTO 芝村 達郎さんの講演</p>

<ul>
<li>リアルタイム・ウェブ：クライアント・サーバ間での双方向通信が特徴</li>
<li>サーバ→クライアントへのプッシュ通信。WebSocket、Server-Sent Event等</li>
<li>クライアント→サーバはAJAXなどを利用して実現</li>
<li>最近はWebSocketやSignalRが一般的。複数の通信方式をラッピングしている。</li>
</ul>


<h4>Socket.IOとSignalR(比較まとめ)</h4>

<table>
<thead>
<tr>
<th></th>
<th>Socket.IO</th>
<th>SignalR</th>
</tr>
</thead>
<tbody>
<tr>
<td>基本</td>
<td>Node.js上で動作する。Node.jsなのでシングルスレッド。</td>
<td>ASP.NET上のライブラリ。マルチスレッド</td>
</tr>
<tr>
<td>対応トランスポート</td>
<td>WebSocket、Adobe Flash Socket、AJAX long polling、AJAX multipart streaming、Forever Iframe(ほぼIE専用)、JSONP Polling(クロスドメインで利用可能)</td>
<td>WebSocket、Server-Sent Event、Forever Frame、Long Polling</td>
</tr>
<tr>
<td>クライアント</td>
<td>JavaScriptのみでなく、Java、Objective-C、C/C++、PHP、.NET等々、多数</td>
<td>JavaScript(jQuery依存)、.NET Framework4, 4.5、Windows Storeアプリ、WinPhone8、Silverlight、Xamarin.iOS/Xamarin.Android</td>
</tr>
<tr>
<td>向いているOS</td>
<td>Mac/Linux系</td>
<td>Windows系</td>
</tr>
<tr>
<td>パフォーマンス</td>
<td>シングルスレッド + クラスタ化であげる</td>
<td>マルチスレッド</td>
</tr>
<tr>
<td>設計思想</td>
<td>イベントベース</td>
<td>リモートプロシジャーコール</td>
</tr>
</tbody>
</table>


<!--
* Socket.IO
    - Node.js上で動作する
    - 対応しているトランスポート：WebSocket、Adobe Flash Socket、AJAX long polling、AJAX multipart streaming、Forever Iframe(ほぼIE専用)、JSONP Polling(クロスドメインで利用可能)
    - Windowsでは、WebMatrixのNode.jsテンプレートを使うと簡単。IISで動く独自のNodeを準備している。
    - Macでは、好きなエディタでどうぞ。
    - クライアントは、JavaScriptのみでなく、Java、Objective-C、C/C++、PHP、.NET等々、多数用意されている。
* SingnalR
    - ASP.NET上のライブラリ。マルチスレッド、Taskベースの非同期処理。シングルスレッドのNode.jsとはマルチコア時に速度差が出る
    - 対応しているトランスポート：WebSocket、Server-Sent Event、Forever Frame、Long Polling
    - Windowsの.NETで動作。
    - クライアントは、JavaScript(jQuery依存)、.NET Framework4, 4.5、Windows Storeアプリ、WinPhone8、Silverlight、Xamarin.iOS/Xamarin.Android
* 比較
    - パフォーマンス
        - Socket.IO: シングルスレッド + クラスタ化
        - SignalR: マルチスレッド
    - 設計思想
        - Socket.IO: イベントベース
        - SignalR: リモートプロシジャーコール
* WinならSignalR、Mac、LinuxならSocket.IOでいいんじゃ。
-->


<h4>スケールアウト</h4>

<ul>
<li>コネクションが貼りっぱなしであり、リソースを消費するため、1台のサーバで処理できるクライアント数は決まる。</li>
<li>単純に台数増やすだけではスケールしない。クライアントがどのサーバに繋っているかは他のサーバからは確認できない。WebSocketを使うAPの制約。メッセージング用サーバを用意して中継してあげる必要がある。</li>
<li>共通：Pub/Subメッセージングを利用する(RedisやWindowsAzureサービスバス)。  ※(?このへんよくわからず)</li>
<li>Socket.IO：接続情報をメモリでなく、外部ストレージに保存</li>
<li>SignalR：接続情報は共有せず、メッセージングに投げる(unique idを使って投げるのみ)</li>
</ul>


<h4>その他</h4>

<ul>
<li>双方向通信は必須ではない。必要なときにサーバからプッシュできればいい。<a href="http://pusher.com/">PUSHER</a>(プッシュするだけのサービス)がなりたつのでサーバからのプッシュの需要はあるんではないか。</li>
<li><p>通信頻度を下げる。underscore.jsのthrottle/debounceを使うことで、指定された秒数に最大1回実行/呼び出し後、指定された秒数がたったら呼び出しされる。</p></li>
<li><p>リアルタイム性を活かすアプリはあまり浮かばない(チャットアプリはもう飽きた)</p></li>
<li>プッシュ+クライアント同時接続を活かしたアプリ(チャット以外)を作ればいい。</li>
<li>スケールアウトは難しい。SignalRはメモリリーク解消に長い時間悩まされた。</li>
<li>今後は複数人でのリアルタイムコラボアプリに期待</li>
<li>センサーと同期して入退室管理とかもいいかも</li>
</ul>

]]></content>
  </entry>
  
</feed>
