<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: android | Saturday Programmer]]></title>
  <link href="http://sat-pg.com/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://sat-pg.com/"/>
  <updated>2013-09-23T03:09:54+09:00</updated>
  <id>http://sat-pg.com/</id>
  <author>
    <name><![CDATA[torub]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[日本Androidの会 2013年6月定例会メモ]]></title>
    <link href="http://sat-pg.com/blog/2013/06/25/android-study201306.html"/>
    <updated>2013-06-25T18:59:00+09:00</updated>
    <id>http://sat-pg.com/blog/2013/06/25/android-study201306</id>
    <content type="html"><![CDATA[<p><a href="https://www.android-group.jp/event/event19.html">日本Androidの会 2013年6月定例会</a>
に行ってきたので、聞いてきた話をメモ。</p>

<p>会場は4月に移転したばっかりというデジタルハリウッドさんのところで、
凄く綺麗ないいところでした。</p>

<h2>オフラインで動くPackaged Web Appのクラウド利用</h2>

<p>丸山先生の講演。</p>

<p>接続されるクライアントの多さから、負荷、NW帯域が増大するなど、サーバサイドでは問題が起きているが、対比的にクライアント側は、8コアのAndroid端末が出るなど性能が向上しており、
余裕が生まれている。</p>

<p>今後は、Rich Client + Thin Server Architect(TSA)の考え方で、
P層をデバイス側に移し、サーバに負担をかけずにクライアント側に処理を移す、が想定される。
クライアント側は、Androidネイティブもあれば、Packaged Web Appもあるだろう。</p>

<p>TSAにより、サーバ開発者はビジネスロジックに集中でき、
クライアント開発者はP層に集中できる。</p>

<h4>Package web appの特徴</h4>

<ul>
<li>ブラウザの使うランタイムを利用する形をとり、WebViewは使わない。</li>
<li>Offline enabled by default</li>
<li>Cloud enabled by default。</li>
<li>デバイスのHW、OSリソースへのアクセスが可能な点は、Packagedならではの特徴。</li>
<li>アプリはマーケットから配布できる</li>
<li>Contents Security Policy(CSP)：セキュリティ面では制約がある。

<ul>
<li>Inline-JavaScriptの禁止：HTML内にJavaScriptを書いてはいけない。</li>
<li>eval禁止</li>
<li>上記より、webのソースそのままでは動かない</li>
</ul>
</li>
<li>Offline First

<ul>
<li>つながっていなくても動くのが魅力。</li>
<li>マルチデバイスで有効(シームレスな切り替えをしたい)</li>
<li>ローカルのストレージにデータを保存可能</li>
</ul>
</li>
<li>Offline-enabledのルール

<ul>
<li>可能ならばいつでもローカルなデータを使う。ローカルデータといってもクラウドとも同期できる仕組みが存在する。

<ul>
<li>Chrome Storage API：小規模な文字列データ。容量制限あり。LocalとSyncがある。Syncは自動的にWebと連携する。Cookieみたいな使い方か。Syncは便利。上限は102,400 byte</li>
<li>IndexDB: HTML5標準。Googleはメインに考えてない? クラウドとの同期が面倒だからか??</li>
<li>Chrome FileSystem API</li>
<li>Chrome SyncFileSystem API: ローカルに書くと、クラウド(google drive)と勝手に同期する。これは便利。</li>
</ul>
</li>
<li>UIをデータから分離する</li>
<li>MVCモデルを使う。クライアントのなかにMVCを持つ流れは、JavaScriptのフレームワーク等と同様。</li>
</ul>
</li>
<li>Google Cloud Messaging(GCM)でメッセージPush配信。

<ul>
<li>Packaged Web Appの目玉のひとつ。(もう1つはデータのsync)</li>
</ul>
</li>
<li>Network Communications

<ul>
<li>ソケットを自由に使うことができる。</li>
<li>httpを使わず、データをやりとりする。</li>
</ul>
</li>
<li>googleはクラウド同期を柱にしている。目玉ふたつをおさらいすると以下2つ。

<ul>
<li>ストレージ同期</li>
<li>GCM</li>
</ul>
</li>
</ul>


<h2>Google Glassが変える世界。</h2>

<p>株式会社GClueの佐々木さんの講演。</p>

<ul>
<li>Google Glassはそれだけで完結(Androidが動いている)。</li>
<li>1年前くらいのスマートフォン。Android4.0.4。</li>
<li><p>メガネの横にタッチパッドがついてる。バッテリは後ろ。
骨伝導用デバイスもあり。裏側には接触センサもあり。
写真もとれる。</p></li>
<li><p>Google GlassはHome Laucherを作り変えているのみで、通常のAndroid。Android Appも動く
専用APをGlasswareと呼んでいる。Glasswareで書くと、HomeLaucnherから起動ができる。</p></li>
<li><p>上30度を見るとONになる。
またはOK Glassとしゃべると音声認識で動きだす。</p></li>
</ul>


<h2>Google I/O報告 &amp; Android Studio</h2>

<p>進藤さんの講演。</p>

<h4>Google I/O</h4>

<ul>
<li>Androidは、9億アクティベート/年(去年は4億、その前は1億)</li>
<li>Googleは2つのPF(Android、Chrome)</li>
<li>Androidの新しいAPI

<ul>
<li>Location

<ul>
<li>Fused Location Provider: 基地局、Wifi、GPSから効率よく位置情報取得</li>
<li>Geofenceing API: 位置情報をエリア毎に識別。出入りを通知。1アプリにつき100箇所登録可能。バッテリーにやさしい。</li>
<li>Activity Recognition: ユーザの動きを識別。歩き or 車 or 停止中など。バッテリーにやさしい。</li>
</ul>
</li>
<li>Google+</li>
<li>GCM

<ul>
<li>毎秒20万、1日170億メッセージ。1件60msで処理。</li>
<li>3つの機能追加

<ul>
<li>persistent connections。多数のメッセージを多数のデバイスへ</li>
<li>Upstream。アプリからサーバ側へもプッシュできる</li>
<li>notification synchronization。タブレットとスマホの通知の同期。</li>
</ul>
</li>
</ul>
</li>
<li>Google Play game service

<ul>
<li>cloud save</li>
<li>Achievements</li>
<li>Leaderboard(ランキング)</li>
<li>multi play</li>
</ul>
</li>
</ul>
</li>
<li>Android以外のUpdate

<ul>
<li>Google Mapのアップデート。GoogleEarthとの統合。水中Map。</li>
<li>Chrome

<ul>
<li>7.5億ユーザ</li>
<li>JavaScript高速化</li>
<li>WebP(画像)、VP9(動画)</li>
<li>Web Component</li>
</ul>
</li>
</ul>
</li>
<li>その他

<ul>
<li><a href="https://github.com/adamrocker/volley">Volley</a>(<a href="http://www.adamrocker.com/blog/341/volley-easy-fast-networking-for-android.html">参考</a>)： HTTPを効率化、かつ簡単化するライブラリ。大規模データをマルチスレッドで取得するなど。</li>
</ul>
</li>
</ul>


<h4>Android Studio</h4>

<ul>
<li>次期IntelJの中に入ってくる。</li>
<li>まだPreview版でアップデートが多い。業務用は時期尚早か。</li>
<li>NDK(Native Development Kit)未対応。</li>
<li>当面はADKのリリースは続くはず。すぐには移行は不要かも。</li>
</ul>

]]></content>
  </entry>
  
</feed>
