<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Saturday Programmer]]></title>
  <link href="http://sat-pg.com/atom.xml" rel="self"/>
  <link href="http://sat-pg.com/"/>
  <updated>2013-09-23T13:20:34+09:00</updated>
  <id>http://sat-pg.com/</id>
  <author>
    <name><![CDATA[torub]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[第41回 HTML5とか勉強会]]></title>
    <link href="http://sat-pg.com/blog/2013/08/26/html5j.html"/>
    <updated>2013-08-26T19:54:00+09:00</updated>
    <id>http://sat-pg.com/blog/2013/08/26/html5j</id>
    <content type="html"><![CDATA[<h2>「Inside wri.pe」</h2>

<p>増井雄一郎さん（@masuidrive）（FrogApps）</p>

<ul>
<li><a href="https://wri.pe/app">wri.pe</a></li>
<li><p><a href="https://masuidrive.tadalist.com/lists/1941485/public">masuidriveの作りたい物&amp;試作品リスト</a></p></li>
<li><p>煩雑なメモをどうにかしたい!</p></li>
<li>認証はGithubとFacebook</li>
<li>サーバはRails 4.0.0RC + Ruby2.0</li>
<li>サーバは600行程度</li>
<li>JavaScriptはBackbone.js + HTML5 storage</li>
<li>自分で使うために。。

<ul>
<li>サーバの運用は自分でしない</li>
<li>バックアップも全自動</li>
</ul>
</li>
<li>英語とデザインをなんとかしたい

<ul>
<li>英語は友達にお願い</li>
<li>デザイン: dribbbleを参考にした</li>
<li>アイコンだけはデザイナにお任せした</li>
<li>Heroku使った</li>
</ul>
</li>
<li>事業の継続性が信用できない??

<ul>
<li>Dropboxにバックアップを自動で保存している</li>
</ul>
</li>
<li>品質は??

<ul>
<li>セレニウム?? カピバラ??でRuby on Railsの自動試験を行っている。</li>
<li>ブラウザ〜DBの中身まで続けて実行</li>
<li>試験環境はは2weeksかかっている。</li>
<li>Development * 10-15 = Production</li>
</ul>
</li>
</ul>


<h2>「Inside &#8220;お台場合衆国　リアルスコープブースサイネージ&#8221;」</h2>

<p>比留間 和也さん（@edo_m18）（カヤック）</p>

<h3>今回使った機能</h3>

<ul>
<li>Canvas WebGLメインで、video/audio、Camera、Canvas2D、etc多数。</li>
<li>課題: クオリティの担保。8時間連続稼動でリロード・再起動なし。そもそもブラウザで大丈夫か?</li>
<li>42inchの縦置きディスプレイ。クイズ3問出して解答してもらう。写真も撮ってもらう。</li>
<li><p>1回のプレイで動画8本+WebGL</p></li>
<li><p>普段どれだけ「技術的にはできるのに断念しているか」を知ることができた。</p>

<ul>
<li>WebGL</li>
<li>プラグインなし</li>
<li>カメラ撮影→XHRでサーバに</li>
<li>Full Canvas</li>
<li>タッチパネル</li>
</ul>
</li>
<li>Inka3D?? がMaya2014に対応。Mayaからエクスポートするだけでできる。</li>
<li><p>Inka3DでMayaの世界を完全再現。再生ができるツール。</p></li>
<li><p>苦労した点</p>

<ul>
<li>WebGLのcontext lostが多発</li>
<li>Three.jsでは実現できなかった</li>
<li>httpsではカメラアクセスが最初の1回のみ</li>
<li>画像を別サーバに保存できない</li>
</ul>
</li>
<li><p>動画再生で苦労した点</p>

<ul>
<li>長時間やっていると、再生が止まることがある

<ul>
<li>例外拾って強制的にload/playを実行して再起動する</li>
</ul>
</li>
<li>video/canvasには、CSS Shaderが効かない</li>
</ul>
</li>
<li><p>8時間</p>

<ul>
<li>メモリ管理を徹底</li>
<li>苦労した点: 耐久テスト朝起動→帰りまで再生しっぱなし</li>
<li>実機テスト。現場設置のために実機がオフィスを離れる</li>
</ul>
</li>
</ul>


<p>DEMO
http://goo.gl./iOt7na (?動かない)</p>

<h3>HTML5でサイネージは作れる</h3>

<h2>「Inside World Wide Maze」・・・@Saqoosha（Katamari Inc）</h2>

<ul>
<li>IS Parade</li>
<li>androp.jp/bell</li>
<li>World Wide Maze

<ul>
<li>WebGL(three.js)</li>
<li>Web Workers(ammo.js, Physijs): ボールの動きを物理演算するのに使っている</li>
<li>WebSocket(スマホの傾きデータをブラウザに)</li>
<li>DeviceOrientation</li>
</ul>
</li>
<li>苦労したポイント

<ul>
<li>全て。開発環境作りからも全て。6ヶ月かかった</li>
<li>スマホの傾き情報をPCに送るには??</li>
<li>DeviceOrientationイベントを使う。100〜200ms</li>
<li>α、β、γの傾きをもとに使う。実装が全て違う。</li>
</ul>
</li>
<li>WebSocket使った

<ul>
<li>スマホ→PC直接送れない</li>
<li>間にサーバをかませた。</li>
<li>node.js + Socket.io</li>
<li>さまざまなドラフトプロトコルがある。</li>
<li>たくさんのクライアント、どれとどれをつなげる??</li>
<li>番号によるペアリング

<ul>
<li>PCから。

<ul>
<li>PCからサーバに接続</li>
<li>ランダム生成の番号をPCに渡す。サーバは覚えておく</li>
<li>モバイルから番号を指定して、探す</li>
<li>あればペアリング</li>
</ul>
</li>
<li>saqoo.sh:13000</li>
<li>ソースコードもあり</li>
</ul>
</li>
</ul>
</li>
<li>レイテンシー

<ul>
<li>スマホから送信したデータがどれくらい時間かかるか

<ul>
<li>WebSocketのサーバはどこ?</li>
<li>開発側: 5ms</li>
<li>日本のサーバ: 30ms</li>
<li>USのサーバ: 200ms</li>
</ul>
</li>
<li>サーバを経由せずにスマホからPCに直接送る方法: WebRTCのDataChannelをつかう。

<ul>
<li>ペアリングするためのサーバはやはり必要</li>
</ul>
</li>
<li><p>HTML5 Rocksに記事を書いた</p></li>
<li><p>http://saqoo.sh:13000/</p></li>
</ul>
</li>
</ul>


<h2>「Inside マンガテレビ」・・・小松健作さん（@komasshu）（NTT Communications）</h2>

<p>http://goo.gl/O2YkkJ</p>

<p>WebSpeech API: Chromeのみ。認識はGoogleががんばる。
HeadTrackr.js: OperaのAudunさんが開発している顔検出ライブラリ
  - Face.jsより高速で動く。1回目の認識は遅い</p>

<ul>
<li>getUserMedia()でビデオ取得</li>
<li>CanvasPixelArray取得</li>
<li>フィルタ処理</li>
<li><p>httpsにしないと毎回アクセスOKかどうかを確認しにくるので、デバイス系はサイトをhttpsにすべき</p></li>
<li><p>How to Performance。</p></li>
<li>30万回のループ処理

<ul>
<li>60fps @ MBPで。</li>
<li>1回あたりの処理：10msec。</li>
<li>ループ1回あたり30nsec。</li>
<li>Chromeの、ツールで、Profile→レコードして中身見る</li>
<li>プロパティは呼ばないで変数使う。関数は呼ばないで直接計算する。</li>
<li>文字列の数値化は、parseInt(&#8216;1&#8217;) &lt; &#8216;1&#8217; | 0 でparseIntの法が速い</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使いたくなる UI をつくる！ フロントエンド 勉強会]]></title>
    <link href="http://sat-pg.com/blog/2013/08/24/web-ui.html"/>
    <updated>2013-08-24T09:40:00+09:00</updated>
    <id>http://sat-pg.com/blog/2013/08/24/web-ui</id>
    <content type="html"><![CDATA[<p>表記の勉強会に行ってきたのでメモ列挙。</p>

<h2>エンジニア向けデザインセンスアップはじめの一歩</h2>

<p>山本麻美さんのお話。</p>

<h4>デザイナーいない編</h4>

<p>デザイナーがいない場合でも、せめて見た目をなんとかしたい、という要望に対し、
3つの解答「色」「余白」「ボタン」を紹介。</p>

<ul>
<li>色

<ul>
<li>色はセンスではなく理論。</li>
<li>特に色温度に着目する。色温度がばらばらだとあかぬけない。</li>
<li>色温度の違う黄色と、青が混ざると気持ち悪い感じになる。色温度をまとめるべき。

<ul>
<li>例1) <a href="http://www.daikinaircon.com/eco/index2.html">ダイキンの森林再生PJ(黄色側)</a></li>
<li>例2) <a href="http://www.izuo-saiseikai.gr.jp/">大阪府済生会泉尾病院</a>青系に向けてまとめる。青は健康・清潔な色。</li>
</ul>
</li>
<li>例えば使いたい色に対して、青や黄色のフィルタをかけて色温度を合わせるやり方がある。</li>
<li>色々な色から色温度を図るというのは無い(?)ので、そこは感覚かも(?)しれない

<ul>
<li><a href="https://kuler.adobe.com/create/color-wheel/">こことか使えばいいかも</a></li>
</ul>
</li>
</ul>
</li>
<li>余白

<ul>
<li>余白はセンスではなく、数値の計算でできる。</li>
<li>余白がばらばらだったりすると残念。余白がないと窮屈。</li>
<li>余白をそろえたり、十分な余白を取ったりしよう。</li>
<li>利用規約なんかも文字が超大量だったりする場合、余白、行間、文字サイズに気を配る。見出し大きく。</li>
</ul>
</li>
<li>ボタン

<ul>
<li>PCサイトは、hoverでビカビカさせるより、ハイライト程度の色の変化の方がスマート。</li>
<li>スマホ向けはタッチすると見えなくなるため、大きく色を変化させたり光ったりさせて、タッチ操作が正しくできたことを伝えた方がいい。</li>
<li>PCとスマホで見た目を変えよう。</li>
</ul>
</li>
</ul>


<p>この3つがあれば、それなりによく見えるようになるハズ!</p>

<h4>デザイナーいる編</h4>

<p>役割分担とコミュニケーションが大事。</p>

<ul>
<li>デザインと実物が違うことがよくある。デザイナは1ピクセル単位できっちり計算している。</li>
<li>デザイナーはきっちり図って数値で示す。fireworksの物差しとかで自動で書いてくれる。MacのFreeFuler。WinはMedirとかも。</li>
<li>画像で渡す際のパーツの切り出し方も重要。

<ul>
<li>Android: 9patchで指定すればOK。複数端末で使うのに使える。</li>
<li>iOS: パーツに切り出すとき、重ねるだけでぴったり合うようにして渡す。</li>
</ul>
</li>
<li>デザイナから渡すものは以下

<ul>
<li>画像一覧</li>
<li>画面とパーツの画像名の一致する画面</li>
<li>位置、サイズの情報</li>
</ul>
</li>
<li><p>アプリの実装を理解するデザイナーがあまりいない。</p>

<ul>
<li>パーツ切り出し屋が欲しいと本気で思っている。</li>
</ul>
</li>
<li><p>作る順番重要</p>

<ul>
<li>ダミーテキストでビジュアル作る→ダメ。</li>
<li>まずコンテンツを考える。コンテンツを効果的に見せるデザインを作る。

<ul>
<li>ダミーテキストだと、文字が2行になったりして入らなくなる。。。</li>
</ul>
</li>
</ul>
</li>
<li><p>UIの検討とは??</p>

<ul>
<li>dribbbleやPttrnsなどのサンプルを参考に。。。それはUIの検討と言えるのか?</li>
<li>複数のデザインカンプをつくってユーザーテストしてみたり。。。UIの検討と言えるのか?

<ul>
<li>画像の好みのアンケートに過ぎず、UXを向上させるものではない。</li>
<li>使うものとして、htmlなどにして試してみるのがベスト。</li>
<li>せめて実際に端末に入れて、歩きながらとか、実際のシチュエーションで検討しないとダメ。</li>
<li>たとえば。。

<ul>
<li>実機で見ると色見も大きさも違う</li>
<li>ボタンとか文字の大きさ</li>
<li>動きを創造しながらみると余計なものとか。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>まとめ</h3>

<ul>
<li>ボタンはスマホとPCで違う。</li>
<li>デザイナーとエンジニアは役割分担とコミュニケーションが大事</li>
<li>ダミーテキストはダメ</li>
<li>UIの検討とは、グラフィックの美しさを追求することではない</li>
</ul>


<h3>質問</h3>

<ul>
<li>色温度ってどうやって合わせるの?

<ul>
<li>ピンクと緑使いたい。それぞれが青 or 黄色に傾いているのかを考える。</li>
<li>ターゲットによって色は決まってくる。</li>
<li>多色を使う場合でも、色温度が近いところをまとめてみるといい。</li>
</ul>
</li>
<li>色温度が近い色を多様すると、色弱者にはわからないのではないか?

<ul>
<li>デザイナは最終的にモノトーンに変換して識別できるかを確認する。</li>
</ul>
</li>
<li>余白はどう考えていますか?

<ul>
<li>iOSの場合は、2で割れる数字を使う。</li>
<li>Androidの場合は画面がまちまちなので、3の倍数、4の倍数などを使う。</li>
</ul>
</li>
</ul>


<h2>UXとUXのためのデザインのはなし</h2>

<ul>
<li><a href="http://www.slideshare.net/chachaki/uxux-20130824-ui">資料</a></li>
</ul>


<h4>UXのはなし</h4>

<p>ISO09241-210で定義されている。</p>

<ul>
<li>UXとはヒトの内面の話</li>
<li>UX「のための」デザイン(Design for UX)</li>
<li>利用状況の把握が大事</li>
<li><a href="https://sites.google.com/site/hcdvalue/docs">UX白書</a>っていうのがある。</li>
<li>まだまだアカデミックな話の模様。</li>
</ul>


<h2>今必要なCSSアーキテクチャ</h2>

<ul>
<li><a href="http://www.slideshare.net/MayuKimura/css-25547100">資料</a></li>
<li>オープンストリームの木村さん</li>
</ul>


<h4>なぜ今CSSアーキテクチャなのか?</h4>

<ul>
<li>CSSにアーキテクチャとかあるの??</li>
<li>こぴぺでいい? 大丈夫??</li>
<li>→CSSはカオスになりやすい。

<ul>
<li>全ての定義がグローバル →影響範囲が甚大

<ul>
<li>stlyeタグにscoped属性：親要素と子孫要素に対してのみスタイルが適用される。(Firefox21〜のみ)</li>
</ul>
</li>
<li>HTMLの構造に依存しがち：HTMLの構造が変わったら適用されなくなる。</li>
<li>スタイル定義の表現が自由すぎる

<ul>
<li>用途不明のスタイル定義がある <code>.blue {color:blue;}</code>みたいな。</li>
<li>セレクタがえらく長い</li>
</ul>
</li>
<li>スタイルの優先度の決定方法

<ul>
<li>セレクタの優先度を上げる：詳細にすると、HTMLへの依存度UPしてしまう。</li>
<li>最後の切り札<code>!important</code></li>
</ul>
</li>
<li>わりと泥臭い!!!!</li>
<li>だけど、、リッチUIな大規模Webアプリケーションやモバイル向けなんかで重要。</li>
<li>CSSの運用・保守性、パフォーマンス大事!。モバイルではよりシビア。</li>
</ul>
</li>
</ul>


<h4>OOCSS</h4>

<p><a href="http://takazudo.github.io/blog/entry/2012-12-10-oocsssass.html">参考</a></p>

<ul>
<li>Object Oriented CSS(2009、Nicole Sullivan)。</li>
<li>再利用、拡張、、など</li>
<li>特徴

<ul>
<li>構造と見た目の分離(繰り返しがあるのは分離)</li>
<li>コンテナとコンテンツの分離(共通スタイル) →クラスを組み合わせて適用する</li>
<li>Avoid singletons(IDセレクタの利用を避ける)</li>
</ul>
</li>
</ul>


<h4>SMACSS</h4>

<p>上から順に細かくなる。</p>

<ul>
<li>ベースカテゴリ。リセットとか</li>
<li>レイアウトカテゴリ。主要なコンポーネントのスタイルを定義。伝統的にIDセレクタが多い</li>
<li>モジュールカテゴリ。小さなコンポーネント(入力フォームやモーダルなど)。再利用が前提。要素セレクタは避けて、クラスセレクタを使う。</li>
<li>ステートカテゴリ。活性・非活性。成功・失敗時のスタイル。既存のスタイルを上書きすることが多い。!important解禁。JavaScriptでaddClassとかして使うようにするとか。</li>
<li><p>テーマ。ページ全体に及ぶ。テーマ切り替え用のスタイルを定義。あまり使わない?</p></li>
<li><p>マルチクラスパターン→クラス増える??</p>

<ul>
<li>YES。HTMLが見づらくなる。CSSで頑張るより、依存が減る。</li>
</ul>
</li>
<li>classが全然セマンテックじゃなくなる?

<ul>
<li>YES。そもそもセマンティックである必要があるのか?。HTML5の仕様には書いてあるけど、、保守性を犠牲にしてまでやるもの??</li>
<li>Microformatだとクラス属性だったが、Microdataが主流になってきたし。</li>
</ul>
</li>
<li>DOM操作ではid属性使いたい!

<ul>
<li>YES。id属性はJavaScriptが参照するものとして使う。<code>js-</code>を使えば、JSのみの利用とわかっていいんでは??</li>
</ul>
</li>
</ul>


<h4>まとめ</h4>

<ul>
<li>銀の弾丸はない</li>
<li>CSSもコードレビューが。。

<ul>
<li>CSSLintの採用もいいのでは? OOCSSの人がやっている。</li>
</ul>
</li>
<li>今だけじゃなく、未来にとって必要なCSSアーキテクチャ。だんだん膨らむから、最初にやる。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTML5勉強会「HTML5×Internet Exploler」メモ]]></title>
    <link href="http://sat-pg.com/blog/2013/08/02/html5j-ie.html"/>
    <updated>2013-08-02T23:50:00+09:00</updated>
    <id>http://sat-pg.com/blog/2013/08/02/html5j-ie</id>
    <content type="html"><![CDATA[<p>HTML5jえんぷら部主催の勉強会に参加したためメモ。</p>

<p>タイトルは、「HTML5✕Internet Explorer 〜IEを使ってどこまでモダンなWebへ突き進めるのか？〜」ということで、
エンタープライズとは切っても切り離せないIEのお話。</p>

<p>全体を通して、IEの互換モードや、Compat Inspector、modern.IEにより検証を行っていくことで、エンタープライズの開発に対応していくのか、というのが印象に残りました。</p>

<!-- more -->


<h2>新しいIEとJavaScriptで動かす最近のWebアプリケーション</h2>

<p>株式会社ピクセルグリッド MicrosoftMVP（InternetExplorer）小山田さんのお話</p>

<h4>古いIEで作ったものが新しいIEで動かない理由は?</h4>

<ul>
<li>Quirks Modeで作っている

<ul>
<li>CSSの解釈が違う。widthとpadding程度でも異なる。</li>
<li>Quirks Modeには、HTMLのDOCTYPE宣言でスイッチする。正しく書けばStandardモードに替えられる</li>
<li>今後作る場合は、正しいDoctype宣言を使って、Standartモードで動作させることを勧める</li>
</ul>
</li>
<li>IE独自拡張を使っている

<ul>
<li>ActiveXObjectや、VBScriptや、VML等。ActiveXObjectはJavaScriptへ、VMLはSVGへと修正すべき</li>
</ul>
</li>
<li>プラグインに頼っている

<ul>
<li>Flash、Sliverlightなどなど</li>
</ul>
</li>
</ul>


<h4>新しいIEで動かすには?</h4>

<ul>
<li>IEは古いエンジンを持っているのでそれを使う

<ul>
<li>IE9は、IE7,8,9相当のモードを持っている。エミュレートできる。古いサイトを見ているときは、古いモードで。</li>
<li>headにmetaタグとして、<code>&lt;meta http-equiv="X-UA-Compatible" content="IE=EmulateIE7" /&gt;</code>と記載するとIE7モードになる。</li>
<li>Trident(レンダリングエンジン)はエミュレートできるが、JScriptはだめ。</li>
</ul>
</li>
</ul>


<h4>これからはどうするか?</h4>

<ul>
<li>重要なのはJavaScript</li>
<li>Word、ExcelなんかもJavaScriptで動く。ほぼ標準技術のみでWebシステムを作ることができる。</li>
<li>既存システムにWebAPIを追加してJSONをやりとりするようにすればいい。ブラウザはそれを受け取りJavaScriptで画面を作る。</li>
<li>jQuery + Backbone.jsなどで、それらが実現できる。</li>
</ul>


<h2>IT管理者と新しいIE</h2>

<p>MicrosoftMVP（InternetExplorer）の村地さんのお話</p>

<ul>
<li>IEは進化している。古いのはいつまで使えるのか

<ul>
<li>IE6 2014/4/8 EOL(XPとおなじ)</li>
<li>IE7 2017/4/11 EOL(Vistaとおなじ)</li>
<li>IE8,9 2020/1/14 EOL(win7とおなじ)</li>
<li>IE10,11 2023/1/10 EOL(win8とおなじ)</li>
</ul>
</li>
<li>更新のサイクルはだんだん短かくなっていて、今後は、高速リリースも想定される。10年サポートの見直しもあるかもしれない。</li>
<li>バージョン統一が難しくなっていくかもしれない。</li>
<li>クラウドは最新から1つ前のバージョンまでしか対応していない。(N-1対応)</li>
</ul>


<h4>短期的な対応策</h4>

<ul>
<li>互換モードを活用する

<ul>
<li>エミュレートされるもの：レンダリング、JavaScript(パースとか)、DOM、CSS、User Agent String(互換モードとわかる)</li>
<li>イントラネットゾーンのサイトは、規定で互換モード表示。企業内に閉じていれば互換モード表示される</li>
<li>ユーザが互換表示ボタンをクリックすることでも互換モードにできる</li>
<li>サーバレスポンスで互換表示、またはページのmetaタグで互換表示

<ul>
<li>X-UA-Compatible HTTPヘッダー</li>
<li>X-UA-Compatible: IE-EmulateIE7</li>
<li>edge(IE=edge 最新で表示する)</li>
</ul>
</li>
<li>Microsoftが提供する互換表示リスト(Web Browser Controlの互換モード)

<ul>
<li>デフォルト必ずIE7モードで動作する。設定変更はレジストリを変更する必要あり</li>
<li>http://msdn.microsoft.com/en-us/library/ee330730.aspx 参照</li>
<li>IE上げても変わらないから注意</li>
</ul>
</li>
<li>互換モード問題点

<ul>
<li>動かないものは動かない</li>
<li>Win8のスタート画面のIEには互換モードない</li>
</ul>
</li>
</ul>
</li>
<li>互換性検証を活用する

<ul>
<li>既存の互換性上の問題を検証する</li>
<li>新しいIEと非互換の部分、改善すべき部分とその改善方法を確認する</li>
<li>改善作業をスケジュール化する</li>
<li><a href="http://ie.microsoft.com/testdrive/html5/compatinspector/">Compat Inspector</a>を利用すると簡単

<ul>
<li>Compat InspectorはJavaScriptをページの先頭で読み込むと、互換性スコアがページ内に表示されるもの。赤は致命的、黄色は問題がある可能性がある、青は軽微なもの。クリックすると概要教えてくれる。</li>
<li>Compat Inspectorの設置は、サーバのコンテンツを書き替えるか、難しければFiddlerを使ってレスポンスに挿入するのを推奨。<a href="http://www.slideshare.net/hebikuzure/cod2012-room-t1">参考</a></li>
</ul>
</li>
</ul>
</li>
</ul>


<h4>中長期的</h4>

<ul>
<li>ロックイン(ベンダロックイン、バージョンロックイン)を避ける</li>
<li>Webの本質に立ち返る

<ul>
<li>クライアントでのインストールレス</li>
<li>サーバのみの改修で完結</li>
<li>NWに繋がればすぐ利用できる</li>
<li>迅速に対応できる、効率化とスピードアップする</li>
<li>レガシーブラウザに縛られるのは本末転倒</li>
</ul>
</li>
<li>Web Standardsへの準拠

<ul>
<li>標準化されていない技術は避ける</li>
<li>User Agent/Browser Versionを固定したコードを書かない</li>
<li>HackではなくFeature Detection(機能検出)</li>
<li><strong>些細な違いを気にしない(重要!!)</strong></li>
</ul>
</li>
<li>後方互換性はいつまで維持されるのかわからない。短期的な手段は時間を買うための手段。新しい標準準拠のブラウザ対応するための仕組み作りのための時間</li>
</ul>


<h2>だから、IEは業務システムで使われている。いままでもこれからも</h2>

<p>日本マイクロソフトの内河さんのお話</p>

<h4>IE11の紹介</h4>

<ul>
<li>とにかく速いとのこと。WebGLサンプル(ヒマラヤの気候とか。3Dのエベレスト。GLACERWORKS)もIEならスムーズに動く</li>
<li><a href="http://ie.microsoft.com/testdrive">IE Test Drive</a>で他ブラウザとの差を見て欲しい</li>
</ul>


<h4>Web標準への取り組みとmodern.IE</h4>

<ul>
<li>レガシーIE(6,7,8)の存在により、プラットフォーム、バージョンが断片化し、開発者の負担が増える。</li>
<li>検証には、<a href="http://modern.ie/">modern.IE</a>を使って欲しい

<ul>
<li>検証ウィザード、検証のための仮想環境、ベストプラクティスなどがある。</li>
</ul>
</li>
<li>開発者ツール(F12)でも、ブラウザモード、ドキュメントモードによる検証が実施できる</li>
</ul>


<h4>バグ報告は connect.microsoft.com/ie</h4>

<ul>
<li>エンジニアチームに直接フィードバックできる</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime Text 2の設定まとめ]]></title>
    <link href="http://sat-pg.com/blog/2013/06/29/sublimetext2.html"/>
    <updated>2013-06-29T19:42:00+09:00</updated>
    <id>http://sat-pg.com/blog/2013/06/29/sublimetext2</id>
    <content type="html"><![CDATA[<p>最近Sublime Text 2をメインのエディタとして使っているのでメモ。</p>

<ul>
<li><a href="#config">設定ファイル</a></li>
<li><a href="#package">パッケージ</a></li>
</ul>


<!-- more -->


<h2><a name="config"></a>設定ファイル</h2>

<p>メインの設定ファイルは<a href="https://github.com/torub/sublime-settings">github</a>に保存。</p>

<h2><a name="package"></a>パッケージ</h2>

<p>試してみたパッケージのリストは以下gistのまとめの通り。</p>

<div><script src='https://gist.github.com/5890884.js'></script>
<noscript><pre><code></code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[日本Androidの会 2013年6月定例会メモ]]></title>
    <link href="http://sat-pg.com/blog/2013/06/25/android-study201306.html"/>
    <updated>2013-06-25T18:59:00+09:00</updated>
    <id>http://sat-pg.com/blog/2013/06/25/android-study201306</id>
    <content type="html"><![CDATA[<p><a href="https://www.android-group.jp/event/event19.html">日本Androidの会 2013年6月定例会</a>
に行ってきたので、聞いてきた話をメモ。</p>

<p>会場は4月に移転したばっかりというデジタルハリウッドさんのところで、
凄く綺麗ないいところでした。</p>

<h2>オフラインで動くPackaged Web Appのクラウド利用</h2>

<p>丸山先生の講演。</p>

<p>接続されるクライアントの多さから、負荷、NW帯域が増大するなど、サーバサイドでは問題が起きているが、対比的にクライアント側は、8コアのAndroid端末が出るなど性能が向上しており、
余裕が生まれている。</p>

<p>今後は、Rich Client + Thin Server Architect(TSA)の考え方で、
P層をデバイス側に移し、サーバに負担をかけずにクライアント側に処理を移す、が想定される。
クライアント側は、Androidネイティブもあれば、Packaged Web Appもあるだろう。</p>

<p>TSAにより、サーバ開発者はビジネスロジックに集中でき、
クライアント開発者はP層に集中できる。</p>

<h4>Package web appの特徴</h4>

<ul>
<li>ブラウザの使うランタイムを利用する形をとり、WebViewは使わない。</li>
<li>Offline enabled by default</li>
<li>Cloud enabled by default。</li>
<li>デバイスのHW、OSリソースへのアクセスが可能な点は、Packagedならではの特徴。</li>
<li>アプリはマーケットから配布できる</li>
<li>Contents Security Policy(CSP)：セキュリティ面では制約がある。

<ul>
<li>Inline-JavaScriptの禁止：HTML内にJavaScriptを書いてはいけない。</li>
<li>eval禁止</li>
<li>上記より、webのソースそのままでは動かない</li>
</ul>
</li>
<li>Offline First

<ul>
<li>つながっていなくても動くのが魅力。</li>
<li>マルチデバイスで有効(シームレスな切り替えをしたい)</li>
<li>ローカルのストレージにデータを保存可能</li>
</ul>
</li>
<li>Offline-enabledのルール

<ul>
<li>可能ならばいつでもローカルなデータを使う。ローカルデータといってもクラウドとも同期できる仕組みが存在する。

<ul>
<li>Chrome Storage API：小規模な文字列データ。容量制限あり。LocalとSyncがある。Syncは自動的にWebと連携する。Cookieみたいな使い方か。Syncは便利。上限は102,400 byte</li>
<li>IndexDB: HTML5標準。Googleはメインに考えてない? クラウドとの同期が面倒だからか??</li>
<li>Chrome FileSystem API</li>
<li>Chrome SyncFileSystem API: ローカルに書くと、クラウド(google drive)と勝手に同期する。これは便利。</li>
</ul>
</li>
<li>UIをデータから分離する</li>
<li>MVCモデルを使う。クライアントのなかにMVCを持つ流れは、JavaScriptのフレームワーク等と同様。</li>
</ul>
</li>
<li>Google Cloud Messaging(GCM)でメッセージPush配信。

<ul>
<li>Packaged Web Appの目玉のひとつ。(もう1つはデータのsync)</li>
</ul>
</li>
<li>Network Communications

<ul>
<li>ソケットを自由に使うことができる。</li>
<li>httpを使わず、データをやりとりする。</li>
</ul>
</li>
<li>googleはクラウド同期を柱にしている。目玉ふたつをおさらいすると以下2つ。

<ul>
<li>ストレージ同期</li>
<li>GCM</li>
</ul>
</li>
</ul>


<h2>Google Glassが変える世界。</h2>

<p>株式会社GClueの佐々木さんの講演。</p>

<ul>
<li>Google Glassはそれだけで完結(Androidが動いている)。</li>
<li>1年前くらいのスマートフォン。Android4.0.4。</li>
<li><p>メガネの横にタッチパッドがついてる。バッテリは後ろ。
骨伝導用デバイスもあり。裏側には接触センサもあり。
写真もとれる。</p></li>
<li><p>Google GlassはHome Laucherを作り変えているのみで、通常のAndroid。Android Appも動く
専用APをGlasswareと呼んでいる。Glasswareで書くと、HomeLaucnherから起動ができる。</p></li>
<li><p>上30度を見るとONになる。
またはOK Glassとしゃべると音声認識で動きだす。</p></li>
</ul>


<h2>Google I/O報告 &amp; Android Studio</h2>

<p>進藤さんの講演。</p>

<h4>Google I/O</h4>

<ul>
<li>Androidは、9億アクティベート/年(去年は4億、その前は1億)</li>
<li>Googleは2つのPF(Android、Chrome)</li>
<li>Androidの新しいAPI

<ul>
<li>Location

<ul>
<li>Fused Location Provider: 基地局、Wifi、GPSから効率よく位置情報取得</li>
<li>Geofenceing API: 位置情報をエリア毎に識別。出入りを通知。1アプリにつき100箇所登録可能。バッテリーにやさしい。</li>
<li>Activity Recognition: ユーザの動きを識別。歩き or 車 or 停止中など。バッテリーにやさしい。</li>
</ul>
</li>
<li>Google+</li>
<li>GCM

<ul>
<li>毎秒20万、1日170億メッセージ。1件60msで処理。</li>
<li>3つの機能追加

<ul>
<li>persistent connections。多数のメッセージを多数のデバイスへ</li>
<li>Upstream。アプリからサーバ側へもプッシュできる</li>
<li>notification synchronization。タブレットとスマホの通知の同期。</li>
</ul>
</li>
</ul>
</li>
<li>Google Play game service

<ul>
<li>cloud save</li>
<li>Achievements</li>
<li>Leaderboard(ランキング)</li>
<li>multi play</li>
</ul>
</li>
</ul>
</li>
<li>Android以外のUpdate

<ul>
<li>Google Mapのアップデート。GoogleEarthとの統合。水中Map。</li>
<li>Chrome

<ul>
<li>7.5億ユーザ</li>
<li>JavaScript高速化</li>
<li>WebP(画像)、VP9(動画)</li>
<li>Web Component</li>
</ul>
</li>
</ul>
</li>
<li>その他

<ul>
<li><a href="https://github.com/adamrocker/volley">Volley</a>(<a href="http://www.adamrocker.com/blog/341/volley-easy-fast-networking-for-android.html">参考</a>)： HTTPを効率化、かつ簡単化するライブラリ。大規模データをマルチスレッドで取得するなど。</li>
</ul>
</li>
</ul>


<h4>Android Studio</h4>

<ul>
<li>次期IntelJの中に入ってくる。</li>
<li>まだPreview版でアップデートが多い。業務用は時期尚早か。</li>
<li>NDK(Native Development Kit)未対応。</li>
<li>当面はADKのリリースは続くはず。すぐには移行は不要かも。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone.jsのtutorial(1)]]></title>
    <link href="http://sat-pg.com/blog/2013/06/18/backbone-tutorial-1.html"/>
    <updated>2013-06-18T02:57:00+09:00</updated>
    <id>http://sat-pg.com/blog/2013/06/18/backbone-tutorial-1</id>
    <content type="html"><![CDATA[<p>ひきつづきBackbone.jsの勉強。</p>

<p><a href="http://dailyjs.com/2012/11/29/backbone-tutorial-1/">DailyJSのBackboneチュートリアルPart1</a>見てみたけど、
不明点だらけのため、調べたことをメモ。</p>

<h3>Step1: package.json</h3>

<ul>
<li>node.jsによるパッケージ管理ツール(npm)で、パッケージのバージョン管理をするためのもの。</li>
<li>package.jsonを記載して、<code>npm install</code>とすることで必要なモジュールがインストールされる。</li>
<li><code>./node_modules</code>以下にファイルがコピーされるため、git使う場合は.gitignoreに記載したほうがいい。</li>
<li>gruntのバージョンが変わっているためサンプルを一部修正。(gruntは、gruntの他にgrunt-cliとgrunt-initの3つに分かれたとのこと。<a href="https://github.com/gruntjs/grunt/wiki/Upgrading-from-0.3-to-0.4">gruntのmigration guide</a>)</li>
</ul>


<h3>Step2: server.js</h3>

<ul>
<li><a href="http://www.senchalabs.org/connect/">Connect</a>はNode.jsのミドルウェアフレームワークで、複数のミドルウェアが扱える。</li>
<li>Connectのstaticは、静的なファイルを返すサーバを作れるみたい。</li>
<li>Connect#useで、マウントポイントやルーティングの設定等ができるので、サンプルでは、<code>app</code>をルートディレクトリとし、<code>node_modules</code>はそのまま、<code>/js/lib/</code>は、<code>node_modules/requirejs/</code>にマウントをしている。</li>
<li>例) <code>http://localhost:8000/js/lib/require.js</code>と<code>http://localhost:8000/node_modules/requirejs/require.js</code>は同じファイルで、両方ともブラウザからアクセスできる。</li>
</ul>


<h3>Step3: RequrireJS</h3>

<p><a href="http://requirejs.org/">RequreJSの公式</a>から引用。</p>

<pre><code>RequireJS is a JavaScript file and module loader. It is optimized for in-browser use, 
but it can be used in other JavaScript environments, like Rhino and Node. 
Using a modular script loader like RequireJS will improve the speed and quality of your code.
</code></pre>

<ul>
<li>JavaScriptのファイル・モジュールの読み込み用ライブラリで、必要になったとき読み込む等で、スピードと品質を改善する。</li>
<li>RequireJSの設定はmain.jsに書くのが普通らしい。(このサンプルでもapp/js/main.jsに<code>requirejs.config..</code>を記載)</li>
<li><code>require(['hoge']..</code>と書くとapp/js/hoge.jsを読み込む</li>
<li><code>require</code>の後は、読み込んだjs内の関数や変数が使える。サンプルでは、<code>require['app']</code>として、app.js内のAppを<code>new App()</code>として呼び出している。</li>
<li>呼び出されるjs側では、1つのモジュールの単位毎にdefineで定義する模様。</li>
<li>defineの後の[]には、依存関係にあるモジュールを記載して使う。例えば<code>define(['lib/jquery'], function($){ ... })</code> のようにすると、jquery.jsに依存するモジュールが書ける。(define内部で$も使える。)</li>
<li>JSHintでエラーが出ないようにするには、JSHintの設定ファイルで、<code>"dojo" : true</code>とすればいい。(defineとrequireが許可される模様。)</li>
</ul>


<h3>Step4: テストの環境(Mocha, Chai)</h3>

<p><a href="http://visionmedia.github.io/mocha/">Mochaフレームワーク</a>を利用する環境の作成。</p>

<ul>
<li>Mochaは、先日のBuildInsiderの講演によると、TDDとかBDD(テストドリブン開発とビヘイビアドリブン開発)を実現するためのフレームワークらしい。</li>
<li>TDDとBDDで利用する関数が異なる。

<ul>
<li>TDDは、suite()、test()、setup()とteardown()</li>
<li>BDDは、describe()、it()、before()、beforeEach()とafterEach()</li>
</ul>
</li>
<li>setup.jsでTDD or BDD等を設定する。</li>
<li><p><code>require['app']</code>でapp.jsを読み込んで、<code>mocha.run();</code>としてテスト実行</p></li>
<li><p>(この作者は?)<a href="http://chaijs.com/api/assert/">chaiのassert</a>を使ってテストする。簡単のためっぽい。</p></li>
<li>server.jsのマウントポイントに/testを追加。(test/とapp両方を/testに。こうしないとrequire[&#8216;app&#8217;]が動かない。)</li>
</ul>


<h3>Step5: ビルド環境(grunt)</h3>

<ul>
<li><a href="http://grantjs.com">grant.js</a>は、JavaScriptのタスクランナー。

<ul>
<li>antとかMakefileのJavaScript版みたいなもの(?)</li>
</ul>
</li>
<li>JSHintのチェックとか、CoffeeScriptのコンパイルとかRequireJSの設定とかを自動化できる</li>
<li>grunt.jsが0.4系にバージョンアップしているので、サンプルを以下の通り修正

<ul>
<li>grunt.jsは、バージョンアップに伴いGrantfile.jsに変更(中身は同じ)</li>
<li>package.jsonに、<code>"grunt-cli": "latest", "grunt-init": "latest"</code>を追加</li>
<li>scriptsのgrunt部分を<code>"grunt" : "grunt"</code>に修正</li>
</ul>
</li>
<li>grunt.jsのコマンドラインインターフェイス(CLI)はgrunt-cliにある。<code>./node_modules/grunt-cli/bin/grunt</code>が本体。</li>
<li>全てのgrunt.jsのコードは、<code>module.exports = function(grunt) { };</code>内に書く必要がある。</li>
<li>loadNpmTasksでプラグインをロード、initConfigでロードしたプラグインの設定。</li>
<li>registerTaskは、プラグインを使わないような作業の設定(多分)。</li>
<li>defaultはgruntに引数を与えない場合に実行されるタスク。</li>
<li>サンプルの例で言えば、grunt とすると、execとcopy-requireが実行される。</li>
<li>grunt execとするとexec部分のみが実行される。</li>
</ul>


<p>※今後チュートリアルを進めていくのと並行して、出てきたライブラリ(RequireJS、mocha.js、grunt.jsなどなど)のサンプルを書いてみたい。</p>

<h3><a href="https://github.com/torub/backbone-tutorial/tree/7081a6f20be7e3a29a359dcc3904d40c09bfb11d">動作版のファイル - github</a></h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone.jsお試し]]></title>
    <link href="http://sat-pg.com/blog/2013/06/17/backbonejs1.html"/>
    <updated>2013-06-17T00:21:00+09:00</updated>
    <id>http://sat-pg.com/blog/2013/06/17/backbonejs1</id>
    <content type="html"><![CDATA[<p>Knockout.jsの次はBackbone.jsのテスト。</p>

<p><a href="http://dotinstall.com/lessons/basic_backbonejs">ドットインストールのBackbone.js入門</a>を試してみた結果を添付します。</p>

<!-- more -->


<h5>index.html</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;style </span><span class="na">type=</span><span class="s">&quot;text/css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nc">.completed</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">text-decoration</span><span class="o">:</span> <span class="k">line-through</span><span class="p">;</span>
</span><span class='line'>      <span class="k">color</span><span class="o">:</span> <span class="nb">gray</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="nt">&lt;/style&gt;</span>
</span><span class='line'><span class="nt">&lt;form</span> <span class="na">id=</span><span class="s">&quot;addTask&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">id=</span><span class="s">&quot;title&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">value=</span><span class="s">&quot;add&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;span</span> <span class="na">id=</span><span class="s">&quot;error&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;tasks&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span>Tasks left: <span class="nt">&lt;span</span> <span class="na">id=</span><span class="s">&quot;count&quot;</span><span class="nt">&gt;&lt;/span&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/template&quot;</span> <span class="na">id=</span><span class="s">&quot;task-template&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;checkbox&quot;</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;toggle&quot;</span> <span class="o">&lt;%-</span> <span class="nx">completed</span> <span class="o">?</span> <span class="s1">&#39;checked&#39;</span> <span class="o">:</span> <span class="s1">&#39;&#39;</span> <span class="o">%&gt;</span> <span class="err">/&gt; </span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">span</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;&lt;%- completed? &#39;completed&#39;:&#39;&#39;%&gt;&quot;</span><span class="o">&gt;</span> <span class="o">&lt;%-</span> <span class="nx">title</span> <span class="o">%&gt;</span> <span class="o">&lt;</span><span class="err">/span&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">span</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;delete&quot;</span><span class="o">&gt;</span><span class="p">[</span><span class="nx">x</span><span class="p">]</span><span class="o">&lt;</span><span class="err">/span&gt;</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://underscorejs.org/underscore-min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://code.jquery.com/jquery-1.10.1.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://backbonejs.org/backbone-min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;js/app.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h5>app.js</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Model</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">Task</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">defaults</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">title</span><span class="o">:</span> <span class="s2">&quot;do something&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">completed</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">validate</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">attrs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">_</span><span class="p">.</span><span class="nx">isEmpty</span><span class="p">(</span><span class="nx">attrs</span><span class="p">.</span><span class="nx">title</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">return</span> <span class="s1">&#39;title must not be empty&#39;</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;invalid&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">model</span><span class="p">,</span> <span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#error&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
</span><span class='line'>          <span class="p">})</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">Tasks</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Collection</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span> <span class="nx">model</span><span class="o">:</span> <span class="nx">Task</span> <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// View</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">TaskView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">tagName</span><span class="o">:</span> <span class="s1">&#39;li&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;destroy&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">remove</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;change&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">events</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="s1">&#39;click .delete&#39;</span><span class="o">:</span> <span class="s1">&#39;destroy&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="s1">&#39;click .toggle&#39;</span><span class="o">:</span> <span class="s1">&#39;toggle&#39;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">destroy</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="nx">confirm</span><span class="p">(</span><span class="s1">&#39; are you ok ?&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">destroy</span><span class="p">();</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">toggle</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;completed&#39;</span><span class="p">,</span> <span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;completed&#39;</span><span class="p">));</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">remove</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">remove</span><span class="p">();</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">template</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#task-template&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">()),</span>
</span><span class='line'>      <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">temp</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">toJSON</span><span class="p">());</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="nx">temp</span><span class="p">);</span>
</span><span class='line'>          <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">TasksView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">tagName</span><span class="o">:</span> <span class="s1">&#39;ul&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">collection</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;add&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">addNew</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">collection</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;change&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">updateCount</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">collection</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;destroy&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">updateCount</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">addNew</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">task</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">taskView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">TaskView</span><span class="p">({</span><span class="nx">model</span><span class="o">:</span><span class="nx">task</span><span class="p">});</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">taskView</span><span class="p">.</span><span class="nx">render</span><span class="p">().</span><span class="nx">el</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#title&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">).</span><span class="nx">focus</span><span class="p">();</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">updateCount</span><span class="p">();</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">updateCount</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">uncompletedTasks</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">collection</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">task</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">return</span> <span class="o">!</span><span class="nx">task</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;completed&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="p">});</span>
</span><span class='line'>          <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#count&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">uncompletedTasks</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">collection</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">task</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="kd">var</span> <span class="nx">taskView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">TaskView</span><span class="p">({</span><span class="nx">model</span><span class="o">:</span> <span class="nx">task</span><span class="p">});</span>
</span><span class='line'>              <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">taskView</span><span class="p">.</span><span class="nx">render</span><span class="p">().</span><span class="nx">el</span><span class="p">);</span>
</span><span class='line'>          <span class="p">},</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">updateCount</span><span class="p">();</span>
</span><span class='line'>          <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">AddTaskView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#addTask&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">events</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="s1">&#39;submit&#39;</span><span class="o">:</span> <span class="s1">&#39;submit&#39;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">submit</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">task</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Task</span><span class="p">();</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">task</span><span class="p">.</span><span class="nx">set</span><span class="p">({</span><span class="nx">title</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#title&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">()},</span> <span class="p">{</span><span class="nx">validate</span><span class="o">:</span> <span class="kc">true</span><span class="p">}))</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">this</span><span class="p">.</span><span class="nx">collection</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">task</span><span class="p">);</span>
</span><span class='line'>              <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#error&#39;</span><span class="p">).</span><span class="nx">empty</span><span class="p">();</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">tasks</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Tasks</span><span class="p">([</span>
</span><span class='line'>          <span class="p">{</span><span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;task1&#39;</span><span class="p">,</span> <span class="nx">completed</span><span class="o">:</span> <span class="kc">true</span><span class="p">},</span>
</span><span class='line'>          <span class="p">{</span><span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;task2&#39;</span><span class="p">},</span>
</span><span class='line'>          <span class="p">{</span><span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;task3&#39;</span><span class="p">},</span>
</span><span class='line'>          <span class="p">{</span><span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;task4&#39;</span><span class="p">}</span>
</span><span class='line'>      <span class="p">]);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">tasksView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">TasksView</span><span class="p">({</span><span class="nx">collection</span><span class="o">:</span> <span class="nx">tasks</span><span class="p">});</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">addTaskView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AddTaskView</span><span class="p">({</span><span class="nx">collection</span><span class="o">:</span> <span class="nx">tasks</span><span class="p">});</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#tasks&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">tasksView</span><span class="p">.</span><span class="nx">render</span><span class="p">().</span><span class="nx">el</span><span class="p">)</span>
</span><span class='line'><span class="p">}());</span>
</span></code></pre></td></tr></table></div></figure>


<h4>実行結果</h4>



<p><form id="addTask">
<input type="text" id="title"/>
<input type="submit" value="add"/>
<span id="error"></span>
</form></p>

<div id="tasks"></div>


<p>Tasks left: <span id="count"></span></p>




<script type="text/template" id="task-template">
    <input type="checkbox" class="toggle" <%- completed ? 'checked' : '' %> />
    <span <%- completed? 'style=text-decoration:line-through;color:gray;':''%>> <%- title %> </span>
    <span class="delete">[x]</span>
</script>


<script src="http://underscorejs.org/underscore-min.js"></script>


<script src="http://code.jquery.com/jquery-1.10.1.min.js"></script>


<script src="http://backbonejs.org/backbone-min.js"></script>


<script>
(function() {
    // Model
    var Task = Backbone.Model.extend({
        defaults: {
            title: "do something",
            completed: false
        },
        validate: function(attrs) {
            if (_.isEmpty(attrs.title)) {
                return 'title must not be empty';
            }
        },
        initialize: function() {
            this.on('invalid', function(model, error) {
                $('#error').html(error);
            })
        }
    });
    var Tasks = Backbone.Collection.extend({ model: Task });

    // View
    var TaskView = Backbone.View.extend({
        tagName: 'li',
        initialize: function() {
            this.model.on('destroy', this.remove, this);
            this.model.on('change', this.render, this);
        },
        events: {
            'click .delete': 'destroy',
            'click .toggle': 'toggle'
        },
        destroy: function() {
            if(confirm(' are you ok ?')) {
                this.model.destroy();
            }
        },
        toggle: function() {
            this.model.set('completed', !this.model.get('completed'));
        },
        remove: function() {
            this.$el.remove();
        },
        template: _.template($('#task-template').html()),
        render: function() {
            var temp = this.template(this.model.toJSON());
            this.$el.html(temp);
            return this;
        }
    });
    var TasksView = Backbone.View.extend({
        tagName: 'ul',
        initialize: function() {
            this.collection.on('add', this.addNew, this);
            this.collection.on('change', this.updateCount, this);
            this.collection.on('destroy', this.updateCount, this);
        },
        addNew: function(task) {
            var taskView = new TaskView({model:task});
            this.$el.append(taskView.render().el);
            $('#title').val('').focus();
            this.updateCount();
        },
        updateCount: function() {
            var uncompletedTasks = this.collection.filter(function(task) {
                return !task.get('completed');
            });
            $('#count').html(uncompletedTasks.length);
        },
        render: function() {
            this.collection.each(function(task) {
                var taskView = new TaskView({model: task});
                this.$el.append(taskView.render().el);
            }, this);
            this.updateCount();
            return this;
        }
    });

    var AddTaskView = Backbone.View.extend({
        el: '#addTask',
        events: {
            'submit': 'submit'
        },
        submit: function(e) {
            e.preventDefault();
            var task = new Task();
            if (task.set({title: $('#title').val()}, {validate: true})) {
                this.collection.add(task);
                $('#error').empty();
            }
        }
    });
    var tasks = new Tasks([
            {title: 'task1', completed: true},
            {title: 'task2'},
            {title: 'task3'},
            {title: 'task4'}
        ]);
    var tasksView = new TasksView({collection: tasks});
    var addTaskView = new AddTaskView({collection: tasks});
    $('#tasks').html(tasksView.render().el)
}());
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Knockout.jsお試し(2)]]></title>
    <link href="http://sat-pg.com/blog/2013/06/10/knockoutjs2.html"/>
    <updated>2013-06-10T11:09:00+09:00</updated>
    <id>http://sat-pg.com/blog/2013/06/10/knockoutjs2</id>
    <content type="html"><![CDATA[<p>せっかく勉強会で概要を聞いてきたので、サンプルを動かすその2。 <a href="http://learn.knockoutjs.com/#/?tutorial=collections">公式ページのサンプルその2</a>の内容をちょっとだけ変更。</p>

<h4>サンプル2</h4>

<ol>
<li>複数の要素を監視対象にするにはobservableArrayを使う</li>
<li>observableArrayからのデータ削除にはremoveを使う</li>
<li>observableArrayへのデータ追加にはpushを使う</li>
<li>ここがobservableでなくても動くのがよくわからない??</li>
<li>繰り返したい項目はforeachを使う</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s1">&#39;text/javascript&#39;</span> <span class="nx">src</span><span class="o">=</span><span class="s1">&#39;http://ajax.aspnetcdn.com/ajax/knockout/knockout-2.2.1.js&#39;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;DOMContentLoaded&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">Checkout</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">menu</span><span class="p">,</span> <span class="nx">num</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">self</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">self</span><span class="p">.</span><span class="nx">menu</span> <span class="o">=</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">observable</span><span class="p">(</span><span class="nx">menu</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">self</span><span class="p">.</span><span class="nx">num</span> <span class="o">=</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">observable</span><span class="p">(</span><span class="nx">num</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">self</span><span class="p">.</span><span class="nx">check</span> <span class="o">=</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">computed</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">self</span><span class="p">.</span><span class="nx">menu</span><span class="p">().</span><span class="nx">price</span> <span class="o">*</span> <span class="nx">self</span><span class="p">.</span><span class="nx">num</span><span class="p">();</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">CashierViewModel</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">self</span><span class="p">.</span><span class="nx">menuList</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>          <span class="p">{</span> <span class="nx">menuName</span><span class="o">:</span><span class="s1">&#39;Aランチ&#39;</span><span class="p">,</span> <span class="nx">price</span><span class="o">:</span><span class="mi">1000</span> <span class="p">},</span>
</span><span class='line'>          <span class="p">{</span> <span class="nx">menuName</span><span class="o">:</span><span class="s1">&#39;Bランチ&#39;</span><span class="p">,</span> <span class="nx">price</span><span class="o">:</span><span class="mi">1500</span> <span class="p">},</span>
</span><span class='line'>          <span class="p">{</span> <span class="nx">menuName</span><span class="o">:</span><span class="s1">&#39;スペシャルランチ&#39;</span><span class="p">,</span> <span class="nx">price</span><span class="o">:</span><span class="mi">3000</span> <span class="p">}</span>
</span><span class='line'>      <span class="p">];</span>
</span><span class='line'>      <span class="nx">self</span><span class="p">.</span><span class="nx">checkoutList</span> <span class="o">=</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">observableArray</span><span class="p">([</span>    <span class="c1">// 1</span>
</span><span class='line'>          <span class="k">new</span> <span class="nx">Checkout</span><span class="p">(</span><span class="s1">&#39;鈴木&#39;</span><span class="p">,</span> <span class="nx">self</span><span class="p">.</span><span class="nx">menuList</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">1</span><span class="p">),</span>
</span><span class='line'>          <span class="k">new</span> <span class="nx">Checkout</span><span class="p">(</span><span class="s1">&#39;鈴木&#39;</span><span class="p">,</span> <span class="nx">self</span><span class="p">.</span><span class="nx">menuList</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="mi">2</span><span class="p">),</span>
</span><span class='line'>      <span class="p">]);</span>
</span><span class='line'>      <span class="nx">self</span><span class="p">.</span><span class="nx">removeData</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span> <span class="nx">self</span><span class="p">.</span><span class="nx">checkoutList</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span> <span class="p">}</span>  <span class="c1">// 2</span>
</span><span class='line'>      <span class="nx">self</span><span class="p">.</span><span class="nx">addData</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">self</span><span class="p">.</span><span class="nx">checkoutList</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">Checkout</span><span class="p">(</span><span class="s1">&#39;佐藤&#39;</span><span class="p">,</span> <span class="nx">self</span><span class="p">.</span><span class="nx">newmenu</span><span class="p">,</span> <span class="nx">self</span><span class="p">.</span><span class="nx">newnum</span><span class="p">));</span>    <span class="c1">//3</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nx">self</span><span class="p">.</span><span class="nx">total</span> <span class="o">=</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">computed</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">t</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>          <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">self</span><span class="p">.</span><span class="nx">checkoutList</span><span class="p">().</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">t</span> <span class="o">+=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">checkoutList</span><span class="p">()[</span><span class="nx">i</span><span class="p">].</span><span class="nx">check</span><span class="p">();</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">t</span><span class="p">;</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">self</span><span class="p">.</span><span class="nx">newmenu</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">menuList</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span> <span class="c1">//4</span>
</span><span class='line'>      <span class="nx">self</span><span class="p">.</span><span class="nx">newnum</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>   <span class="c1">//4</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">ko</span><span class="p">.</span><span class="nx">applyBindings</span><span class="p">(</span><span class="k">new</span> <span class="nx">CashierViewModel</span><span class="p">());</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;strong&gt;</span>配列表示のテスト(レストランの会計)<span class="nt">&lt;/strong&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span>売り上げ合計：<span class="nt">&lt;span</span> <span class="na">data-bind=</span><span class="s">&quot;text: total()&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>円<span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;table&gt;</span>
</span><span class='line'>    <span class="nt">&lt;thead&gt;&lt;tr&gt;</span>
</span><span class='line'>        <span class="nt">&lt;th&gt;</span>レジ担当者<span class="nt">&lt;/th&gt;&lt;th&gt;</span>メニュー<span class="nt">&lt;/th&gt;&lt;th&gt;</span>数量<span class="nt">&lt;/th&gt;&lt;th&gt;</span>価格<span class="nt">&lt;/th&gt;&lt;th&gt;&lt;/th&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;&lt;/thead&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tbody</span> <span class="na">data-bind=</span><span class="s">&quot;foreach: checkoutList&quot;</span><span class="nt">&gt;</span> <span class="c">&lt;!-- 5 --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>            <span class="nt">&lt;td</span> <span class="na">data-bind=</span><span class="s">&quot;text: name&quot;</span><span class="nt">&gt;&lt;/td&gt;</span>
</span><span class='line'>            <span class="nt">&lt;td&gt;&lt;select</span> <span class="na">data-bind=</span><span class="s">&quot;options: $root.menuList, value: menu, optionsText: &#39;menuName&#39;&quot;</span><span class="nt">&gt;&lt;/select&gt;&lt;/td&gt;</span>
</span><span class='line'>            <span class="nt">&lt;td&gt;&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">data-bind=</span><span class="s">&quot;value: num&quot;</span> <span class="nt">/&gt;&lt;/td&gt;</span>
</span><span class='line'>            <span class="nt">&lt;td</span> <span class="na">data-bind=</span><span class="s">&quot;text: check&quot;</span><span class="nt">&gt;&lt;/td&gt;</span>
</span><span class='line'>            <span class="nt">&lt;td&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span> <span class="na">data-bind=</span><span class="s">&quot;click: $root.removeData&quot;</span><span class="nt">&gt;</span>Remove<span class="nt">&lt;/a&gt;&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tbody&gt;</span>
</span><span class='line'><span class="nt">&lt;/table&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span>データ追加<span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span>メニュー：<span class="nt">&lt;select</span> <span class="na">data-bind=</span><span class="s">&quot;options: $root.menuList, value: newmenu, optionsText: &#39;menuName&#39;&quot;</span><span class="nt">&gt;&lt;/select&gt;</span>
</span><span class='line'>数量：<span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">data-bind=</span><span class="s">&quot;value: newnum&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;button</span> <span class="na">data-bind=</span><span class="s">&quot;click: addData&quot;</span><span class="nt">&gt;</span>追加<span class="nt">&lt;/button&gt;&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>実行結果は↓</p>

<!-- more -->


<h4>サンプル2実行結果</h4>

<script type='text/javascript' src='http://ajax.aspnetcdn.com/ajax/knockout/knockout-2.2.1.js'></script>


<script>
window.addEventListener('DOMContentLoaded', function(){
    function Checkout(name, menu, num) {
        var self = this;
        self.name = name;
        self.menu = ko.observable(menu);    // 1
        self.num = ko.observable(num);
        self.check = ko.computed(function() {
            return self.menu().price * self.num();
        });
    }

    function CashierViewModel() {
        var self = this;
        self.menuList = [
            { menuName:'Aランチ', price:1000 },
            { menuName:'Bランチ', price:1500 },
            { menuName:'スペシャルランチ', price:3000 }
        ];
        self.newmenu = self.menuList[0];
        self.newnum = 1;
        self.checkoutList = ko.observableArray([
            new Checkout('鈴木', self.menuList[0], 1),
            new Checkout('鈴木', self.menuList[1], 2),
        ]);
        self.removeData = function(data) { self.checkoutList.remove(data); }
        self.addData = function() {
            self.checkoutList.push(new Checkout('佐藤', self.newmenu, self.newnum));
        }

        self.total = ko.computed(function() {
            var t = 0;
            for(var i = 0; i < self.checkoutList().length; i ++) {
                t += self.checkoutList()[i].check();
            }
            return t;
        });
    }

    ko.applyBindings(new CashierViewModel());
});
</script>


<p><strong>配列表示のテスト(レストランの会計)</strong></p>

<p>売り上げ合計：<span data-bind="text: total()"></span>円</p>


<table>
    <thead><tr>
        <th>レジ担当者</th><th>メニュー</th><th>数量</th><th>価格</th><th></th>
    </tr></thead>
    <tbody data-bind="foreach: checkoutList"> <!-- -->
        <tr>
            <td data-bind="text: name"></td>
            <td><select data-bind="options: $root.menuList, value: menu, optionsText: 'menuName'"></select></td>
            <td><input type="text" data-bind="value: num" /></td>
            <td data-bind="text: check"></td>
            <td><a href="#" data-bind="click: $root.removeData">Remove</a></td>
        </tr>
    </tbody>
</table>


<p>データ追加</p>


<p>メニュー：<select data-bind="options: $root.menuList, value: newmenu, optionsText: 'menuName'"></select>
数量：<input type="text" data-bind="value: newnum" />
<button data-bind="click: addData">追加</button></p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Knockout.jsお試し(1)]]></title>
    <link href="http://sat-pg.com/blog/2013/06/10/knockoutjs1.html"/>
    <updated>2013-06-10T01:37:00+09:00</updated>
    <id>http://sat-pg.com/blog/2013/06/10/knockoutjs1</id>
    <content type="html"><![CDATA[<p>せっかく勉強会で概要を聞いてきたので、サンプルを動かしてみる。
<a href="http://learn.knockoutjs.com/#/?tutorial=intro">公式ページのサンプル</a>の内容をちょっとだけ変更。</p>

<h4>サンプル1</h4>

<ol>
<li>変数をko.observable()で囲うことで、監視対象にできる。</li>
<li>computedを使うことで、複数のobservableな変数を組み合わせた値を作れる。observableな変数が変更されると、computedな値も変更される。</li>
<li>applyBindingでViewModelを登録</li>
<li>data-bindを利用してDOMとViewModelの変数を関連付け</li>
<li>clickイベントと関数の紐付け。サンプルはクリックで大文字小文字を変更。</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s1">&#39;text/javascript&#39;</span> <span class="nx">src</span><span class="o">=</span><span class="s1">&#39;http://ajax.aspnetcdn.com/ajax/knockout/knockout-2.2.1.js&#39;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;DOMContentLoaded&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">flag</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">AppViewModel</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">=</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">observable</span><span class="p">(</span><span class="s2">&quot;hello&quot;</span><span class="p">);</span>    <span class="c1">// 1</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span> <span class="o">=</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">observable</span><span class="p">(</span><span class="s2">&quot;world!&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">fullName</span> <span class="o">=</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">computed</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>   <span class="c1">// 2</span>
</span><span class='line'>          <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span><span class="p">()</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">();</span>
</span><span class='line'>      <span class="p">},</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">toggleLastName</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">current</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">();</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">flag</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">(</span><span class="nx">current</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">());</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">(</span><span class="nx">current</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">());</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="nx">flag</span> <span class="o">=</span> <span class="o">!</span><span class="nx">flag</span><span class="p">;</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="c1">// Activates knockout.js</span>
</span><span class='line'>  <span class="nx">ko</span><span class="p">.</span><span class="nx">applyBindings</span><span class="p">(</span><span class="k">new</span> <span class="nx">AppViewModel</span><span class="p">());</span>   <span class="c1">// 3</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;p&gt;</span>First name: <span class="nt">&lt;input</span> <span class="na">data-bind=</span><span class="s">&quot;value: firstName&quot;</span> <span class="nt">/&gt;&lt;/p&gt;</span> <span class="c">&lt;!-- 4 --&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span>Last name: <span class="nt">&lt;input</span> <span class="na">data-bind=</span><span class="s">&quot;value: lastName&quot;</span> <span class="nt">/&gt;&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span>FULL NAME: <span class="nt">&lt;strong</span> <span class="na">data-bind=</span><span class="s">&quot;text: fullName&quot;</span><span class="nt">&gt;&lt;/strong&gt;&lt;/P&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;button</span> <span class="na">data-bind=</span><span class="s">&quot;click: toggleLastName&quot;</span><span class="nt">&gt;</span>toggle!<span class="nt">&lt;/button&gt;</span>   <span class="c">&lt;!-- 5 --&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>実行結果は↓</p>

<!-- more -->


<h4>サンプル1実行結果</h4>

<p>toggleボタンを押すと、Last nameのみでなく、FULL NAMEも同時に変わる。jQueryでやるより楽かも。</p>

<script type='text/javascript' src='http://ajax.aspnetcdn.com/ajax/knockout/knockout-2.2.1.js'></script>


<script>
window.addEventListener('DOMContentLoaded', function(){
    var flag = true;
    function AppViewModel() {
        this.firstName = ko.observable("hello");
        this.lastName = ko.observable("world!");
        this.fullName = ko.computed(function() {
            return this.firstName() + " " + this.lastName();
        }, this);

        this.toggleLastName = function() {
            var current = this.lastName();
            if (flag) {
                this.lastName(current.toUpperCase());
            } else {
                this.lastName(current.toLowerCase());
            }
            flag = !flag;
        };
    }
    // Activates knockout.js
    ko.applyBindings(new AppViewModel());
});
</script>




<p>First name: <input data-bind="value: firstName" /></p>


<p>Last name: <input data-bind="value: lastName" /></p>


<p>FULL NAME: <strong data-bind="text: fullName"></strong></P>


<p><button data-bind="click: toggleLastName">toggle!</button></p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第1回 Build Insider OFFLINEメモ]]></title>
    <link href="http://sat-pg.com/blog/2013/06/08/buildinsider.html"/>
    <updated>2013-06-08T23:45:00+09:00</updated>
    <id>http://sat-pg.com/blog/2013/06/08/buildinsider</id>
    <content type="html"><![CDATA[<p><a href="http://www.buildinsider.net/event/offline/01">第1回 Build Insider OFFLINE</a>に行ってきたので、聞いてきた話をメモ。</p>

<!-- more -->


<h2>Keynote</h2>

<p>キーノートには遅れていったので気になった言葉のみ：<a href="http://www.microsoft.com/japan/web/webmatrix/">WebMatrix</a>、<a href="http://research.microsoft.com/en-us/projects/illumiroom/">illumiroom</a>、<a href="http://re.buildinsider.net/about/biwanted.pdf">記事募集</a></p>

<hr />

<h2>JavaScript ライブラリーを使い倒そう</h2>

<p>WINGSプロジェクト 安西 剛さんの講演。</p>

<p>かつてはエンタープライズでは邪魔者扱いのJavaScriptだったが、GoogleMapでのAjax利用から、みんなが使い始め、
最近になってJavaScript天国な状況になってきた。その分、複雑化している状況。</p>

<p>今後ますますライブラリが重要ということで、6つの観点で紹介。</p>

<h4>1. 手間を省こう系</h4>

<ul>
<li><p>jQuery, prottotype.js：prototype.jsは既存オブジェクトを拡張している。jQueryはしていない。(この差が今の普及の差に繋がっている?)</p></li>
<li><p>UI系: 無数にありすぎる。利用によりできるだけコードを書かずにリッチなUIを実現する系。</p>

<ul>
<li>Chosen (セレクトボックス)</li>
<li>竹取JS (縦書き)</li>
<li>jQuery UI</li>
</ul>
</li>
<li>UIフレームワーク

<ul>
<li>Twitter Bootstrap: どちらかというとCSSフレームワーク?</li>
</ul>
</li>
</ul>


<p>これらのライブラリを使うと、ページの初期表示速度が遅くなるため、CSSスプライト等を利用して読み込むファイルを少なくしたり、JSの処理を一番下に記載して、ページ読み込み時の処理を最小限にすることが重要。</p>

<h4>2. 言語特性補う系</h4>

<ul>
<li>CoffeeScript：言語特性からくる問題を回避。スコープ、クロージャなど。</li>
<li>TypeScript</li>
</ul>


<h4>3. フレームワーク</h4>

<p>JavaScriptが大規模複雑化したことによる設計の困難さを回避。まだ乱立している状態。
ポイントはHTML/UIとの関係性をどのようにするかや、マウスやキーなどのイベントをどう拾うか。
github上ではbackbone.jsが人気の模様。(backbone/knockout/Angularは2つめの講演で詳細あり)</p>

<ul>
<li>MVCフレームワーク

<ul>
<li>backbone.js：後述</li>
</ul>
</li>
<li>MVVM

<ul>
<li>Knockout：後述</li>
</ul>
</li>
<li>CoffeeScript対応MVC

<ul>
<li>Batman.js</li>
<li>Spine.js：Ruby on Railsみたいな感じにコマンドベースで作れる</li>
</ul>
</li>
<li>ViewとModelのデータバインディング

<ul>
<li>Angular.js：後述</li>
<li>Ember.js：データバインディングに特徴あり。JSとHTMLを宣言部分で紐付け。テンプレートエンジンと組み合わせて表示。</li>
</ul>
</li>
</ul>


<h4>4. ゲーム系</h4>

<ul>
<li>enchant.js

<ul>
<li>教育に適しているのではないか。キャラクターをオブジェクトとして考えやすいため、オブジェクト思考の勉強にもよいかも。</li>
<li>イベントドリブンで、イベントは非同期処理</li>
</ul>
</li>
</ul>


<h4>5. サーバ系</h4>

<ul>
<li>Node.js

<ul>
<li>v8エンジンが入っていて速い</li>
<li>イベントルーブとノンブロッキングIOが特徴で、シングルスレッドが特徴。</li>
<li>イベントが起きてもどんどんキューに入れていって処理を行う形態。</li>
<li>同期的な処理は書きづらい。phpみたいなようなことは難しい。MySQL問い合わせなども非同期で書く必要がある。</li>
<li>Express.jsがデファクト。Webアプリケーションを作る最低限が準備されている。例外やセッションも作成可能。</li>
<li>app.js→ルーティング→ビュー(テンプレートエンジン)</li>
</ul>
</li>
</ul>


<h4>6. テスト系</h4>

<p>ウォーターフォールは、品質をあとで担保するモデル。皆、この考えがしみついている。
現在は、反応を見るため、早めに市場にリリースし、頻繁なバージョンアップが必要な時代になっており、
あとで担保するような考えかたは難しくなってきている。</p>

<p>そこで、自動テスト、テスト駆動開発、継続的インテグレーション、クロスブラウザ対応、、等々が必要で、
常にリリース可能な品質を保つよう、マインドを変えたほうがいい。品質はあとでなく、随時作りこんでいく必要がある。</p>

<p>ライブラリを利用してこれらに対応する。</p>

<ul>
<li>テスティングフレームワーク

<ul>
<li>Mocha
  BDD(振る舞い駆動開発)、TDD(テスト駆動)、、など色々できる。
  TDDはテストを書いてからメソッド実装
  BDDはユーザから見たふるまいから</li>
</ul>
</li>
<li>アサートモジュール</li>
<li>クロスブラウザ自動チェック

<ul>
<li>JSTestDriver</li>
<li>サーバプロセスを立ち上げ、各ブラウザでアクセス</li>
<li>テスト実行→各ブラウザで実行される</li>
</ul>
</li>
<li>モック、スタブ: sinon.js、レスポンスの偽装ができる</li>
<li>静的解析1 JSLint、JSHint</li>
<li>静的解析2 jscoverage: どこまで試験ができているか。</li>
</ul>


<hr />

<h2>3つのMVC系人気フレームワーク、Backbone.js／AngularJS／Knockout.js</h2>

<h4><a href="http://backbonejs.org/">Backbone.js</a></h4>

<p>LINE株式会社 開発１室 UITチーム　清水 大輔さんの講演。</p>

<ul>
<li>MV*アプリを作る手助けとなるJSライブラリ。軽量、シンプル。</li>
<li>オブジェクト思考、MVC知識が必要</li>
<li>動的要素が少ないページでは不要</li>
<li>必要なライブラリは、jQuery(Zepto, Enderでも可)、underscore.js(配列操作などのUtility)、json2.js(jsonパーサ)など。</li>
<li>構成要素は、Bacobone.Event、Model、Collection、View、Sync、Router</li>
<li>MVCの利点: DOMからビジネスロジックが分離できる、UTがやりやすい等</li>
<li>Grunt.jsというビルドツールが便利。jshint、jasminなどでのチェック、ミニファイ等を実施</li>
<li>パフォーマンス

<ul>
<li>DOM: reflow、repaintを減らす。delegate eventを利用する</li>
<li>メモリ管理: メモリリークがある。view#removeでの後処理を意識する</li>
<li>通信: localStrageをうまく利用する</li>
</ul>
</li>
</ul>


<h4><a href="http://angularjs.org/">AngularJS</a> 概説</h4>

<p>AngularJS Japan User Group 管理人の金井 健一さんの講演</p>

<ul>
<li>Google製のフルスタックMVCフレームワーク</li>
<li>{{ なみかっこで囲う書き方 }}</li>
<li>得意：CRUD系のアプリケーション、管理ページ、マイページ等</li>
<li>苦手：モバイル向け(フルスタックのため容量が多め)、ゲーム系のグラフィックの扱い</li>
<li>開発環境：YEOMAN(YO, GRUNT, BOWER)

<ul>
<li>双方向データバインディング</li>
<li>テンプレートとしてのHTML：サーバからJSONもらって組み立て)</li>
<li>再利用可能なコンポーネント：WebComponentを見すえて、独自のタグ実装が可能。実装は結構複雑</li>
<li>ビューとルーティング</li>
<li>テストとその可用性：Karma(Angular用に開発されており相性がいい)</li>
</ul>
</li>
<li>モバイルについては、ng-mobileというモジュールが追加され機能が追加された。
ただし、その分容量が増加しているため、最初の一回が遅い(100kbほど)。2回目以降はキャッシュされる。</li>
<li>UIは、AngularUIなどのAngularが用意しているライブラリの他、プラグインもある。</li>
</ul>


<h4><a href="http://knockoutjs.com/">Knockout.js</a>の概要</h4>

<p>沢渡 真雪さんの講演</p>

<ul>
<li>JavascirptアプリケーションのためのMVVMパターン。MVVMとは、ModelとViewの間にある、Viewのための振る舞いや状態を持つModel(ViewModel)。</li>
<li><a href="https://www.google.co.jp/search?q=MVVM+ugaya40&amp;oq=MVVM+ugaya40&amp;aqs=chrome.0.57j0.307j0&amp;sourceid=chrome&amp;ie=UTF-8">MVVM ugaya40で検索</a>するとわかりやすいらしい</li>
<li>単一のライブラリ(knockout.js)で、Observableと、バインディング機構のみで成り立っており軽量、シンプル。</li>
<li>ASP.NET開発チームの方が個人で開発しているため、ASP.NET MVCとともに採用されていることも多い。</li>
<li>Windows Azureポータルや、アメーバピグのスマホ版で利用</li>
<li>Observable

<ul>
<li>値を監視可能な形にラップする仕組み。</li>
<li>ko.observable：var a = 1 は監視できないが、var v = ko.observable(1)とすると、v()で値取得(getter)、v(value)で値代入(setter)とすることができる。</li>
<li>subscribeメソッドで監視して、変更時にコールバックが可能。v.subscribe(function(newv) { &#8230; }, this);</li>
<li>ko.observableArrayを使うことで、同様の監視を配列でも可能。push、popなどもあり。</li>
<li>ko.computed：observable同様の監視可能な形。observableの変更も取得可能。普通の変数の値を変えても特に変化なし。</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">value1</span> <span class="o">=</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">observable</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="nx">value2</span> <span class="o">=</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">observable</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="nx">computed</span> <span class="o">=</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">computed</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">vaulue1</span><span class="p">()</span> <span class="o">+</span> <span class="nx">value2</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">computed</span><span class="p">();</span>
</span><span class='line'><span class="o">-&gt;</span><span class="mi">3</span>
</span><span class='line'><span class="nx">value2</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class='line'><span class="nx">computed</span><span class="p">();</span>
</span><span class='line'><span class="o">-&gt;</span><span class="mi">11</span>
</span><span class='line'><span class="nx">computed</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">newValue</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span><span class="nx">newValue</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">value1</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class='line'><span class="o">-&gt;</span><span class="err">アラートが出るはず</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>バインディング：監視可能なオブジェクトを、HTMLのDOMにひもづける機能</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">data-bind=</span><span class="s">&quot;value: value1&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">data-bind=</span><span class="s">&quot;value: value2&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;span</span> <span class="na">data-bind=</span><span class="s">&quot;value: computed&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>最後にJavaScript側でバインディグを適用する: applyBindings

<ul>
<li>値を入力(value、text、html)、属性オンオフ(CSS、style)、イベント(click、event)などが可能</li>
</ul>
</li>
</ul>


<hr />

<h2>リアルタイム Web 最前線 ～ Socket.IO ＆ SignalR 徹底解説</h2>

<p>ソーシャルグリッド株式会社 取締役CTO 芝村 達郎さんの講演</p>

<ul>
<li>リアルタイム・ウェブ：クライアント・サーバ間での双方向通信が特徴</li>
<li>サーバ→クライアントへのプッシュ通信。WebSocket、Server-Sent Event等</li>
<li>クライアント→サーバはAJAXなどを利用して実現</li>
<li>最近はWebSocketやSignalRが一般的。複数の通信方式をラッピングしている。</li>
</ul>


<h4>Socket.IOとSignalR(比較まとめ)</h4>

<table>
<thead>
<tr>
<th></th>
<th>Socket.IO</th>
<th>SignalR</th>
</tr>
</thead>
<tbody>
<tr>
<td>基本</td>
<td>Node.js上で動作する。Node.jsなのでシングルスレッド。</td>
<td>ASP.NET上のライブラリ。マルチスレッド</td>
</tr>
<tr>
<td>対応トランスポート</td>
<td>WebSocket、Adobe Flash Socket、AJAX long polling、AJAX multipart streaming、Forever Iframe(ほぼIE専用)、JSONP Polling(クロスドメインで利用可能)</td>
<td>WebSocket、Server-Sent Event、Forever Frame、Long Polling</td>
</tr>
<tr>
<td>クライアント</td>
<td>JavaScriptのみでなく、Java、Objective-C、C/C++、PHP、.NET等々、多数</td>
<td>JavaScript(jQuery依存)、.NET Framework4, 4.5、Windows Storeアプリ、WinPhone8、Silverlight、Xamarin.iOS/Xamarin.Android</td>
</tr>
<tr>
<td>向いているOS</td>
<td>Mac/Linux系</td>
<td>Windows系</td>
</tr>
<tr>
<td>パフォーマンス</td>
<td>シングルスレッド + クラスタ化であげる</td>
<td>マルチスレッド</td>
</tr>
<tr>
<td>設計思想</td>
<td>イベントベース</td>
<td>リモートプロシジャーコール</td>
</tr>
</tbody>
</table>


<!--
* Socket.IO
    - Node.js上で動作する
    - 対応しているトランスポート：WebSocket、Adobe Flash Socket、AJAX long polling、AJAX multipart streaming、Forever Iframe(ほぼIE専用)、JSONP Polling(クロスドメインで利用可能)
    - Windowsでは、WebMatrixのNode.jsテンプレートを使うと簡単。IISで動く独自のNodeを準備している。
    - Macでは、好きなエディタでどうぞ。
    - クライアントは、JavaScriptのみでなく、Java、Objective-C、C/C++、PHP、.NET等々、多数用意されている。
* SingnalR
    - ASP.NET上のライブラリ。マルチスレッド、Taskベースの非同期処理。シングルスレッドのNode.jsとはマルチコア時に速度差が出る
    - 対応しているトランスポート：WebSocket、Server-Sent Event、Forever Frame、Long Polling
    - Windowsの.NETで動作。
    - クライアントは、JavaScript(jQuery依存)、.NET Framework4, 4.5、Windows Storeアプリ、WinPhone8、Silverlight、Xamarin.iOS/Xamarin.Android
* 比較
    - パフォーマンス
        - Socket.IO: シングルスレッド + クラスタ化
        - SignalR: マルチスレッド
    - 設計思想
        - Socket.IO: イベントベース
        - SignalR: リモートプロシジャーコール
* WinならSignalR、Mac、LinuxならSocket.IOでいいんじゃ。
-->


<h4>スケールアウト</h4>

<ul>
<li>コネクションが貼りっぱなしであり、リソースを消費するため、1台のサーバで処理できるクライアント数は決まる。</li>
<li>単純に台数増やすだけではスケールしない。クライアントがどのサーバに繋っているかは他のサーバからは確認できない。WebSocketを使うAPの制約。メッセージング用サーバを用意して中継してあげる必要がある。</li>
<li>共通：Pub/Subメッセージングを利用する(RedisやWindowsAzureサービスバス)。  ※(?このへんよくわからず)</li>
<li>Socket.IO：接続情報をメモリでなく、外部ストレージに保存</li>
<li>SignalR：接続情報は共有せず、メッセージングに投げる(unique idを使って投げるのみ)</li>
</ul>


<h4>その他</h4>

<ul>
<li>双方向通信は必須ではない。必要なときにサーバからプッシュできればいい。<a href="http://pusher.com/">PUSHER</a>(プッシュするだけのサービス)がなりたつのでサーバからのプッシュの需要はあるんではないか。</li>
<li><p>通信頻度を下げる。underscore.jsのthrottle/debounceを使うことで、指定された秒数に最大1回実行/呼び出し後、指定された秒数がたったら呼び出しされる。</p></li>
<li><p>リアルタイム性を活かすアプリはあまり浮かばない(チャットアプリはもう飽きた)</p></li>
<li>プッシュ+クライアント同時接続を活かしたアプリ(チャット以外)を作ればいい。</li>
<li>スケールアウトは難しい。SignalRはメモリリーク解消に長い時間悩まされた。</li>
<li>今後は複数人でのリアルタイムコラボアプリに期待</li>
<li>センサーと同期して入退室管理とかもいいかも</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第39回html5とか勉強会+日本Androidの会5月定例]]></title>
    <link href="http://sat-pg.com/blog/2013/05/28/html5.html"/>
    <updated>2013-05-28T18:58:00+09:00</updated>
    <id>http://sat-pg.com/blog/2013/05/28/html5</id>
    <content type="html"><![CDATA[<p>第39回html5とか勉強会+日本Androidの会5月定例のでメモ</p>

<!-- more -->


<hr />

<h2>最近のHTML5はどうなっているのか</h2>

<p>html5jの白石俊平さんの講演。</p>

<p>「Android開発はよく知っているけど、Web技術の最新トレンドとかはあんまり・・」という方向けの、 最近のHTML5界隈がどう進化しているかを簡潔なおさらいとのこと。</p>

<h4>なぜHTML5か?</h4>

<ul>
<li>HTML5はマルチプラットフォームやマルチデバイスに対応しやすい</li>
<li>技術的な成熟-> 7つの○○ウェブで表現</li>
</ul>


<h4>1. オフラインウェブ: 地下鉄、飛行機でも観ることができる。</h4>

<ul>
<li>Web Storage</li>
<li>Indexed Database API</li>
<li>File API</li>
</ul>


<h4>2. リアルタイムウェブ</h4>

<ul>
<li>WebSocket</li>
<li>ServerSent-Event(Commetの実装)</li>
<li>WebRTC(ブラウザtoブラウザ) ->ChromeとFirefoxで疎通した</li>
</ul>


<h4>3. レスポンシブウェブ</h4>

<ul>
<li>1枚のHTMLで複数スクリーンに対応</li>
<li>CSSメディアクエリとかとか</li>
</ul>


<h4>4. セマンティックウェブ</h4>

<ul>
<li>エンジニアによる意図を持たせたマークアップが可能になる</li>
<li>検索エンジンが読み取ることができるので、Web全体がデータベースになる</li>
<li>HTML5 Semantic Elements</li>
<li>HTML5 Microdata</li>
<li>RDF/FDFa/RDFa Lite</li>
</ul>


<h4>5. スピーディウェブ</h4>

<ul>
<li>リクエスト1回→レスポンス1回の構造を変化させる(SPDY、HTTP2.0、オフライン)</li>
</ul>


<h4>6.プラットフォームウェブ</h4>

<ul>
<li>Tizen</li>
<li>Chrome OS</li>
<li>WinOS、、</li>
</ul>


<h4>7.インプレッシブ(感動的な)ウェブ</h4>

<ul>
<li>3Dの空間をいったりきたり</li>
<li>WebGL</li>
<li>Canvas</li>
<li>SVG</li>
<li>WebGL</li>
<li>WebAudioAPI</li>
</ul>


<hr />

<h2>AndroidとChromeの統合について</h2>

<p>日本Androidの会の丸山先生の講演。</p>

<p><a href="https://docs.google.com/file/d/0B04ol8GVySUuajVQTGxFbF9ibkk/edit">スライド</a></p>

<h4>「Webアプリ」の変化</h4>

<ul>
<li>サーバで作ってクライアントに送り出す、が普通だった</li>
<li>ANdroidアプリの多くが単体で動くアプリ。サーバサイドとの接点が少なかった</li>
<li>サーバサイドとHTML5を結合すると新しいものが生まれるのではないか。</li>
<li>クライアントのデバイスの処理能力が大きくなりはじめた。

<ul>
<li>PCよりクライアントがはるかにリッチ(センサ系)</li>
</ul>
</li>
<li>サーバ側はビジネスロジックに専念して、クライアント側でプレゼンテーション層(ViewとController)を実現することで、サーバの負荷低減にも繋がる。</li>
</ul>


<!--
    * Packagedd Web App
        - ChromeとかのApp
        - ネイティブと同等の機能を持つ。デバイス、OS、HWに依存しない
        - Offline enabled by default
        - cloud enabled by default
        - デバイスのHW、OSリソースへのアクセス
        - Packageの形であぷり配布
        - セキュリティポリシーも担保
    * サーバとクライアントの役割の見直し
        - PCよりクライアントがはるかにリッチ(センサ系)
        - サーバ負荷の増加
        - プログラムとViewの分離の難しさ
            - 全てがサーバ側でこんとろーるされているから
        - 8coreAndroidの始まり(4c + 4c)
        - Thin Server Architecture(TSA) 今日のWebアプリケーションへの反発
        - サーバ側はビジネスロジックに専念
        - サーバはDBとロジック
        - クライアントはviewとcontroller
        - プレゼンテーション層を全部クライアント側でやる
        - サーバの負荷が減る
    -->


<h4>AndroidとChromeの統合</h4>

<ul>
<li>今年何かが起こるかもしれない(?)</li>
<li>Android5とか、Chrome29とか</li>
</ul>


<!--
* Nexus7でChrome入れた。3月にChrome25出た
* HTML TestのおかげでHTML5対応が進んだ
* 今後は同じバージョンで出ることに
* ChromeOSで、デバイスに触るAPIが非常に多い
* 第3勢力は??
* ChromeのパッケージAPpをAndroidで動くように
* Androidはpackegeappの最大のプラットフォームになるだろう
* ChromeへDARTを載せるだろう
#### いつ合流? わからん
* Android5
* Chrome29

次のOSがキモかもね。
-->


<h4>マーケットの統合</h4>

<ul>
<li>最終的には統合されるだろう(Packaged Web Appとして)</li>
<li>ここで販売されるアプリは、デバイスだけでなく、OSも関係なく動く</li>
</ul>


<!--
#### Chrome Packaged App の開発
* ブラウザ上からランタイムへ
-->


<h4>Andorid > iOS</h4>

<ul>
<li>売り上げは3〜5倍の差</li>
<li>アプリ開発者は国内だけじゃなく、世界に出ることを考えるべき</li>
<li>日本の開発者は単なるオフラインでなくクラウドも使うべき</li>
</ul>


<hr />

<h2>ハイブリッドアプリの設計</h2>

<p>クックパッドの日高さんの講演。</p>

<!--
* メリデリ、ゲーム、ソーシャルゲーム、コードの話はしない
* 端末のスペックあがった →webviewでも許せる速さ
* HTML5決まってきた! →ブラウザ共通化
* iOS審査緩くなってきた →独自UIやりやすい
* AndroidのOS分布も変わってきた 4.2増えてきた
-->


<h4>ハイブリッドアプリの利点</h4>

<ul>
<li>HTML5を活かしたアプリ</li>
<li>公式マーケット配布できる</li>
<li>複数プラットフォーム対応しやすいメリット</li>
</ul>


<h4>ハイブリドアプリのタイプ</h4>

<ul>
<li>タイプ1: WebViewをラッピング1

<ul>
<li>包むだけ</li>
<li>HTMLはサーバに置く</li>
<li>Webアプリをそのまま置く</li>
<li>jsonじゃなくデータ量が多い</li>
</ul>
</li>
<li>タイプ2: webviewをラッピング2

<ul>
<li>1と違いHTMLはアプリに埋め込む</li>
<li>サーバとはAPI通信</li>
<li>ローカルでもだいたい動く。アプリの実装の変わりにHTML5使う</li>
</ul>
</li>
<li>タイプ3: 一部の画面でWebView。ピグトークはこれ

<ul>
<li>基本ネイティブ。</li>
<li>WebViewを利用するメリットのあるところは使う
クックパッドは1+3</li>
</ul>
</li>
</ul>


<p>とりあずHTMLで、ではなく、どちらでやったほうが価値(品質面・コスト面・運用面)がある画面なのか</p>

<h4>Webviewが適さないもの</h4>

<ul>
<li>リスト・ギャラリー画面

<ul>
<li>Nativeのリストが持つ再利用・画像キャッシュ、開放などのメリットが大きい</li>
<li>HTMLだとDomがどんどん増えていく。メモリ足りんくなる</li>
</ul>
</li>
<li>起動時の画面</li>
</ul>


<h4>webviewが適しているもの</h4>

<ul>
<li>詳細画面などのコンテンツ</li>
<li>レイアウト能力はNativeよりも高い。回り込み。枠付け、リンク挿入とか</li>
<li>更新されているくコンテンツとか</li>
</ul>


<h4>実装例</h4>

<ul>
<li>WebViewの進む・戻る遷移と、Nativeの画面遷移の管理の問題が起きやすい。</li>
<li>Webviewでのリンク遷移はさせないほうがいい or
遷移はWebviewで行い、Native部分はダイアログ管理</li>
</ul>


<!--
#### 実装例2
* 長押しの処理。フォーカスの管理とかはJSでやって、Nativeに通知
* Call: Mail: は使いたい
* Coookiieでログイン状態を連動させる
-->


<h4>忘れがちな違い</h4>

<ul>
<li>HTMLは画面毎に通信が発生するが、ネイティブならばデータを保持しておいてあとから展開とか、いろいろできる。</li>
</ul>


<h4>cookpadは何故ハイブリッドか</h4>

<ul>
<li>基本、コンテンツはWeb上にあり、ローカルで管理するものが少ない。</li>
<li>更新が多い。リアルタイム性も必要</li>
<li>A/Bテスト等で仮説・検証が行われている</li>
<li>特定の機能を提供するよりは、総合アプリ</li>
</ul>


<h4>ローカルでやってること</h4>

<ul>
<li>アカウント管理</li>
<li>ダイアログ、API通信</li>
<li>検索候補、音声検索</li>
</ul>


<hr />

<h2>ハイブリットソーシャルゲームの現場</h2>

<p>株式会社ポケラボの鈴木さんと前田さんの講演</p>

<!--
### 概要
* 200名
* GREE(プラットフォーム技術)
* SEGA(コンソール技術) 
* aeriaGames(北米. ドイツとかで売れてる。南国で1位)
* GROSS。Androidで悪い
-->


<h4>なぜハイブリッドか?</h4>

<ul>
<li>Webが最終的には勝つだろう! (iアプリ vs モバゲーグリー の結果などからも)</li>
<li>Flash作ってたのでネイティブが難しい</li>
<li>今はCreate.JS使ってる</li>
</ul>


<h3>今どうなの?</h3>

<ul>
<li>運用が楽。ios+androidできる</li>
<li>ネイティブ-> 映画。ソーシャル-> TV番組みたいな感覚のため、更新多い部分でネイティブはつらい</li>
<li>WebViewは遅いか?

<ul>
<li>適材適所で使ってやればいい。アニメがすくないとことか。</li>
<li>cssアニメ辛いところはCreateJSでやってる</li>
<li>通信はキャッシュで1回しかDLしないようにする。</li>
<li>WebViewが重いのでAndroid版でリリースできていない</li>
</ul>
</li>
</ul>


<!--
### Androidで目指すところ
* よりはやく、かいてきに、楽しんでもらう
* ハイブリッド・固定メニュー、高速アニメ、ユーザ連携

* ヘッダフッタの固定メニュー
iScroll->遅い
ヘッダフッタ用のコマンド用意。
JSONを解釈してネイティブでViewに変換してあげる
&#8211;>


<ul>
<li>高速アニメーションはライブラリ作って対応。</li>
<li>Flash->HTML5(JS)->Nativeの2段階変換をしている。</li>
<li>CreateJSの3倍のフレームレートが出る</li>
</ul>


<!--
* iOSとのUUID連携
AndroidのUUIDは使い辛い。サーバ側で作る。
AndroidではアンインスールされるとUUIDも消えちゃう。
別になってしまって連携できない。
ポケラボネットワークシステム→1uuid / 1台
コラボかのう。
-->


<hr />

<h2>「パネルディスカッション」</h2>

<h4>WebアプリケーションのプラットフォームとしてAndroidやモバイルデバイスのこれから</h4>

<ul>
<li><p>ブラウザでChromeのランタイムが動くようにしてる。
Packaged Web Appの流れが今年の流れになりそう。</p></li>
<li><p>Webアップはデバイスの機能を使い切れない。
今はインストール型にだけ特権を与えるかたちになりつつある。
今後は、インストール型で使えるAPI(Firefoxは標準、Chrome独自)と、
ブラウザベースのものの2つにわかれていくだろう。
ブラウザベースは標準化が追いつかない。</p></li>
</ul>


<h4>JS性能、ライブラリ、オフライン、リアルタイム動向</h4>

<ul>
<li>クライアントで処理するなら、好きなほうでやればいい。</li>
<li>サーバの処理を減らすのが基本的な流れだろう。</li>
<li>チップレベルでブラウザレイヤが最適化されないとつらい。</li>
<li>チューンナップが終わったらネイティブなくてもいいかも。</li>
<li>webアプリにできないこと、課題はまだまだある。ただ、どうにかしようと考えている人がいっぱいいる。
解決されないわけない!!</li>
<li>例えばasm.js→2倍くらいの速さ動く。</li>
<li>今後のアップルの動向も気になる。</li>
</ul>


<!--
#### 新野淳一（モデレーター）、丸山不二夫、佐々木陽、白石俊平

最近: GoogleIO

丸山さん: AndroidとCHrome統合

佐々木さん: GalaxyS4、超速い。アプリよくうごくよ。今のChromeが、2、3年後には、モバイルで体験できそう。

白石さん: GoogleIO。Chrome+HTML5セッション出た。多かったがめあたらしいのあんまなし。
パフォーマンス重視が多い。クロームのPackagedwebのver2。とWebコンポーネント。

新野さん: PublicKeyの人。

### WebアプリケーションのプラットフォームとしてAndroidやモバイルデバイスのこれから
Androidの5T対応は遅れてた。4まで。まだ半分くらい。
Chromeのポーティング進めてる。
ブラウザからChromeRuntime動くようにしてる。
Packaged Web Appの流れが今年の流れになりそう。

PhoneGapみたいなの作ってる。RuntimeEngine作って、jsでラップしてネイティブで売る。
iOS、Androidで移植→Tizen。楽。OpenGL使ってても。
これまでは遅かったからネイティブ使ってた。
最近は早くなってきたから移行? でも適材適所でしょ。
どんくらい遅い? 今は5だとCHromeくらいしかできん。リッチなやつは。
それいがいは5でもいいかもね。

2、3年まえからわかってたこと。Webアップはデバイスの機能を使い切れん。
今はインストール型にだけ特権を与えるかたちになりつつある。
2つにわかれていくだろう。
インストール型で使えるAPI(Firefoxは標準、Chrome独自)
HTMLは標準が必要。ブラウザベースは標準化が追いつかない。


### HTML5のCanvasやSVGに対して、OpenGLやネイティブAPの動向は
性能は大きな課題。
業務系ならHTML5でもけっこういける。
3Dまわりの動向は??

リッチはWebGL。
Canvas使わないのは回転拡大縮小ではつらい。
GPUで書けるから全然違う。
iPhone、webgl動かん。配信手段なし。独自のランタイム作った。WebViewはみんな作ってない。
HTML5+ネイティブエンジン(V8みたいなのを作るイメージ)→配布
古い端末サポートはつらい。結局C++で書いたほうがいい。
OpenGLで書くのがいい。Unityとかでもいい。
↑ゲームの世界の話。

ネイティブのUXになれちゃってるので、そういう要望もある。

Canvasについてどう思ってる??
一般的なWebサイトはそんなに重くないでしょ。
Canvasは最終手段。CSS3とかDOMでできるでしょ。

GPUにのると、100倍くらい速い。
Canvasの書きかたがよくわからん。3Dの属性をCSSに付けるとよいらしい。
WEB-RTCで画像編集→ GLFxjsは使える。


### Webアプリ=/ ハイブリッドAPの進化とは
#### JS性能、ライブラリ、オフライン、リアルタイム動向
* エンタープライズとWebの世界->いんぱくとを与えてる
* クライアントで処理するなら、好きなほうでやればいい。
* サーバの処理を減らすのが基本的な流れだろう。

* チップレベルでブラウザレイヤが最適化されないとつらい。
* Tizenとかは始めている。
* Galaxyではめちゃくちゃよく動く
* チューンナップが終わったらネイティブなくてもいいかも。

* webアップにできないこと、課題はまだまだある。
* どうにかしようと考えている人がいっぱいいる。
* 解決されないわけない!!
* asm.js->2倍くらい!の速さ動く。
* アップルの動向も気になる。

* Packaged Web App押し!!!!

6/26 UDX

&#8211;>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PhoneGap準備]]></title>
    <link href="http://sat-pg.com/blog/2013/05/25/phonegap1.html"/>
    <updated>2013-05-25T22:46:00+09:00</updated>
    <id>http://sat-pg.com/blog/2013/05/25/phonegap1</id>
    <content type="html"><![CDATA[<p>PhoneGapを使う初めの一歩。ここではiOS版を想定して、xcodeで実装する例を記載。</p>

<p>※PhoneGap関連は、Mac OS X10.8.2 xcode4.6.2、phonegap2.7.0で実行。</p>

<!-- more -->


<ol>
<li><p><a href="http://phonegap.com/">公式サイト</a>から最新のファイルをダウンロード</p></li>
<li><p>解凍したファイルを任意の場所に置く</p></li>
<li><p>置いたフォルダ内の、<code>/lib/ios/bin</code>に移動する</p></li>
<li><p><code>./create プロジェクトへのパス プロジェクトのパッケージ名 プロジェクト名</code>  と実行する。<br/>
 (今回は、<code>./create ~/work/hello com.sat-pg.hello hello</code> を実行)</p></li>
<li><p>指定したパス(~/work/hellophonegap)に、プロジェクト(hellophonegap)が出来ているので、中にあるhello.xcodeprojをダブルクリックすると、xcodeが起動します。</p></li>
<li><p>起動すると、以下の画像のようなファイル構造になっています。wwwフォルダ以下が、実際にphonegapのアプリから見えるファイルで、index.htmlが起動時に呼び出されます。(起動時呼び出しのファイル変更はconfix.xmlの、contentタグを修正すればよい)</p></li>
</ol>


<p><img src="http://sat-pg.com/images/blog/phonegap1_tree.png" alt="起動時" /></p>

<p>何も変更せず、ビルドして実行すると、以下のように表示されます。</p>

<p><img src="http://sat-pg.com/images/blog/phonegap1_build.png" alt="初回ビルド" /></p>

<ul>
<li>index.htmlに必要な処理
初期化処理として以下のような処理が必要なようです。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;cordova-2.2.0.js&quot;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;js/index.js&quot;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="nx">app</span><span class="p">.</span><span class="nx">initialize</span><span class="p">();</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>各ページで必要な処理
デバイスの準備待ちとして、deviceReadyのコールバック内に処理を書く必要があるようです。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">head</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;cordova-x.x.x.js&quot;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="kd">function</span> <span class="nx">onLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span>
</span><span class='line'>      <span class="err">‘</span><span class="nx">deviceready</span><span class="err">’</span><span class="p">,</span> <span class="nx">onDeviceReady</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">onDeviceReady</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// ここに処理を書く</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/head&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">body</span> <span class="nx">onload</span><span class="o">=</span><span class="err">”</span><span class="nx">onLoad</span><span class="p">();</span><span class="err">”</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="err">・・・</span>
</span></code></pre></td></tr></table></div></figure>


<h3>参考</h3>

<p><a href="http://docs.phonegap.com/en/2.7.0/guide_getting-started_ios_index.md.html#Getting%20Started%20with%20iOS">公式のiOS説明ページ</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SVCのテスト]]></title>
    <link href="http://sat-pg.com/blog/2013/05/19/svctest.html"/>
    <updated>2013-05-19T11:35:00+09:00</updated>
    <id>http://sat-pg.com/blog/2013/05/19/svctest</id>
    <content type="html"><![CDATA[<p>SVCのサンプルを記載します。</p>

<ul>
<li><a href="#base">基本図形</a></li>
<li><a href="#gra">グラデーション</a></li>
<li><a href="#poly">線、ポリゴン</a></li>
<li><a href="#text">テキスト</a></li>
<li><a href="#animation">アニメーション</a></li>
<li><a href="#sanko">参考</a></li>
</ul>


<!-- more -->


<h2><a name="base"></a>基本図形</h2>

<ul>
<li>rect: 長方形</li>
<li>line: 直線</li>
<li>circle: 円</li>
<li>ellipse: 楕円</li>
</ul>


<h4>サンプル</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;svg</span> <span class="na">width=</span><span class="s">&quot;600&quot;</span> <span class="na">height=</span><span class="s">&quot;300&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;rect</span> <span class="na">x=</span><span class="s">&quot;100&quot;</span> <span class="na">y=</span><span class="s">&quot;10&quot;</span> <span class="na">rx=</span><span class="s">&quot;20&quot;</span> <span class="na">ry=</span><span class="s">&quot;10&quot;</span> <span class="na">width=</span><span class="s">&quot;400&quot;</span> <span class="na">height=</span><span class="s">&quot;200&quot;</span> <span class="na">fill=</span><span class="s">&quot;lightblue&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;line</span> <span class="na">x1=</span><span class="s">&quot;100&quot;</span> <span class="na">y1=</span><span class="s">&quot;50&quot;</span> <span class="na">x2=</span><span class="s">&quot;400&quot;</span> <span class="na">y2=</span><span class="s">&quot;200&quot;</span> <span class="na">stroke-width=</span><span class="s">&quot;20&quot;</span> <span class="na">stroke=</span><span class="s">&quot;blue&quot;</span> <span class="na">stroke-linecap=</span><span class="s">&quot;round&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;circle</span> <span class="na">cx=</span><span class="s">&quot;250&quot;</span> <span class="na">cy=</span><span class="s">&quot;150&quot;</span> <span class="na">r=</span><span class="s">&quot;50&quot;</span> <span class="na">fill=</span><span class="s">&quot;red&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ellipse</span> <span class="na">cx=</span><span class="s">&quot;450&quot;</span> <span class="na">cy=</span><span class="s">&quot;50&quot;</span> <span class="na">rx=</span><span class="s">&quot;50&quot;</span> <span class="na">ry=</span><span class="s">&quot;20&quot;</span> <span class="na">fill=</span><span class="s">&quot;green&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/svg&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<dl>
    <svg width="600" height="300">
        <rect x="100" y="10" rx="20" ry="10" width="400" height="200" fill="lightblue" />
        <line x1="100" y1="50" x2="400" y2="200" stroke-width="20" stroke="blue" stroke-linecap="round" />
        <circle cx="250" cy="150" r="50" fill="red" />
        <ellipse cx="450" cy="50" rx="50" ry="20" fill="green" />
    </svg>
</dl>


<h2><a name="gra"></a>グラデーション</h2>

<ul>
<li>defsタグの中で設定の定義ができる。</li>
<li>linearGradient: 直線上のグラデーション</li>
<li>radialGradient: 円形のグラデーション</li>
</ul>


<h4>サンプル</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;svg</span> <span class="na">width=</span><span class="s">&quot;400&quot;</span> <span class="na">height=</span><span class="s">&quot;200&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;defs&gt;</span>
</span><span class='line'>      <span class="nt">&lt;linearGradient</span> <span class="na">id=</span><span class="s">&quot;g1&quot;</span> <span class="na">x1=</span><span class="s">&quot;0&quot;</span> <span class="na">y1=</span><span class="s">&quot;0&quot;</span> <span class="na">x2=</span><span class="s">&quot;1&quot;</span> <span class="na">y2=</span><span class="s">&quot;0.5&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;stop</span> <span class="na">offset=</span><span class="s">&quot;0&quot;</span> <span class="na">stop-color=</span><span class="s">&quot;skyblue&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>          <span class="nt">&lt;stop</span> <span class="na">offset=</span><span class="s">&quot;0.5&quot;</span> <span class="na">stop-color=</span><span class="s">&quot;pink&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>          <span class="nt">&lt;stop</span> <span class="na">offset=</span><span class="s">&quot;1&quot;</span> <span class="na">stop-color=</span><span class="s">&quot;yellow&quot;</span> <span class="na">stop-opacity=</span><span class="s">&quot;0.5&quot;</span> <span class="nt">/&gt;</span>                 
</span><span class='line'>      <span class="nt">&lt;/linearGradient&gt;</span>
</span><span class='line'>      <span class="nt">&lt;radialGradient</span> <span class="na">id=</span><span class="s">&quot;g2&quot;</span> <span class="na">cx=</span><span class="s">&quot;0.5&quot;</span> <span class="na">cy=</span><span class="s">&quot;0.5&quot;</span> <span class="na">r=</span><span class="s">&quot;0.5&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;stop</span> <span class="na">offset=</span><span class="s">&quot;0&quot;</span> <span class="na">stop-color=</span><span class="s">&quot;lightgreen&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>          <span class="nt">&lt;stop</span> <span class="na">offset=</span><span class="s">&quot;0.8&quot;</span> <span class="na">stop-color=</span><span class="s">&quot;pink&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>          <span class="nt">&lt;stop</span> <span class="na">offset=</span><span class="s">&quot;1&quot;</span> <span class="na">stop-color=</span><span class="s">&quot;yellow&quot;</span> <span class="na">stop-opacity=</span><span class="s">&quot;0.5&quot;</span> <span class="nt">/&gt;</span>                 
</span><span class='line'>      <span class="nt">&lt;/radialGradient&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/defs&gt;</span>
</span><span class='line'>  <span class="nt">&lt;rect</span> <span class="na">width=</span><span class="s">&quot;200&quot;</span> <span class="na">height=</span><span class="s">&quot;200&quot;</span> <span class="na">fill=</span><span class="s">&quot;url(#g1)&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;rect</span> <span class="na">x=</span><span class="s">&quot;200&quot;</span> <span class="na">width=</span><span class="s">&quot;400&quot;</span> <span class="na">height=</span><span class="s">&quot;200&quot;</span> <span class="na">fill=</span><span class="s">&quot;url(#g2)&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/svg&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<dl>
    <svg width="600" height="250">
        <defs>
            <linearGradient id="g1" x1="0" y1="0" x2="1" y2="0.5">
                <stop offset="0" stop-color="skyblue" />
                <stop offset="0.5" stop-color="pink" />
                <stop offset="1" stop-color="yellow" stop-opacity="0.5" />                  
            </linearGradient>
            <radialGradient id="g2" cx="0.5" cy="0.5" r="0.5">
                <stop offset="0" stop-color="lightgreen" />
                <stop offset="0.8" stop-color="pink" />
                <stop offset="1" stop-color="yellow" stop-opacity="0.5" />                  
            </radialGradient>
        </defs>
        <rect width="300" height="200" fill="url(#g1)" />
        <rect x="300" width="300" height="200" fill="url(#g2)" />
    </svg>
</dl>


<h2><a name="poly"></a>線、ポリゴン</h2>

<ul>
<li>polygonタグで図形描画: 座標を複数記入すると繋いでくれる</li>
<li>pathタグで直線

<ul>
<li>M: 移動する座標を記載</li>
<li>l: 線を引く座標を記載(?)</li>
<li>h: 水平方向に線を引く</li>
<li>v: 垂直方向に線を引く</li>
</ul>
</li>
</ul>


<h4>サンプル</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;svg</span> <span class="na">width=</span><span class="s">&quot;600&quot;</span> <span class="na">height=</span><span class="s">&quot;300&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;polygon</span> <span class="na">points=</span><span class="s">&quot;100 50 250 100 50 100 100 0&quot;</span> <span class="na">stroke=</span><span class="s">&quot;black&quot;</span> <span class="na">fill=</span><span class="s">&quot;url(#g1)&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="c">&lt;!-- (100,150) から x方向に50、y方向に50の線を引き、水平方向に50、</span>
</span><span class='line'><span class="c">      垂直方向に30、水平方向に-30の線を引く   --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;path</span> <span class="na">d=</span><span class="s">&quot;M100 150 l50 50 h50 v30 h-30&quot;</span> <span class="na">stroke=</span><span class="s">&quot;black&quot;</span> <span class="na">fill=</span><span class="s">&quot;none&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/svg&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<dl>
    <svg width="600" height="300">
        <polygon points="100 50 250 100 50 100 100 0" stroke="black" fill="url(#g1)" />
        <path d="M100 150 l50 50 h50 v30 h-30" stroke="black" fill="none" />
    </svg>
</dl>


<h2><a name="text"></a>テキスト</h2>

<ul>
<li>テキストタグで記載</li>
<li>rotateで傾けたりも可能</li>
</ul>


<h4>サンプル</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;svg</span> <span class="na">width=</span><span class="s">&quot;500&quot;</span> <span class="na">height=</span><span class="s">&quot;300&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;rect</span> <span class="na">width=</span><span class="s">&quot;500&quot;</span> <span class="na">height=</span><span class="s">&quot;300&quot;</span> <span class="na">fill=</span><span class="s">&quot;black&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;text</span> <span class="na">x=</span><span class="s">&quot;100&quot;</span> <span class="na">y=</span><span class="s">&quot;100&quot;</span> <span class="na">font-size=</span><span class="s">&quot;96&quot;</span> <span class="na">fill=</span><span class="s">&quot;lightpink&quot;</span> <span class="na">stroke=</span><span class="s">&quot;blue&quot;</span>
</span><span class='line'>      <span class="na">stroke-width=</span><span class="s">&quot;3&quot;</span><span class="nt">&gt;</span>Hello!<span class="nt">&lt;/text&gt;</span>
</span><span class='line'>  <span class="nt">&lt;text</span> <span class="na">x=</span><span class="s">&quot;100&quot;</span> <span class="na">y=</span><span class="s">&quot;200&quot;</span> <span class="na">font-size=</span><span class="s">&quot;96&quot;</span> <span class="na">fill=</span><span class="s">&quot;lightblue&quot;</span> <span class="na">stroke=</span><span class="s">&quot;blue&quot;</span>
</span><span class='line'>      <span class="na">stroke-width=</span><span class="s">&quot;3&quot;</span> <span class="na">rotate=</span><span class="s">&quot;30&quot;</span><span class="nt">&gt;</span>World!!<span class="nt">&lt;/text&gt;</span>  
</span><span class='line'><span class="nt">&lt;/svg&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<dl>
    <svg width="500" height="300">
        <rect width="500" height="300" fill="black" />
        <text x="100" y="100" font-size="96" fill="lightpink" stroke="blue"
            stroke-width="3">Hello!</text>
        <text x="100" y="200" font-size="96" fill="lightblue" stroke="blue" 
            stroke-width="3" rotate="30">World!!</text> 
    </svg>
</dl>


<h2><a name="animation"></a>アニメーション</h2>

<ul>
<li>図形タグの中にanimateタグを追記して作成する</li>
<li>属性を指定して、fromとtoで値を指定し、durで時間を指定</li>
<li>repeatCountで回数を指定。無限回はindefinite</li>
</ul>


<h4>サンプル</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;svg</span> <span class="na">width=</span><span class="s">&quot;500&quot;</span> <span class="na">height=</span><span class="s">&quot;250&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;rect</span> <span class="na">width=</span><span class="s">&quot;10&quot;</span> <span class="na">height=</span><span class="s">&quot;10&quot;</span> <span class="na">fill=</span><span class="s">&quot;url(#g1)&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;animate</span> <span class="na">attributeName=</span><span class="s">&quot;width&quot;</span> <span class="na">from=</span><span class="s">&quot;10&quot;</span> <span class="na">to=</span><span class="s">&quot;500&quot;</span> <span class="na">dur=</span><span class="s">&quot;5s&quot;</span> <span class="na">repeatCount=</span><span class="s">&quot;10&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;animate</span> <span class="na">attributeName=</span><span class="s">&quot;height&quot;</span> <span class="na">from=</span><span class="s">&quot;10&quot;</span> <span class="na">to=</span><span class="s">&quot;200&quot;</span> <span class="na">dur=</span><span class="s">&quot;3s&quot;</span> <span class="na">repeatCount=</span><span class="s">&quot;10&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/rect&gt;</span>
</span><span class='line'><span class="nt">&lt;/svg&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<dl>
    <svg width="500" height="250">
        <rect width="10" height="10" fill="url(#g1)" >
            <animate attributeName="width" from="10" to="500" dur="5s" repeatCount="10" />
            <animate attributeName="height" from="10" to="200" dur="3s" repeatCount="indefinite" />
        </rect>
    </svg>
</dl>


<h2><a name="js"></a>JavaScriptとの連携</h2>

<ul>
<li>setAttributeメソッドを利用して、JavaScriptから値の変更が容易に可能</li>
</ul>


<h4>ボタン押すたびに変更するサンプル</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;svg</span> <span class="na">width=</span><span class="s">&quot;600&quot;</span> <span class="na">height=</span><span class="s">&quot;250&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;rect</span> <span class="na">width=</span><span class="s">&quot;600&quot;</span> <span class="na">height=</span><span class="s">&quot;250&quot;</span> <span class="na">stroke=</span><span class="s">&quot;black&quot;</span> <span class="na">fill=</span><span class="s">&quot;white&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;circle</span> <span class="na">cx=</span><span class="s">&quot;100&quot;</span> <span class="na">cy=</span><span class="s">&quot;100&quot;</span> <span class="na">r=</span><span class="s">&quot;20&quot;</span> <span class="na">fill=</span><span class="s">&quot;white&quot;</span> <span class="na">name=</span><span class="s">&quot;test&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;circle</span> <span class="na">cx=</span><span class="s">&quot;100&quot;</span> <span class="na">cy=</span><span class="s">&quot;100&quot;</span> <span class="na">r=</span><span class="s">&quot;20&quot;</span> <span class="na">fill=</span><span class="s">&quot;white&quot;</span> <span class="na">name=</span><span class="s">&quot;test&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;circle</span> <span class="na">cx=</span><span class="s">&quot;100&quot;</span> <span class="na">cy=</span><span class="s">&quot;100&quot;</span> <span class="na">r=</span><span class="s">&quot;20&quot;</span> <span class="na">fill=</span><span class="s">&quot;white&quot;</span> <span class="na">name=</span><span class="s">&quot;test&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;circle</span> <span class="na">cx=</span><span class="s">&quot;100&quot;</span> <span class="na">cy=</span><span class="s">&quot;100&quot;</span> <span class="na">r=</span><span class="s">&quot;20&quot;</span> <span class="na">fill=</span><span class="s">&quot;white&quot;</span> <span class="na">name=</span><span class="s">&quot;test&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;circle</span> <span class="na">cx=</span><span class="s">&quot;100&quot;</span> <span class="na">cy=</span><span class="s">&quot;100&quot;</span> <span class="na">r=</span><span class="s">&quot;20&quot;</span> <span class="na">fill=</span><span class="s">&quot;white&quot;</span> <span class="na">name=</span><span class="s">&quot;test&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;circle</span> <span class="na">cx=</span><span class="s">&quot;100&quot;</span> <span class="na">cy=</span><span class="s">&quot;100&quot;</span> <span class="na">r=</span><span class="s">&quot;20&quot;</span> <span class="na">fill=</span><span class="s">&quot;white&quot;</span> <span class="na">name=</span><span class="s">&quot;test&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;circle</span> <span class="na">cx=</span><span class="s">&quot;100&quot;</span> <span class="na">cy=</span><span class="s">&quot;100&quot;</span> <span class="na">r=</span><span class="s">&quot;20&quot;</span> <span class="na">fill=</span><span class="s">&quot;white&quot;</span> <span class="na">name=</span><span class="s">&quot;test&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;circle</span> <span class="na">cx=</span><span class="s">&quot;100&quot;</span> <span class="na">cy=</span><span class="s">&quot;100&quot;</span> <span class="na">r=</span><span class="s">&quot;20&quot;</span> <span class="na">fill=</span><span class="s">&quot;white&quot;</span> <span class="na">name=</span><span class="s">&quot;test&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;circle</span> <span class="na">cx=</span><span class="s">&quot;100&quot;</span> <span class="na">cy=</span><span class="s">&quot;100&quot;</span> <span class="na">r=</span><span class="s">&quot;20&quot;</span> <span class="na">fill=</span><span class="s">&quot;white&quot;</span> <span class="na">name=</span><span class="s">&quot;test&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/svg&gt;</span>
</span><span class='line'><span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">onclick=</span><span class="s">&quot;</span>
</span><span class='line'><span class="s">  var c = document.getElementsByName(&#39;test&#39;);</span>
</span><span class='line'><span class="s">  for (var i = 0; i &lt; c.length; i ++) {</span>
</span><span class='line'><span class="s">      c[i].setAttribute(&#39;cx&#39;, r(500));</span>
</span><span class='line'><span class="s">      c[i].setAttribute(&#39;cy&#39;, r(250));</span>
</span><span class='line'><span class="s">      c[i].setAttribute(&#39;r&#39;, r(100));</span>
</span><span class='line'><span class="s">      c[i].setAttribute(&#39;fill&#39;, &#39;rgb(&#39; +r(255)+&#39;,&#39; +r(255)+&#39;,&#39; +r(255)+&#39;)&#39;);</span>
</span><span class='line'><span class="s">  }</span>
</span><span class='line'><span class="s">  function r(n) {</span>
</span><span class='line'><span class="s">      return Math.floor(Math.random() * (n + 1));</span>
</span><span class='line'><span class="s">  }</span>
</span><span class='line'><span class="s">&quot;</span><span class="nt">&gt;</span>reload<span class="nt">&lt;/button&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<dl>
    <svg width="600" height="250">
        <rect width="600" height="250" stroke="black" fill="white" />
        <circle cx="100" cy="100" r="20" fill="white" name="test" />
        <circle cx="100" cy="100" r="20" fill="white" name="test" />
        <circle cx="100" cy="100" r="20" fill="white" name="test" />
        <circle cx="100" cy="100" r="20" fill="white" name="test" />
        <circle cx="100" cy="100" r="20" fill="white" name="test" />
        <circle cx="100" cy="100" r="20" fill="white" name="test" />
        <circle cx="100" cy="100" r="20" fill="white" name="test" />
        <circle cx="100" cy="100" r="20" fill="white" name="test" />
        <circle cx="100" cy="100" r="20" fill="white" name="test" />
    </svg>
    <button type="button" onclick="
        var c = document.getElementsByName('test');
        for (var i = 0; i < c.length; i ++) {
            c[i].setAttribute('cx', r(500));
            c[i].setAttribute('cy', r(250));
            c[i].setAttribute('r', r(100));
            c[i].setAttribute('fill', 'rgb(' +r(255)+',' +r(255)+',' +r(255)+')');
        }
        function r(n) {
            return Math.floor(Math.random() * (n + 1));
        }
    ">reload</button><br><br>
</dl>


<h2>参考</h2>

<ul>
<li><a href="http://dotinstall.com/lessons/basic_svg">ドットインストール</a> を参考にさせて頂きました。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WebRTCサンプル]]></title>
    <link href="http://sat-pg.com/blog/2013/05/06/webrtc.html"/>
    <updated>2013-05-06T04:05:00+09:00</updated>
    <id>http://sat-pg.com/blog/2013/05/06/webrtc</id>
    <content type="html"><![CDATA[<p>WebRTCのサンプルを動かしてみたのでまとめます。</p>

<h3><a href="http://dl.dropboxusercontent.com/u/321302/html5/webrtc.html">カメラから映像を取り込み、そのまま流すのみのサンプル</a></h3>

<p>2013/5/6現在、MacのGoogle Chorome Version 26では以下を読み込んで動作しました。</p>

<figure class='code'><figcaption><span> (webrtc.html)</span> <a href='http://sat-pg.com/downloads/code/webrtc.html'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;ja&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>WebRTC<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://code.jquery.com/jquery-1.9.1.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;video</span> <span class="na">id=</span><span class="s">&quot;myvideo&quot;</span> <span class="na">width=</span><span class="s">&quot;320&quot;</span> <span class="na">height=</span><span class="s">&quot;240&quot;</span> <span class="na">autoplay</span> <span class="na">style=</span><span class="s">&quot;border:1px solid black&quot;</span><span class="nt">&gt;&lt;/video&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">navigator</span><span class="p">.</span><span class="nx">webkitGetUserMedia</span><span class="p">({</span><span class="nx">video</span><span class="o">:</span><span class="kc">true</span><span class="p">,</span> <span class="nx">audio</span><span class="o">:</span><span class="kc">true</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">stream</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">myvideo</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#myvideo&quot;</span><span class="p">).</span><span class="nx">get</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">myvideo</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="nx">webkitURL</span><span class="p">.</span><span class="nx">createObjectURL</span><span class="p">(</span><span class="nx">stream</span><span class="p">);</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Androidでは、version26を利用し、アドレスバーに
<code>about:flags</code>と入力後、以下の「WebRTCを有効にする」を選択してChromeを再起動することで
実行が可能になります。</p>

<p><img src="http://sat-pg.com/images/cap/webrtc_android.png"></p>

<p>iOSは現状ではSafari, Chromeとも動作しない模様です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressのいろいろ]]></title>
    <link href="http://sat-pg.com/blog/2013/05/06/octopress-config.html"/>
    <updated>2013-05-06T03:02:00+09:00</updated>
    <id>http://sat-pg.com/blog/2013/05/06/octopress-config</id>
    <content type="html"><![CDATA[<p>Octopressの設定など色々まとめていきます。<br/>
設定追加毎に記事も追加していきます。</p>

<ul>
<li><a href="#include_code">ソースコードの引用</a></li>
<li><a href="#escape">特殊文字のエスケープ</a></li>
<li><a href="#image">画像貼り付け</a></li>
<li><a href="#publish">記事の非公開設定</a></li>
<li><a href="#domain">ドメインの設定</a></li>
<li><a href="#table">テーブルの作成</a></li>
</ul>


<!-- more -->


<h2><a name="include_code"></a>ソースコードの引用</h2>

<p>以下の通り記載することで引用が可能です</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{% include_code [title] [lang:language] path/to/file %}</span></code></pre></td></tr></table></div></figure>


<p>ファイルは、<code>source/downloads/code</code> が基本のパスのようです。
例えばindex.htmlを、<code>source/downloads/code/</code> に置いて</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{% include_code index.html %}</span></code></pre></td></tr></table></div></figure>


<p>と書くと、以下の通り出力されます。</p>

<figure class='code'><figcaption><span> (index.html)</span> <a href='http://sat-pg.com/downloads/code/index.html'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>---
</span><span class='line'>layout: default
</span><span class='line'>---
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;blog-index&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  {% assign index = true %}
</span><span class='line'>  {% for post in paginator.posts %}
</span><span class='line'>  {% assign content = post.content %}
</span><span class='line'>    <span class="nt">&lt;article&gt;</span>
</span><span class='line'>      {% include article.html %}
</span><span class='line'>    <span class="nt">&lt;/article&gt;</span>
</span><span class='line'>  {% endfor %}
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;pagination&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    {% if paginator.next_page %}
</span><span class='line'>      <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;prev&quot;</span> <span class="na">href=</span><span class="s">&quot;{{paginator.next_page}}&quot;</span><span class="nt">&gt;</span><span class="ni">&amp;larr;</span> Older<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>    {% endif %}
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/blog/archives&quot;</span><span class="nt">&gt;</span>Blog Archives<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>    {% if paginator.previous_page %}
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;next&quot;</span> <span class="na">href=</span><span class="s">&quot;{{paginator.previous_page}}&quot;</span><span class="nt">&gt;</span>Newer <span class="ni">&amp;rarr;</span><span class="nt">&lt;/a&gt;</span>
</span><span class='line'>    {% endif %}
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;aside</span> <span class="na">class=</span><span class="s">&quot;sidebar&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  {% if site.blog_index_asides.size %}
</span><span class='line'>    {% include_array blog_index_asides %}
</span><span class='line'>  {% else %}
</span><span class='line'>    {% include_array default_asides %}
</span><span class='line'>  {% endif %}
</span><span class='line'><span class="nt">&lt;/aside&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="http://octopress.org/docs/plugins/include-code/">公式の説明ページ</a></li>
</ul>


<h2><a name="escape"></a>特殊文字のエスケープ</h2>

<p>include_codeなど、自動的にoctopressによって展開される文字を
そのまま出力させるには、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{% raw %} 
</span><span class='line'>と 
</span><span class='line'>{％ endraw ％}</span></code></pre></td></tr></table></div></figure>


<p>で囲むことでエスケープして文字を出力可能です。
(endrawの％部分は半角に直す必要があり。)</p>

<h2><a name="image"></a>画像貼り付け</h2>

<p>ソースコードとほぼ同様で、以下の通り記載することで引用が可能です</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{% img [class names] /path/to/image [width] [height] [title text [alt text]] %}</span></code></pre></td></tr></table></div></figure>


<p>画像ファイルのトップディレクトリは、<code>source/</code> のようです。例えば、<code>source/images/search.png</code>というファイルがデフォルトでありますが、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{% img /images/search.png %}</span></code></pre></td></tr></table></div></figure>


<p>と記載することで以下の通り表示されます。</p>

<p><img class="[class names]" src="http://sat-pg.com/images/search.png"></p>

<ul>
<li><a href="http://octopress.org/docs/plugins/image-tag/">公式の説明ページ</a></li>
</ul>


<h2><a name="publish"></a>記事の非公開</h2>

<p><code>rake new_post['hogehoge']</code> で新規markdownファイルを作ったあとも、
すぐには公開したくない場合、記事の設定部分に
<code>published: false</code>を追加することで対応可能です。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>layout: post
</span><span class='line'>title: "hogehoge"
</span><span class='line'>date: 2013-05-06 22:46
</span><span class='line'>published: false
</span><span class='line'>comments: true
</span><span class='line'>categories: phonegap
</span><span class='line'>---</span></code></pre></td></tr></table></div></figure>


<p>編集が完了した後、<code>published: true</code>としてdeployすれば記事が公開されます。</p>

<p>※ちなみに、publishをfalseにしても、プレビューでは表示されます。</p>

<h2><a name="domain"></a>ドメインの設定</h2>

<p>サブドメインを使わない場合、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% echo 'sat-pg.com' &gt;&gt; source/CNAME</span></code></pre></td></tr></table></div></figure>


<p>のように、新たにCNAMEファイルを作成する。</p>

<p>上記と合わせて、取得したドメインに対応するDNSのAレコードに、207.97.227.245 を設定することで、
30分くらいすると指定したドメインでのアクセスが可能になります。</p>

<ul>
<li><a href="http://octopress.org/docs/deploying/github/">公式の説明ページ</a>: ここの「Custom Domains」に記載があります。</li>
</ul>


<h2><a name="table"></a>テーブルの作成</h2>

<p>table用のCSSを作成し、source/_includes/head.htmlから参照するように設定する。以下を参考にさせて頂きました。</p>

<ul>
<li><a href="http://morizyun.github.io/blog/octopress-table-tag-css/">Octopressでテーブルをmarkdownで編集できるようにする</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressの導入]]></title>
    <link href="http://sat-pg.com/blog/2013/05/04/octopress.html"/>
    <updated>2013-05-04T03:37:00+09:00</updated>
    <id>http://sat-pg.com/blog/2013/05/04/octopress</id>
    <content type="html"><![CDATA[<p>GitHubを初めるにあたって、Octopressを導入したのでその方法についてまとめました。</p>

<p>以下4点、順番に説明します。</p>

<ol>
<li><a href="#ruby_install">Rubyインストール</a></li>
<li><a href="#github_pages">GitHub Pagesレポジトリ作成</a></li>
<li><a href="#octopress">Octopressインストール</a></li>
<li><a href="#newpost">記事作成</a></li>
</ol>


<!-- more -->


<h2><a name="ruby_install"></a>1. Rubyインストール</h2>

<p>私の環境は、Mac OS 10.8.3 ですが、デフォルトのRubyは1.8.7が入っていました。
Octopressのインストールには1.9.3以上が必要とのことなので、
rvmというRubyのバージョン管理用ソフトをインストールします。</p>

<h3>RVMとRuby1.9.3のインストール</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% curl -L https://get.rvm.io | bash -s stable --ruby
</span><span class='line'>% rvm list known</span></code></pre></td></tr></table></div></figure>


<p>とすることで、インストール可能なRubyのバージョンのリストが表示されます。</p>

<p>色々とネット上の記事を見ていると、XCode4.2の付属のLLVM gccではコンパイル不可らしく、
別途gccをダウンロードした上で作業をした等の記載を見つけましたが、
ここでは、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% rvm autolibs enable</span></code></pre></td></tr></table></div></figure>


<p>で依存関係を自動で解決するようにし、その後、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% rvm install 1.9.3-p392</span></code></pre></td></tr></table></div></figure>


<p>とすることで、問題無くインストールが進み、利用可能となりました。
(自分の環境ではpatchレベルの指定も必要でした。)</p>

<h3>RVMの設定</h3>

<p>以下の通りで利用バージョンが設定できます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% rvm use 1.9.3 
</span><span class='line'>% ruby -v
</span><span class='line'>ruby 1.9.3p392 (2013-02-22 revision 39386) [x86_64-darwin12.3.0]</span></code></pre></td></tr></table></div></figure>


<p><code>rvm use ...</code>の実行後にバージョンを戻すときは、<code>% rvm reset</code>とし、
デフォルトの使用バージョンを変える場合は、<code>% rvm --default 1.9.3</code>とすればOKです。</p>

<p>なお、各フォルダ毎に、.rvmrcファイルを作成して<code>rvm use ...</code>と記載しておくことで、
そのフォルダでのrubyの実行バージョンを制御できる模様です。</p>

<h2><a name="github_pages"></a>2. GitHub Pagesレポジトリ作成</h2>

<p>これは簡単で、GitHubに USERNAME.github.comのレポジトリを作成するのみです。
作成後、しばらくたつと、
http://USERNAME.github.com でアクセスできるようになります。</p>

<p>ドメインの指定等も可能みたいだけど、とりあえず省略です。</p>

<h2><a name="octopress"></a>3. Octopressインストール</h2>

<p>以下の通りでインストールできます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'>% cd octopress</span></code></pre></td></tr></table></div></figure>


<p>※octopressディレクトリには、.rvmrcが設置してあり、自動で1.9.3を使うように設定できます</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% sudo gem install bundler
</span><span class='line'>% sudo bundle install 
</span><span class='line'>% rake install
</span><span class='line'>% rake setup_github_pages</span></code></pre></td></tr></table></div></figure>


<p>ここまで来ると、Enter the read/write url for your repository と聞かれるので、
git@github.com:USERNAME/USERNAME.github.com.git と入力します。その後、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% rake generate
</span><span class='line'>% rake deploy</span></code></pre></td></tr></table></div></figure>


<p>とすることで、USERNAME.github.comにアクセス可能になります。</p>

<h2><a name="newpost"></a> 記事の投稿</h2>

<p>インストール後、以下コマンドで新規記事が作成できます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% rake new_post['post title']</span></code></pre></td></tr></table></div></figure>


<p>post title部分がURLになる(post-titleになる)ため、英語の必要があります。
ファイルは、source/_posts/yyyy-mm-dd-post-title.markdown が自動作成されるので、
markdown形式で編集することで記事を作成できます。</p>

<p>例えばこの記事の場合、markdownファイルの先頭は以下の通り。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>layout: post
</span><span class='line'>title: "Octopressの導入"
</span><span class='line'>date: 2013-05-04 03:37
</span><span class='line'>comments: true
</span><span class='line'>categories: octopress
</span><span class='line'>---</span></code></pre></td></tr></table></div></figure>


<p>title部分は、最初はpost titleが入るけど、後から日本語に変更が可能です。
この先頭の後は、普通にmarkdownで書くのみです。</p>

<p>書いた後、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% rake preview</span></code></pre></td></tr></table></div></figure>


<p>とすることでhttp://localhost:4000/ で記載内容を確認できます。</p>

<p>確認できたら、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% rake gen_deploy</span></code></pre></td></tr></table></div></figure>


<p>とすることでGithubに反映されます。(rake generate; rake deployの省略形のようです)<br/>
また、不要な記事は、markdownファイルを削除してから
再度gen_deployを実行することで削除可能です。</p>

<p>記事投稿をまとめると、</p>

<ul>
<li><code>rake new_post</code>でsourceフォルダにmarkdownファイルが作られ、</li>
<li><code>rake generate</code>でsourceフォルダからpublicフォルダにHTML形式が出力され、</li>
<li><code>rake deploy</code>でpublicフォルダから_deployフォルダにコピーされると共に、
GitHub側にも反映</li>
</ul>


<p>という流れです。</p>

<p>設定はおいおいやるとして、ひとまずこれでブログとして公開することができました。</p>

<h3>参考にさせて頂いたサイト</h3>

<ul>
<li><a href="http://octopress.org/">Octopress公式</a></li>
<li><a href="http://www.creativegear.jp/2012/12/29/octopress-post/">GitHubとOctopressで作るプログラマ向けブログ</a></li>
<li><a href="http://qiita.com/items/34e0ff2c369899169f90">Ruby1.9.3-p286インストール(RVM)</a></li>
<li><a href="http://spring-mt.tumblr.com/post/18486101350/ruby-rvm-install">rubyをrvmを使ってinstallする</a></li>
<li><a href="http://www.sankitch.me/blog/2012/05/05/build-octopress-on-github-dropbox/">Octopress + Github Pages + Dropbox でブログを構築</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
