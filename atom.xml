<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Saturday Programmer]]></title>
  <link href="http://sat-pg.com/atom.xml" rel="self"/>
  <link href="http://sat-pg.com/"/>
  <updated>2014-01-26T18:12:53+09:00</updated>
  <id>http://sat-pg.com/</id>
  <author>
    <name><![CDATA[torub]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Androidでの簡易なWidget作り方]]></title>
    <link href="http://sat-pg.com/blog/android-widget.html"/>
    <updated>2014-01-26T17:13:00+09:00</updated>
    <id>http://sat-pg.com/blog/android-widget</id>
    <content type="html"><![CDATA[<p>Nexus5を買ったのでAndroidのウィジェットを作ってみます．
初Androidのためかなりシンプルなサンプルを作ります．</p>

<p><img src="http://sat-pg.com/images/blog/widget.png" alt="WidgetSample" /></p>

<p>ボタンをクリックするとカウントアップするだけ．．．です．</p>

<h2>Androidのウィジェットとは</h2>

<p>ウィジェットはAndroidの特徴でホームに色々貼り付けることができる，iPhoneとの大きな差異の1つで，APIのLevel3(Android1.5)から使えているそうです．今はAPI Level19(Android4.4)だからかなり初期から利用できているものです．</p>

<p>ウィジェットは次の手順で作ることができます．</p>

<ol>
<li>ウィジェットの設定ファイル作成</li>
<li>ウィジェットのレイアウト作成</li>
<li>AppWidgetProviderのサブクラス作成</li>
<li>BroadcastReceiverのサブクラス作成</li>
<li>AndroidManifest修正</li>
</ol>


<h2>1. ウィジェットの設定ファイル作成</h2>

<p>以下のようなXMLファイルを，ウィジェットの設定ファイルとして定義します．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="utf-8"?&gt;
</span><span class='line'>&lt;appwidget-provider xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>    android:initialLayout="@layout/widget_layout"
</span><span class='line'>    android:minHeight="146dp"
</span><span class='line'>    android:minWidth="292dp"
</span><span class='line'>    android:previewImage="@drawable/widget"
</span><span class='line'>    android:updatePeriodMillis="1000000" &gt;
</span><span class='line'>&lt;/appwidget-provider&gt;</span></code></pre></td></tr></table></div></figure>


<ul>
<li>initialLayoutはレイアウトファイルを設定．</li>
<li>previewImageに画像を設定すると，ウィジェットの追加画面でサムネイルが表示可能．</li>
<li>updatePeriodMills属性は，ウィジェットの更新タイマを定義します．このタイマに従ってAppWidgetProviderはonUpdateコールバックメソッドで呼ばれる(と書いてありますが，このサンプルでは時間を短くしても動作しなかったです)．</li>
</ul>


<p>細かい点は<a href="http://developer.android.com/guide/practices/ui_guidelines/widget_design.html">ガイドライン</a>に記載されているようです．</p>

<h2>2. ウィジェットのレイアウト作成</h2>

<p>ウィジェットは他のアクティビティと同じようにレイアウトを作ることができるますが，制限があります．</p>

<p>レイアウトは以下4つのみが利用可能です．</p>

<ol>
<li>FrameLayout</li>
<li>LinearLayout</li>
<li>RelativeLayout</li>
<li>GridLayout</li>
</ol>


<p>ウィジェットのクラスは以下をサポートしています．</p>

<ol>
<li>AnalogClock</li>
<li>Button</li>
<li>Chronometer</li>
<li>ImageButton</li>
<li>ImageView</li>
<li>ProgressBar</li>
<li>TextView</li>
<li>ViewFlipper</li>
<li>ListView</li>
<li>GridView</li>
<li>StackView</li>
<li>AdapterViewFlipper</li>
</ol>


<p>今回のサンプルでは以下のようなテキストフィールドとボタンだけのものを作ります．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="utf-8"?&gt;
</span><span class='line'>&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>    android:layout_width="fill_parent"
</span><span class='line'>    android:layout_height="wrap_content"
</span><span class='line'>    android:layout_margin="5sp"
</span><span class='line'>    android:orientation="vertical" &gt;
</span><span class='line'>
</span><span class='line'>    &lt;TextView
</span><span class='line'>        android:id="@+id/title"
</span><span class='line'>        android:layout_width="fill_parent"
</span><span class='line'>        android:layout_height="wrap_content"
</span><span class='line'>        android:maxLines="2"
</span><span class='line'>        android:paddingBottom="5dp"
</span><span class='line'>        android:textColor="#fcfcfc"
</span><span class='line'>        android:textSize="16sp"
</span><span class='line'>        android:textStyle="bold"
</span><span class='line'>         /&gt;
</span><span class='line'>
</span><span class='line'>    &lt;Button
</span><span class='line'>        android:id="@+id/button"
</span><span class='line'>        android:layout_width="100dp"
</span><span class='line'>        android:layout_height="50dp"
</span><span class='line'>        android:layout_alignParentBottom="true"
</span><span class='line'>        android:layout_alignParentLeft="true"
</span><span class='line'>        android:text="click" /&gt;
</span><span class='line'>
</span><span class='line'>&lt;/RelativeLayout&gt;</span></code></pre></td></tr></table></div></figure>


<h2>3. AppWidgetProviderのサブクラス作成</h2>

<p>ウィジェットをコントロールするため，AppWidgetProviderクラスを継承したクラスを追加します．
onUpdateメソッドが実行時に画面を変更するために使われます．
このクラスはウィジェットとのインターフェイスとなります．サンプルではonUpdateしか使っていませんが，ウィジェットの更新や有効・無効化・削除などのイベントを受けとることができるそうです．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class MyWidgetProvider extends AppWidgetProvider {
</span><span class='line'>  
</span><span class='line'>  @Override
</span><span class='line'>  public void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) {
</span><span class='line'>      // ウィジェットレイアウトの初期化
</span><span class='line'>      RemoteViews remoteViews = new RemoteViews(context.getPackageName(), R.layout.widget_layout);
</span><span class='line'>
</span><span class='line'>      // ボタンイベントを登録
</span><span class='line'>      remoteViews.setOnClickPendingIntent(R.id.button, clickButton(context));
</span><span class='line'>
</span><span class='line'>      // テキストフィールドに"初期画面"と表示
</span><span class='line'>      remoteViews.setTextViewText(R.id.title, "初期画面");
</span><span class='line'>
</span><span class='line'>      // アップデートメソッド呼び出し
</span><span class='line'>      pushWidgetUpdate(context, remoteViews);
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  public static PendingIntent clickButton(Context context) {
</span><span class='line'>      // クリック回数を増加
</span><span class='line'>      MyWidgetIntentReceiver.clickCount ++;
</span><span class='line'>
</span><span class='line'>      // initiate widget update request
</span><span class='line'>      Intent intent = new Intent();
</span><span class='line'>      intent.setAction("UPDATE_WIDGET");
</span><span class='line'>      return PendingIntent.getBroadcast(context, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT);
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  // アップデート
</span><span class='line'>  public static void pushWidgetUpdate(Context context, RemoteViews remoteViews) {
</span><span class='line'>      ComponentName myWidget = new ComponentName(context, MyWidgetProvider.class);
</span><span class='line'>      AppWidgetManager manager = AppWidgetManager.getInstance(context);
</span><span class='line'>      manager.updateAppWidget(myWidget, remoteViews);
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>4. BroadcastReceiverのサブクラス作成</h2>

<p>ボタンクリック時のアクションを実現するためにBroadcastReceiverを実装します．
ウィジェットのをonReceiveメソッドで実現します．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class MyWidgetIntentReceiver extends BroadcastReceiver {
</span><span class='line'>  public static int clickCount = 0;
</span><span class='line'>
</span><span class='line'>  @Override
</span><span class='line'>  public void onReceive(Context context, Intent intent) {
</span><span class='line'>      if (intent.getAction().equals("UPDATE_WIDGET")) {
</span><span class='line'>          RemoteViews remoteViews = new RemoteViews(context.getPackageName(), R.layout.widget_layout);
</span><span class='line'>
</span><span class='line'>          // テキストをクリック回数を元に更新
</span><span class='line'>          remoteViews.setTextViewText(R.id.title, "クリック回数: " + MyWidgetIntentReceiver.clickCount);
</span><span class='line'>
</span><span class='line'>          // もう一回クリックイベントを登録(毎回登録しないと上手く動かず)
</span><span class='line'>          remoteViews.setOnClickPendingIntent(R.id.button, MyWidgetProvider.clickButton(context));
</span><span class='line'>
</span><span class='line'>          MyWidgetProvider.pushWidgetUpdate(context.getApplicationContext(), remoteViews);
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h1>5. Androidマニフェストにreceiverを登録する</h1>

<p>最後に，マニフェストファイルを記載して，ウィジェットを登録します．
(demo_widget_providerは，1で定義したXMLファイルです．)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="utf-8"?&gt;
</span><span class='line'>&lt;manifest xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>    package="com.torua.hellowidget"
</span><span class='line'>    android:versionCode="1"
</span><span class='line'>    android:versionName="1.0" &gt;
</span><span class='line'>
</span><span class='line'>    &lt;uses-sdk
</span><span class='line'>        android:minSdkVersion="8"
</span><span class='line'>        android:targetSdkVersion="18" /&gt;
</span><span class='line'>
</span><span class='line'>    &lt;application
</span><span class='line'>        android:allowBackup="true"
</span><span class='line'>        android:icon="@drawable/ic_launcher"
</span><span class='line'>        android:label="@string/app_name"
</span><span class='line'>        android:theme="@style/AppTheme" &gt;
</span><span class='line'>         &lt;receiver android:name=".MyWidgetProvider" &gt;
</span><span class='line'>            &lt;intent-filter&gt;
</span><span class='line'>                &lt;action android:name="android.appwidget.action.APPWIDGET_UPDATE" /&gt;
</span><span class='line'>            &lt;/intent-filter&gt;
</span><span class='line'>
</span><span class='line'>            &lt;meta-data
</span><span class='line'>                android:name="android.appwidget.provider"
</span><span class='line'>                android:resource="@xml/demo_widget_provider" /&gt;
</span><span class='line'>        &lt;/receiver&gt;
</span><span class='line'>        &lt;receiver
</span><span class='line'>            android:name=".MyWidgetIntentReceiver"
</span><span class='line'>            android:label="@string/app_name" &gt;
</span><span class='line'>            &lt;intent-filter&gt;
</span><span class='line'>                &lt;action android:name="UPDATE_WIDGET" /&gt;
</span><span class='line'>            &lt;/intent-filter&gt;
</span><span class='line'>
</span><span class='line'>            &lt;meta-data
</span><span class='line'>                android:name="android.appwidget.provider"
</span><span class='line'>                android:resource="@xml/demo_widget_provider" /&gt;
</span><span class='line'>        &lt;/receiver&gt;
</span><span class='line'>    &lt;/application&gt;
</span><span class='line'>&lt;/manifest&gt;</span></code></pre></td></tr></table></div></figure>


<p>動作の流れは以下の通りです．</p>

<ul>
<li>ウィジェット登録→MyWidgetProvier.onUpdate→描画</li>
<li>ボタンクリック→インテント(UPDATE_WIDGET)→MyWidgetIntentReceiver.onReceive→描画</li>
</ul>


<h1>参考</h1>

<ul>
<li><a href="http://developer.android.com/guide/topics/appwidgets/index.html">App Widgets | Android Developers</a></li>
<li><a href="http://developer.android.com/guide/practices/ui_guidelines/widget_design.html">App Widget Design Guidelines</a></li>
<li><a href="http://javatechig.com/android/app-widgets-example-in-android">Homescreen App Widgets Example in Android</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS+NodeJS+MongoDB+OAuthでWebサービスを作る]]></title>
    <link href="http://sat-pg.com/blog/meanstack.html"/>
    <updated>2013-12-10T02:00:00+09:00</updated>
    <id>http://sat-pg.com/blog/meanstack</id>
    <content type="html"><![CDATA[<p>JavaScriptの勉強を兼ねて、Webサービスの作り方まとめです。
簡単なTodoリストを作ります。</p>

<h1>AngularJS+NodeJS(ExpressJS)+MongoDB</h1>

<p>Webサービスを作るには色々と手段はありますが、今回選んだのは上記の組み合わせ。
サーバからクライアントまで全部JavaScriptで書けるためです。
MongoDBのサイトでは、<a href="http://jp.blog.mongodb.org/post/49262866911/the-mean-stack-mongodb-expressjs-angularjs-and">MEANスタック</a>などと呼ばれている模様です。</p>

<p>以下、meanstack-sampleと名付けて、動くようになるまでにやったことを順番に書いていきます。</p>

<ol>
<li><a href="#yeoman">Yomanの設定</a></li>
<li><a href="#rest">NodeJSでのREST</a></li>
<li><a href="#mongo">MongoDBのインストールとNodeJSとの接続</a></li>
<li><a href="#angular">AngularJSとRESTの連携</a></li>
<li><a href="#oauth">NodeJSでのOAuth認証</a></li>
<li><a href="#matome">まとめと参考</a></li>
</ol>


<h2><a name="yeoman"></a>Yeomanの設定</h2>

<p><a href="http://torub.github.io/blog/yeoman.html">別エントリ参照</a></p>

<h2><a name="rest"></a>NodeJS(+ExpressJS)でRESTもどきを作る</h2>

<p>まずはサーバ側が無いと動かないので、
Node.jsでRESTっぽく値を返してくれるものを準備します。</p>

<p>Node.jsのWebアプリケーションフレームワークであるExpressをインストールします。
詳しいガイドは<a href="http://hideyukisaito.github.io/expressjs-doc_ja/guide/">こちら</a>。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% npm install express</span></code></pre></td></tr></table></div></figure>


<p>Node.js/Expressを使って以下をweb.jsとして作成します。</p>

<figure class='code'><figcaption><span>web.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">db</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./db.js&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">application_root</span> <span class="o">=</span> <span class="nx">__dirname</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">configure</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;port&#39;</span><span class="p">,</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">3000</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;view engine&#39;</span><span class="p">,</span> <span class="s1">&#39;ejs&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// AngularJSのディレクトリを静的ファイルとして追加</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="kr">static</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">application_root</span><span class="p">,</span> <span class="s2">&quot;app&quot;</span><span class="p">)));</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">cookieParser</span><span class="p">());</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">bodyParser</span><span class="p">());</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">methodOverride</span><span class="p">());</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="nx">router</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/todo&#39;</span><span class="p">,</span> <span class="nx">db</span><span class="p">.</span><span class="nx">read</span><span class="p">);</span> <span class="c1">// GETの処理</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/todo&#39;</span><span class="p">,</span> <span class="nx">db</span><span class="p">.</span><span class="nx">create</span><span class="p">);</span> <span class="c1">// POSTの処理</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="s1">&#39;/todo/:id&#39;</span><span class="p">,</span> <span class="nx">db</span><span class="p">.</span><span class="k">delete</span><span class="p">);</span> <span class="c1">// DELETEの処理</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="s1">&#39;/todo/:id&#39;</span><span class="p">,</span> <span class="nx">db</span><span class="p">.</span><span class="nx">update</span><span class="p">);</span> <span class="c1">// PUTの処理</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// サーバ起動</span>
</span><span class='line'><span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="nx">app</span><span class="p">).</span><span class="nx">listen</span><span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;port&#39;</span><span class="p">),</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Express server listening on port &#39;</span> <span class="o">+</span> <span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;port&#39;</span><span class="p">));</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>URLを定めて、HTTPのGET、POST、DELETE、PUTを使うことで
<a href="http://ja.wikipedia.org/wiki/CRUD">CRUD</a>を実現します。
AngularJS側からHTTPメソッドを使うことで、簡単にデータ操作ができるようになります。</p>

<h2><a name="mongo"></a>MongoDBのインストールとNodeJSとの接続</h2>

<p>サーバ側の仕組みが作れたので、次はDBと接続します。
同じJavaScriptで、ということでMongoDBを選んでみました。
MongoDBは<a href="http://ja.wikipedia.org/wiki/MongoDB">Wikipedia</a>によると、</p>

<blockquote><p>オープンソースのドキュメント指向データベースである。C++言語で記述されており、開発とサポートはMongoDB Inc.によって行なわれている。MongoDBはRDBMSではなく、いわゆるNoSQLと呼ばれるデータベースに分類されるものである。</p></blockquote>

<p>というもので、SELECT文等のSQLを使わず、JavaScriptのメソッドでデータ操作をします。
インストール等の準備は、<a href="http://codezine.jp/article/detail/6982">ここ</a>を見ればできます。</p>

<p>Node.jsからMongoDBに接続するためには、色々なライブラリが存在しています。
ぐぐってみると、mongooseというものが有名なようですが、
今回はより単純な<a href="http://mongodb.github.com/node-mongodb-native/">mongodb</a>というライブラリを使ってみます。
これは、ターミナルからMongoDBを使う場合とほぼ同じ感じで使えるみたいです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% npm install mongodb</span></code></pre></td></tr></table></div></figure>


<p>でインストールして、web.js内で利用しているdb.jsで接続部分を作ります。</p>

<figure class='code'><figcaption><span>db.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">mongo</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mongodb&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Db</span> <span class="o">=</span> <span class="nx">mongo</span><span class="p">.</span><span class="nx">Db</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">BSON</span> <span class="o">=</span> <span class="nx">mongo</span><span class="p">.</span><span class="nx">BSONPure</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">mongoUri</span> <span class="o">=</span> <span class="s1">&#39;mongodb://localhost/contentdb&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// CRUDのC</span>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">create</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">content</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">mydata</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">Db</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">mongoUri</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">db</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">db</span><span class="p">.</span><span class="nx">collection</span><span class="p">(</span><span class="s1">&#39;todolist&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">collection</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">collection</span><span class="p">.</span><span class="nx">insert</span><span class="p">(</span><span class="nx">content</span><span class="p">,</span> <span class="p">{</span><span class="nx">safe</span><span class="o">:</span> <span class="kc">true</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">db</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// CRUDのR</span>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">read</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Db</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">mongoUri</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">db</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">db</span><span class="p">.</span><span class="nx">collection</span><span class="p">(</span><span class="s1">&#39;todolist&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">collection</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">collection</span><span class="p">.</span><span class="nx">find</span><span class="p">({}).</span><span class="nx">toArray</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">items</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">items</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">db</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// CRUDのU</span>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">update</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">content</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">mydata</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">updatedata</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>  <span class="nx">updatedata</span><span class="p">.</span><span class="nx">data</span> <span class="o">=</span> <span class="nx">content</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">updatedata</span><span class="p">.</span><span class="nx">checked</span> <span class="o">=</span> <span class="nx">content</span><span class="p">.</span><span class="nx">checked</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">id</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">Db</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">mongoUri</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">db</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">db</span><span class="p">.</span><span class="nx">collection</span><span class="p">(</span><span class="s1">&#39;todolist&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">collection</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">collection</span><span class="p">.</span><span class="nx">update</span><span class="p">({</span><span class="s1">&#39;_id&#39;</span><span class="o">:</span><span class="k">new</span> <span class="nx">BSON</span><span class="p">.</span><span class="nx">ObjectID</span><span class="p">(</span><span class="nx">id</span><span class="p">)},</span> <span class="nx">updatedata</span><span class="p">,</span> <span class="p">{</span><span class="nx">upsert</span><span class="o">:</span><span class="kc">true</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">db</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// CRUDのD</span>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="k">delete</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">id</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">Db</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">mongoUri</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">db</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// add Db.connect</span>
</span><span class='line'>    <span class="nx">db</span><span class="p">.</span><span class="nx">collection</span><span class="p">(</span><span class="s1">&#39;todolist&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">collection</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">collection</span><span class="p">.</span><span class="nx">remove</span><span class="p">({</span><span class="s1">&#39;_id&#39;</span><span class="o">:</span><span class="k">new</span> <span class="nx">BSON</span><span class="p">.</span><span class="nx">ObjectID</span><span class="p">(</span><span class="nx">id</span><span class="p">)},</span> <span class="p">{</span><span class="nx">safe</span><span class="o">:</span><span class="kc">true</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">db</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>基本はDBに接続、コレクションを選択、コレクションを操作、DBクローズの流れで処理をします。
毎回DBに接続せずにコネクションを保持するやりかたもあると思いますが、
Heroku上で動かそうとしたら上手く行かず、この形式にしました。</p>

<h2><a name="angular"></a>AngularJSとRESTの連携</h2>

<p>ここまでくればサーバ側は完成しているので、後はクライアント側をAngularで作っていきます。
yeomanを使ってyo angular後の状態として編集をしていきます。</p>

<p>app/views/main.htmlと、app/scripts/controllers/main.jsを修正します。
画面は簡単なTODOリストです。(何故かHTML内の中括弧が表示できないので、全角にしています。)</p>

<figure class='code'><figcaption><span>main.html </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;hero-unit&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;newtodo&quot;</span><span class="nt">&gt;&lt;input</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">value=</span><span class="s">&quot;add todo&quot;</span> <span class="na">ng-click=</span><span class="s">&quot;createTodo()&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>      <span class="nt">&lt;li</span> <span class="na">ng-repeat=</span><span class="s">&quot;todo in todolist&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span>  <span class="na">ng-change=</span><span class="s">&quot;updateTodo(todo)&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;todo.checked&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;done-｛｛todo.checked｝｝&quot;</span><span class="nt">&gt;</span>｛｛todo.data｝｝<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">value=</span><span class="s">&quot;×&quot;</span> <span class="na">ng-click=</span><span class="s">&quot;deleteTodo(todo)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>main.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;angularApp&#39;</span><span class="p">).</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;MainCtrl&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$http</span><span class="p">)</span> <span class="p">{</span><span class="c1">//, $templateCache) {</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="s1">&#39;/todo&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">todolist</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">getTodo</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">url</span><span class="p">).</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$scope</span><span class="p">.</span><span class="nx">todolist</span> <span class="o">=</span> <span class="nx">data</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">createTodo</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">todo</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>    <span class="nx">todo</span><span class="p">.</span><span class="nx">checked</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">todo</span><span class="p">.</span><span class="nx">data</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">newtodo</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">senddata</span> <span class="o">=</span> <span class="s1">&#39;mydata=&#39;</span> <span class="o">+</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">todo</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">$http</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">method</span><span class="o">:</span> <span class="s1">&#39;POST&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">url</span><span class="o">:</span> <span class="nx">url</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">data</span><span class="o">:</span> <span class="nx">senddata</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">headers</span><span class="o">:</span> <span class="p">{</span><span class="s1">&#39;Content-Type&#39;</span><span class="o">:</span> <span class="s1">&#39;application/x-www-form-urlencoded&#39;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">}).</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$scope</span><span class="p">.</span><span class="nx">getTodo</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}).</span><span class="nx">error</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">newtodo</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">updateTodo</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">todo</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">senddata</span> <span class="o">=</span> <span class="s1">&#39;mydata=&#39;</span> <span class="o">+</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">todo</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">$http</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">method</span><span class="o">:</span> <span class="s1">&#39;PUT&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">url</span><span class="o">:</span> <span class="nx">url</span> <span class="o">+</span> <span class="s1">&#39;/&#39;</span> <span class="o">+</span> <span class="nx">todo</span><span class="p">.</span><span class="nx">_id</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">data</span><span class="o">:</span> <span class="nx">senddata</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">headers</span><span class="o">:</span> <span class="p">{</span><span class="s1">&#39;Content-Type&#39;</span><span class="o">:</span> <span class="s1">&#39;application/x-www-form-urlencoded&#39;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">}).</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$scope</span><span class="p">.</span><span class="nx">getTodo</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}).</span><span class="nx">error</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">deleteTodo</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">todo</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">senddata</span> <span class="o">=</span> <span class="s1">&#39;mydata=&#39;</span> <span class="o">+</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">todo</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">senddata</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">$http</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">method</span><span class="o">:</span> <span class="s1">&#39;DELETE&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">url</span><span class="o">:</span> <span class="nx">url</span> <span class="o">+</span> <span class="s1">&#39;/&#39;</span> <span class="o">+</span> <span class="nx">todo</span><span class="p">.</span><span class="nx">_id</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">data</span><span class="o">:</span> <span class="nx">senddata</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">headers</span><span class="o">:</span> <span class="p">{</span><span class="s1">&#39;Content-Type&#39;</span><span class="o">:</span> <span class="s1">&#39;application/x-www-form-urlencoded&#39;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">}).</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$scope</span><span class="p">.</span><span class="nx">getTodo</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}).</span><span class="nx">error</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">getTodo</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここまででひととおり動くようになったので、ここまでのソースを<a href="https://github.com/torub/meanstack-sample/tree/708c5d94bdf40a784c41f7948c9f9a834c97b4c8">github</a>に置きました。</p>

<p>動かすと、以下のような画面になります。</p>

<p><img src="http://sat-pg.com/images/cap/todo.png"></p>

<h2><a name="oauth"></a>NodeJSでのOAuth認証</h2>

<p>ここまで作成したものに認証機能を付けていきます。
修正箇所は主に以下の3点です。</p>

<ul>
<li>Node.jsのPassportライブラリを利用して、認証機能追加(web.js修正)</li>
<li>データベースの項目にuidを追加(db.js修正)</li>
<li>クライアント側のapp.jsを修正、login.html追加</li>
</ul>


<h3>web.js修正</h3>

<p>Node.jsのPassportというライブラリを使うと、簡単に様々な認証機能を持たせることができます。今回は<a href="http://passportjs.org/guide/twitter/">Passportの公式サイト</a>を参考に、Twitter認証を追加します。</p>

<p>新たにauthという関数を用意して、認証が通っているかを確認した上で、認証の上でDB操作を行う用に変更します。
なお、consumerKeyや、consumerSecretは、Twitterの<a href="https://dev.twitter.com/apps">Developerのページ</a>から取得できます。</p>

<figure class='code'><figcaption><span>web.js修正(主な箇所の抜粋) </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="cm">/* passportの設定 */</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">passport</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;passport&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">TwitterStrategy</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;passport-twitter&#39;</span><span class="p">).</span><span class="nx">Strategy</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Passport: TwitterのOAuth設定</span>
</span><span class='line'><span class="nx">passport</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="k">new</span> <span class="nx">TwitterStrategy</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">consumerKey</span><span class="o">:</span> <span class="s2">&quot;your key&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">consumerSecret</span><span class="o">:</span> <span class="s2">&quot;your secret&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">callbackURL</span><span class="o">:</span> <span class="s2">&quot;/auth/twitter/callback&quot;</span>
</span><span class='line'><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">token</span><span class="p">,</span> <span class="nx">tokenSecret</span><span class="p">,</span> <span class="nx">profile</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// ユーザIDを設定</span>
</span><span class='line'>  <span class="nx">profile</span><span class="p">.</span><span class="nx">uid</span> <span class="o">=</span> <span class="nx">profile</span><span class="p">.</span><span class="nx">provider</span> <span class="o">+</span> <span class="nx">profile</span><span class="p">.</span><span class="nx">id</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">process</span><span class="p">.</span><span class="nx">nextTick</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">done</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">profile</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Serialized and deserialized methods when got from session</span>
</span><span class='line'><span class="nx">passport</span><span class="p">.</span><span class="nx">serializeUser</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">user</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">done</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">user</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">passport</span><span class="p">.</span><span class="nx">deserializeUser</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">user</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">done</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">user</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Define a middleware function to be used for every secured routes</span>
</span><span class='line'><span class="c1">// 認証が通っていないところは401を返す</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">auth</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">){</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">req</span><span class="p">.</span><span class="nx">isAuthenticated</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="mi">401</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">next</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">configure</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// OAuth認証用</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">session</span><span class="p">({</span> <span class="nx">secret</span><span class="o">:</span> <span class="s1">&#39;hogehoge&#39;</span><span class="p">,</span> <span class="nx">cookie</span><span class="o">:</span> <span class="p">{</span><span class="nx">maxAge</span><span class="o">:</span> <span class="mi">1000</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">24</span> <span class="o">*</span> <span class="mi">30</span><span class="p">}</span> <span class="p">}));</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">passport</span><span class="p">.</span><span class="nx">initialize</span><span class="p">());</span> <span class="c1">// Add passport initialization</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">passport</span><span class="p">.</span><span class="nx">session</span><span class="p">());</span>    <span class="c1">// Add passport initialization</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="nx">router</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// route to log in</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;/auth/twitter&quot;</span><span class="p">,</span> <span class="nx">passport</span><span class="p">.</span><span class="nx">authenticate</span><span class="p">(</span><span class="s1">&#39;twitter&#39;</span><span class="p">));</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;/auth/twitter/callback&quot;</span><span class="p">,</span> <span class="nx">passport</span><span class="p">.</span><span class="nx">authenticate</span><span class="p">(</span><span class="s1">&#39;twitter&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">successRedirect</span><span class="o">:</span> <span class="s1">&#39;/&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">falureRedirect</span><span class="o">:</span> <span class="s1">&#39;/login&#39;</span>
</span><span class='line'><span class="p">}));</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/todo&#39;</span><span class="p">,</span> <span class="nx">auth</span><span class="p">,</span> <span class="nx">db</span><span class="p">.</span><span class="nx">read</span><span class="p">);</span> <span class="c1">// GETの処理。要認証(auth関数の後にこれまでの処理実施)</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<h3>db.jsの修正</h3>

<p>ユーザ毎にデータを持つため、MongoDBのCRUD操作の際にuidを追加します。</p>

<figure class='code'><figcaption><span>db.js(createのみ抜粋) </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// CRUDのC</span>
</span><span class='line'><span class="c1">// セッション内のUIDに紐付けてデータを作成する</span>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">create</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">uid</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">uid</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">content</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">mydata</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">content</span><span class="p">.</span><span class="nx">uid</span> <span class="o">=</span> <span class="nx">uid</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">Db</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">mongoUri</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">db</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">db</span><span class="p">.</span><span class="nx">collection</span><span class="p">(</span><span class="s1">&#39;todolist&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">collection</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">collection</span><span class="p">.</span><span class="nx">insert</span><span class="p">(</span><span class="nx">content</span><span class="p">,</span> <span class="p">{</span><span class="nx">safe</span><span class="o">:</span> <span class="kc">true</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">db</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<h3>app.jsの修正(とlogin.html追加)</h3>

<p>web.jsのauth関数と連動して、認証されていない際に帰ってくる401エラーを検知する機能を実現します。
HTTPレスポンスを確認して、401エラーが含まれていればログインページに飛ばす処理を作ります。</p>

<p><a href="http://code.angularjs.org/1.0.8/docs/api/ng.$http">AngularJS公式の$httpページ</a>を参考に作りました。
が、使う前に「$q and deferred/promise APIs」の理解が必要と記載があり、そこが理解できていないため、
過不足があるかもしれません。</p>

<figure class='code'><figcaption><span>app.js修正(主な箇所の抜粋) </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">...</span>
</span><span class='line'><span class="c1">// []で囲わないと、gruntでminifyした際にエラーとなる</span>
</span><span class='line'><span class="nx">$httpProvider</span><span class="p">.</span><span class="nx">responseInterceptors</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="s1">&#39;$q&#39;</span><span class="p">,</span> <span class="s1">&#39;$location&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">$q</span><span class="p">,</span> <span class="nx">$location</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">promise</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">promise</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Success: 成功時はそのまま返す</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">response</span><span class="p">;</span>
</span><span class='line'>      <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Error: エラー時は401エラーならば/loginに遷移</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">status</span> <span class="o">===</span> <span class="mi">401</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">$location</span><span class="p">.</span><span class="nx">url</span><span class="p">(</span><span class="s1">&#39;/login&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">$q</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="nx">response</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}]);</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>login.html(追加) </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;page-header&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    login
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p&gt;&lt;button</span> <span class="na">class=</span><span class="s">&quot;btn-auth btn-twitter&quot;</span> <span class="na">onclick=</span><span class="s">&quot;location.href=&#39;/auth/twitter&#39;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      Sign in with <span class="nt">&lt;b&gt;</span>Twitter<span class="nt">&lt;/b&gt;&lt;/button&gt;&lt;/p&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2><a name="matome"></a>まとめと参考</h2>

<p>認証を追加したところまでのソースコードは<a href="https://github.com/torub/meanstack-sample/tree/1c47d5b917da08590030757a547bd14b8f0ad351">github</a>に置いてあります。見た目もしょぼく、セキュリティ面でも怪しいところはありますが、
一通り動作するはずです。</p>

<p>あとは最初から入れてあるBootStrapを使って見た目を直すとか、Herokuにアップしてみるとか、
Facebookでの認証も付けてみるとか、色々応用ができると思います。</p>

<h3>参考</h3>

<ul>
<li><a href="http://dailyjs.com/2013/04/11/angularjs-1/">DailyJSのAngularJS回</a></li>
<li><a href="http://sctfarch.blogspot.jp/2012/03/nodejs-express-mongodb-on-heroku.html">日々之スクラッチ: Node.js + express + MongoDB on Heroku でアプリケーションを作成する</a></li>
<li><a href="http://techblog.appirio.co.jp/2013/02/nodejsherokuangularjs-part-i.html">チュートリアル: node.jsとHerokuでAngularJSアプリを作る Part I </a></li>
<li><a href="http://creator.cotapon.org/articles/node-js/node_js-oauth-passport-facebook-twitter">【Node.js】PassportでFacebookとTwitterのOAuth認証する方法 | creator note</a></li>
<li><a href="http://taka512.hatenablog.com/entry/20110220/1298195574">SQL脳に優しいMongoDBクエリー入門 - taka512&#8217;s blog</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yeomanの設定]]></title>
    <link href="http://sat-pg.com/blog/yeoman.html"/>
    <updated>2013-11-24T01:33:00+09:00</updated>
    <id>http://sat-pg.com/blog/yeoman</id>
    <content type="html"><![CDATA[<p>Webアプリを作る際に、Yeomanを使うと雛形作成やデバッグが楽になるので愛用しています。
YeomanはYo(プロジェクト管理) + Bower(依存性管理) + Grunt(ビルド・テスト実施)からなり、JavaScript開発を助けてくれるNodejsのライブラリです。</p>

<p>Node.jsは入っているものとして、以下でインストールします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% npm install -g yo grunt-cli bower generator-angular generator-karma</span></code></pre></td></tr></table></div></figure>


<h3>Yo</h3>

<p>Yoを使うと各種雛形をインストールできます。
雛形はnpmで探すことが出来て、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% npm saerch yeoman-generator</span></code></pre></td></tr></table></div></figure>


<p>とすることで検索できます。
検索結果より、使いたい雛形を選択して</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% yo webapp</span></code></pre></td></tr></table></div></figure>


<p>とか、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% yo angular</span></code></pre></td></tr></table></div></figure>


<p>などとすることで、各種の雛形を生成できます。</p>

<h3>Bower</h3>

<p>Yoで雛形作った後、必要に応じてJavaScriptライブラリを追加する際、
Bowerを使うことで管理が容易にできるようになります。</p>

<p>自分でダウンロードしてフォルダに置くのではなく、</p>

<p>bower.jsonに設定を記入しつつインストールするには、例えばjquery後から追加する場合、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% bower install jquery --save</span></code></pre></td></tr></table></div></figure>


<p>と記入します。&#8211;saveを付けておくことで、インストールと同時にbower.jsonという設定ファイルに
記録されていきます。bower.jsonがディレクトリにあれば、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% bower install</span></code></pre></td></tr></table></div></figure>


<p>とすることで、記載したライブラリを後からまとめてインストール可能です。</p>

<h3>Grunt</h3>

<p>gruntはビルドツールです。
yoで雛形を作ったあとは、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% grunt server</span></code></pre></td></tr></table></div></figure>


<p>とすると、デバッグ用のWebサーバが起動して、ブラウザまで勝手に立ち上がって動作の確認を行うことができます。起動中のソースコードの変更などもすぐ反映されて使いやすいです。</p>

<p>また、minifyなど、リリース用の作業を実施する、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% grunt build</span></code></pre></td></tr></table></div></figure>


<p>や、jasminなどと連携してテストができる、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% grunt test</span></code></pre></td></tr></table></div></figure>


<p>などもあります。</p>

<h3>AngularJSのテンプレートインストール</h3>

<p>試しにAngularJSのテンプレートをインストールしてみます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% mkdir angular
</span><span class='line'>% cd angular
</span><span class='line'>% yo angular</span></code></pre></td></tr></table></div></figure>


<p>とすると、Bootstrap、Compassを使うか否かと、いくつかのangularのモジュールを使うかの
選択が出てきます。全部インストールして、
<code>grunt server</code> とすると、以下の
サンプル画面が出てきます。</p>

<p><img src="http://sat-pg.com/images/cap/yoangular.png"></p>

<p>画面を表示したまま、ファイルを更新していくと
即座に反映されるので、楽に開発することができます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime Text 2の設定まとめ]]></title>
    <link href="http://sat-pg.com/blog/sublimetext2.html"/>
    <updated>2013-06-29T19:42:00+09:00</updated>
    <id>http://sat-pg.com/blog/sublimetext2</id>
    <content type="html"><![CDATA[<p>最近Sublime Text 2をメインのエディタとして使っているのでメモ。</p>

<ul>
<li><a href="#shortcut">ショートカットキー</a></li>
<li><a href="#config">設定ファイル</a></li>
<li><a href="#package">パッケージ</a></li>
</ul>


<!-- more -->


<h2><a name="shortcut"></a>ショートカットキー</h2>

<p>すぐ忘れるショートカットキーをメモ。Windows版は、CmdをCtrlに置き換えると大体上手くいくはず。</p>

<ul>
<li>Cmd + Shift + p: コマンドパレット表示。ここでinstallと打つと、パッケージのインストールができる。</li>
<li>Cmd + p: ファイルの検索</li>
<li>Cmd + /: 行全体をコメントアウト。もう一回押すと解除される。</li>
<li>Cmd + Shift + d: 行のコピーを作る。ctrl+a, ctrl+k, ctrl + yを2回、と同じ。</li>
<li>Ctrl + Shift + k: 行を削除する。ctrl+a, ctrl+kと同じ。</li>
</ul>


<h2><a name="config"></a>設定ファイル</h2>

<p>メインの設定ファイルは<a href="https://github.com/torub/sublime-settings">github</a>に保存。</p>

<h2><a name="package"></a>パッケージ</h2>

<p>試してみたパッケージのリストは以下gistのまとめの通り。</p>

<div><script src='https://gist.github.com/5890884.js'></script>
<noscript><pre><code></code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone.jsのtutorial(1)]]></title>
    <link href="http://sat-pg.com/blog/backbone-tutorial-1.html"/>
    <updated>2013-06-18T02:57:00+09:00</updated>
    <id>http://sat-pg.com/blog/backbone-tutorial-1</id>
    <content type="html"><![CDATA[<p>ひきつづきBackbone.jsの勉強。</p>

<p><a href="http://dailyjs.com/2012/11/29/backbone-tutorial-1/">DailyJSのBackboneチュートリアルPart1</a>見てみたけど、
不明点だらけのため、調べたことをメモ。</p>

<h3>Step1: package.json</h3>

<ul>
<li>node.jsによるパッケージ管理ツール(npm)で、パッケージのバージョン管理をするためのもの。</li>
<li>package.jsonを記載して、<code>npm install</code>とすることで必要なモジュールがインストールされる。</li>
<li><code>./node_modules</code>以下にファイルがコピーされるため、git使う場合は.gitignoreに記載したほうがいい。</li>
<li>gruntのバージョンが変わっているためサンプルを一部修正。(gruntは、gruntの他にgrunt-cliとgrunt-initの3つに分かれたとのこと。<a href="https://github.com/gruntjs/grunt/wiki/Upgrading-from-0.3-to-0.4">gruntのmigration guide</a>)</li>
</ul>


<h3>Step2: server.js</h3>

<ul>
<li><a href="http://www.senchalabs.org/connect/">Connect</a>はNode.jsのミドルウェアフレームワークで、複数のミドルウェアが扱える。</li>
<li>Connectのstaticは、静的なファイルを返すサーバを作れるみたい。</li>
<li>Connect#useで、マウントポイントやルーティングの設定等ができるので、サンプルでは、<code>app</code>をルートディレクトリとし、<code>node_modules</code>はそのまま、<code>/js/lib/</code>は、<code>node_modules/requirejs/</code>にマウントをしている。</li>
<li>例) <code>http://localhost:8000/js/lib/require.js</code>と<code>http://localhost:8000/node_modules/requirejs/require.js</code>は同じファイルで、両方ともブラウザからアクセスできる。</li>
</ul>


<h3>Step3: RequrireJS</h3>

<p><a href="http://requirejs.org/">RequreJSの公式</a>から引用。</p>

<pre><code>RequireJS is a JavaScript file and module loader. It is optimized for in-browser use, 
but it can be used in other JavaScript environments, like Rhino and Node. 
Using a modular script loader like RequireJS will improve the speed and quality of your code.
</code></pre>

<ul>
<li>JavaScriptのファイル・モジュールの読み込み用ライブラリで、必要になったとき読み込む等で、スピードと品質を改善する。</li>
<li>RequireJSの設定はmain.jsに書くのが普通らしい。(このサンプルでもapp/js/main.jsに<code>requirejs.config..</code>を記載)</li>
<li><code>require(['hoge']..</code>と書くとapp/js/hoge.jsを読み込む</li>
<li><code>require</code>の後は、読み込んだjs内の関数や変数が使える。サンプルでは、<code>require['app']</code>として、app.js内のAppを<code>new App()</code>として呼び出している。</li>
<li>呼び出されるjs側では、1つのモジュールの単位毎にdefineで定義する模様。</li>
<li>defineの後の[]には、依存関係にあるモジュールを記載して使う。例えば<code>define(['lib/jquery'], function($){ ... })</code> のようにすると、jquery.jsに依存するモジュールが書ける。(define内部で$も使える。)</li>
<li>JSHintでエラーが出ないようにするには、JSHintの設定ファイルで、<code>"dojo" : true</code>とすればいい。(defineとrequireが許可される模様。)</li>
</ul>


<h3>Step4: テストの環境(Mocha, Chai)</h3>

<p><a href="http://visionmedia.github.io/mocha/">Mochaフレームワーク</a>を利用する環境の作成。</p>

<ul>
<li>Mochaは、先日のBuildInsiderの講演によると、TDDとかBDD(テストドリブン開発とビヘイビアドリブン開発)を実現するためのフレームワークらしい。</li>
<li>TDDとBDDで利用する関数が異なる。

<ul>
<li>TDDは、suite()、test()、setup()とteardown()</li>
<li>BDDは、describe()、it()、before()、beforeEach()とafterEach()</li>
</ul>
</li>
<li>setup.jsでTDD or BDD等を設定する。</li>
<li><p><code>require['app']</code>でapp.jsを読み込んで、<code>mocha.run();</code>としてテスト実行</p></li>
<li><p>(この作者は?)<a href="http://chaijs.com/api/assert/">chaiのassert</a>を使ってテストする。簡単のためっぽい。</p></li>
<li>server.jsのマウントポイントに/testを追加。(test/とapp両方を/testに。こうしないとrequire[&#8216;app&#8217;]が動かない。)</li>
</ul>


<h3>Step5: ビルド環境(grunt)</h3>

<ul>
<li><a href="http://grantjs.com">grant.js</a>は、JavaScriptのタスクランナー。

<ul>
<li>antとかMakefileのJavaScript版みたいなもの(?)</li>
</ul>
</li>
<li>JSHintのチェックとか、CoffeeScriptのコンパイルとかRequireJSの設定とかを自動化できる</li>
<li>grunt.jsが0.4系にバージョンアップしているので、サンプルを以下の通り修正

<ul>
<li>grunt.jsは、バージョンアップに伴いGrantfile.jsに変更(中身は同じ)</li>
<li>package.jsonに、<code>"grunt-cli": "latest", "grunt-init": "latest"</code>を追加</li>
<li>scriptsのgrunt部分を<code>"grunt" : "grunt"</code>に修正</li>
</ul>
</li>
<li>grunt.jsのコマンドラインインターフェイス(CLI)はgrunt-cliにある。<code>./node_modules/grunt-cli/bin/grunt</code>が本体。</li>
<li>全てのgrunt.jsのコードは、<code>module.exports = function(grunt) { };</code>内に書く必要がある。</li>
<li>loadNpmTasksでプラグインをロード、initConfigでロードしたプラグインの設定。</li>
<li>registerTaskは、プラグインを使わないような作業の設定(多分)。</li>
<li>defaultはgruntに引数を与えない場合に実行されるタスク。</li>
<li>サンプルの例で言えば、grunt とすると、execとcopy-requireが実行される。</li>
<li>grunt execとするとexec部分のみが実行される。</li>
</ul>


<p>※今後チュートリアルを進めていくのと並行して、出てきたライブラリ(RequireJS、mocha.js、grunt.jsなどなど)のサンプルを書いてみたい。</p>

<h3><a href="https://github.com/torub/backbone-tutorial/tree/7081a6f20be7e3a29a359dcc3904d40c09bfb11d">動作版のファイル - github</a></h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone.jsお試し]]></title>
    <link href="http://sat-pg.com/blog/backbonejs1.html"/>
    <updated>2013-06-17T00:21:00+09:00</updated>
    <id>http://sat-pg.com/blog/backbonejs1</id>
    <content type="html"><![CDATA[<p>Knockout.jsの次はBackbone.jsのテスト。</p>

<p><a href="http://dotinstall.com/lessons/basic_backbonejs">ドットインストールのBackbone.js入門</a>を試してみた結果を添付します。</p>

<!-- more -->


<h5>index.html</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;style </span><span class="na">type=</span><span class="s">&quot;text/css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nc">.completed</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">text-decoration</span><span class="o">:</span> <span class="k">line-through</span><span class="p">;</span>
</span><span class='line'>      <span class="k">color</span><span class="o">:</span> <span class="nb">gray</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="nt">&lt;/style&gt;</span>
</span><span class='line'><span class="nt">&lt;form</span> <span class="na">id=</span><span class="s">&quot;addTask&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">id=</span><span class="s">&quot;title&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">value=</span><span class="s">&quot;add&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;span</span> <span class="na">id=</span><span class="s">&quot;error&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;tasks&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span>Tasks left: <span class="nt">&lt;span</span> <span class="na">id=</span><span class="s">&quot;count&quot;</span><span class="nt">&gt;&lt;/span&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/template&quot;</span> <span class="na">id=</span><span class="s">&quot;task-template&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;checkbox&quot;</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;toggle&quot;</span> <span class="o">&lt;%-</span> <span class="nx">completed</span> <span class="o">?</span> <span class="s1">&#39;checked&#39;</span> <span class="o">:</span> <span class="s1">&#39;&#39;</span> <span class="o">%&gt;</span> <span class="err">/&gt; </span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">span</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;&lt;%- completed? &#39;completed&#39;:&#39;&#39;%&gt;&quot;</span><span class="o">&gt;</span> <span class="o">&lt;%-</span> <span class="nx">title</span> <span class="o">%&gt;</span> <span class="o">&lt;</span><span class="err">/span&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">span</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;delete&quot;</span><span class="o">&gt;</span><span class="p">[</span><span class="nx">x</span><span class="p">]</span><span class="o">&lt;</span><span class="err">/span&gt;</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://underscorejs.org/underscore-min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://code.jquery.com/jquery-1.10.1.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://backbonejs.org/backbone-min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;js/app.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h5>app.js</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Model</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">Task</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">defaults</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">title</span><span class="o">:</span> <span class="s2">&quot;do something&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">completed</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">validate</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">attrs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">_</span><span class="p">.</span><span class="nx">isEmpty</span><span class="p">(</span><span class="nx">attrs</span><span class="p">.</span><span class="nx">title</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">return</span> <span class="s1">&#39;title must not be empty&#39;</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;invalid&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">model</span><span class="p">,</span> <span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#error&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
</span><span class='line'>          <span class="p">})</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">Tasks</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Collection</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span> <span class="nx">model</span><span class="o">:</span> <span class="nx">Task</span> <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// View</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">TaskView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">tagName</span><span class="o">:</span> <span class="s1">&#39;li&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;destroy&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">remove</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;change&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">events</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="s1">&#39;click .delete&#39;</span><span class="o">:</span> <span class="s1">&#39;destroy&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="s1">&#39;click .toggle&#39;</span><span class="o">:</span> <span class="s1">&#39;toggle&#39;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">destroy</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="nx">confirm</span><span class="p">(</span><span class="s1">&#39; are you ok ?&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">destroy</span><span class="p">();</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">toggle</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;completed&#39;</span><span class="p">,</span> <span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;completed&#39;</span><span class="p">));</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">remove</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">remove</span><span class="p">();</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">template</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#task-template&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">()),</span>
</span><span class='line'>      <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">temp</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">toJSON</span><span class="p">());</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="nx">temp</span><span class="p">);</span>
</span><span class='line'>          <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">TasksView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">tagName</span><span class="o">:</span> <span class="s1">&#39;ul&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">collection</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;add&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">addNew</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">collection</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;change&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">updateCount</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">collection</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;destroy&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">updateCount</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">addNew</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">task</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">taskView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">TaskView</span><span class="p">({</span><span class="nx">model</span><span class="o">:</span><span class="nx">task</span><span class="p">});</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">taskView</span><span class="p">.</span><span class="nx">render</span><span class="p">().</span><span class="nx">el</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#title&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">).</span><span class="nx">focus</span><span class="p">();</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">updateCount</span><span class="p">();</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">updateCount</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">uncompletedTasks</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">collection</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">task</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">return</span> <span class="o">!</span><span class="nx">task</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;completed&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="p">});</span>
</span><span class='line'>          <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#count&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">uncompletedTasks</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">collection</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">task</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="kd">var</span> <span class="nx">taskView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">TaskView</span><span class="p">({</span><span class="nx">model</span><span class="o">:</span> <span class="nx">task</span><span class="p">});</span>
</span><span class='line'>              <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">taskView</span><span class="p">.</span><span class="nx">render</span><span class="p">().</span><span class="nx">el</span><span class="p">);</span>
</span><span class='line'>          <span class="p">},</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">updateCount</span><span class="p">();</span>
</span><span class='line'>          <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">AddTaskView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#addTask&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">events</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="s1">&#39;submit&#39;</span><span class="o">:</span> <span class="s1">&#39;submit&#39;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">submit</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">task</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Task</span><span class="p">();</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">task</span><span class="p">.</span><span class="nx">set</span><span class="p">({</span><span class="nx">title</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#title&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">()},</span> <span class="p">{</span><span class="nx">validate</span><span class="o">:</span> <span class="kc">true</span><span class="p">}))</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">this</span><span class="p">.</span><span class="nx">collection</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">task</span><span class="p">);</span>
</span><span class='line'>              <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#error&#39;</span><span class="p">).</span><span class="nx">empty</span><span class="p">();</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">tasks</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Tasks</span><span class="p">([</span>
</span><span class='line'>          <span class="p">{</span><span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;task1&#39;</span><span class="p">,</span> <span class="nx">completed</span><span class="o">:</span> <span class="kc">true</span><span class="p">},</span>
</span><span class='line'>          <span class="p">{</span><span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;task2&#39;</span><span class="p">},</span>
</span><span class='line'>          <span class="p">{</span><span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;task3&#39;</span><span class="p">},</span>
</span><span class='line'>          <span class="p">{</span><span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;task4&#39;</span><span class="p">}</span>
</span><span class='line'>      <span class="p">]);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">tasksView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">TasksView</span><span class="p">({</span><span class="nx">collection</span><span class="o">:</span> <span class="nx">tasks</span><span class="p">});</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">addTaskView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AddTaskView</span><span class="p">({</span><span class="nx">collection</span><span class="o">:</span> <span class="nx">tasks</span><span class="p">});</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#tasks&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">tasksView</span><span class="p">.</span><span class="nx">render</span><span class="p">().</span><span class="nx">el</span><span class="p">)</span>
</span><span class='line'><span class="p">}());</span>
</span></code></pre></td></tr></table></div></figure>


<h4>実行結果</h4>



<p><form id="addTask">
<input type="text" id="title"/>
<input type="submit" value="add"/>
<span id="error"></span>
</form></p>

<div id="tasks"></div>


<p>Tasks left: <span id="count"></span></p>




<script type="text/template" id="task-template">
    <input type="checkbox" class="toggle" <%- completed ? 'checked' : '' %> />
    <span <%- completed? 'style=text-decoration:line-through;color:gray;':''%>> <%- title %> </span>
    <span class="delete">[x]</span>
</script>


<script src="http://underscorejs.org/underscore-min.js"></script>


<script src="http://code.jquery.com/jquery-1.10.1.min.js"></script>


<script src="http://backbonejs.org/backbone-min.js"></script>


<script>
(function() {
    // Model
    var Task = Backbone.Model.extend({
        defaults: {
            title: "do something",
            completed: false
        },
        validate: function(attrs) {
            if (_.isEmpty(attrs.title)) {
                return 'title must not be empty';
            }
        },
        initialize: function() {
            this.on('invalid', function(model, error) {
                $('#error').html(error);
            })
        }
    });
    var Tasks = Backbone.Collection.extend({ model: Task });

    // View
    var TaskView = Backbone.View.extend({
        tagName: 'li',
        initialize: function() {
            this.model.on('destroy', this.remove, this);
            this.model.on('change', this.render, this);
        },
        events: {
            'click .delete': 'destroy',
            'click .toggle': 'toggle'
        },
        destroy: function() {
            if(confirm(' are you ok ?')) {
                this.model.destroy();
            }
        },
        toggle: function() {
            this.model.set('completed', !this.model.get('completed'));
        },
        remove: function() {
            this.$el.remove();
        },
        template: _.template($('#task-template').html()),
        render: function() {
            var temp = this.template(this.model.toJSON());
            this.$el.html(temp);
            return this;
        }
    });
    var TasksView = Backbone.View.extend({
        tagName: 'ul',
        initialize: function() {
            this.collection.on('add', this.addNew, this);
            this.collection.on('change', this.updateCount, this);
            this.collection.on('destroy', this.updateCount, this);
        },
        addNew: function(task) {
            var taskView = new TaskView({model:task});
            this.$el.append(taskView.render().el);
            $('#title').val('').focus();
            this.updateCount();
        },
        updateCount: function() {
            var uncompletedTasks = this.collection.filter(function(task) {
                return !task.get('completed');
            });
            $('#count').html(uncompletedTasks.length);
        },
        render: function() {
            this.collection.each(function(task) {
                var taskView = new TaskView({model: task});
                this.$el.append(taskView.render().el);
            }, this);
            this.updateCount();
            return this;
        }
    });

    var AddTaskView = Backbone.View.extend({
        el: '#addTask',
        events: {
            'submit': 'submit'
        },
        submit: function(e) {
            e.preventDefault();
            var task = new Task();
            if (task.set({title: $('#title').val()}, {validate: true})) {
                this.collection.add(task);
                $('#error').empty();
            }
        }
    });
    var tasks = new Tasks([
            {title: 'task1', completed: true},
            {title: 'task2'},
            {title: 'task3'},
            {title: 'task4'}
        ]);
    var tasksView = new TasksView({collection: tasks});
    var addTaskView = new AddTaskView({collection: tasks});
    $('#tasks').html(tasksView.render().el)
}());
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Knockout.jsお試し(2)]]></title>
    <link href="http://sat-pg.com/blog/knockoutjs2.html"/>
    <updated>2013-06-10T11:09:00+09:00</updated>
    <id>http://sat-pg.com/blog/knockoutjs2</id>
    <content type="html"><![CDATA[<p>せっかく勉強会で概要を聞いてきたので、サンプルを動かすその2。 <a href="http://learn.knockoutjs.com/#/?tutorial=collections">公式ページのサンプルその2</a>の内容をちょっとだけ変更。</p>

<h4>サンプル2</h4>

<ol>
<li>複数の要素を監視対象にするにはobservableArrayを使う</li>
<li>observableArrayからのデータ削除にはremoveを使う</li>
<li>observableArrayへのデータ追加にはpushを使う</li>
<li>ここがobservableでなくても動くのがよくわからない??</li>
<li>繰り返したい項目はforeachを使う</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s1">&#39;text/javascript&#39;</span> <span class="nx">src</span><span class="o">=</span><span class="s1">&#39;http://ajax.aspnetcdn.com/ajax/knockout/knockout-2.2.1.js&#39;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;DOMContentLoaded&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">Checkout</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">menu</span><span class="p">,</span> <span class="nx">num</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">self</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">self</span><span class="p">.</span><span class="nx">menu</span> <span class="o">=</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">observable</span><span class="p">(</span><span class="nx">menu</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">self</span><span class="p">.</span><span class="nx">num</span> <span class="o">=</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">observable</span><span class="p">(</span><span class="nx">num</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">self</span><span class="p">.</span><span class="nx">check</span> <span class="o">=</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">computed</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">self</span><span class="p">.</span><span class="nx">menu</span><span class="p">().</span><span class="nx">price</span> <span class="o">*</span> <span class="nx">self</span><span class="p">.</span><span class="nx">num</span><span class="p">();</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">CashierViewModel</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">self</span><span class="p">.</span><span class="nx">menuList</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>          <span class="p">{</span> <span class="nx">menuName</span><span class="o">:</span><span class="s1">&#39;Aランチ&#39;</span><span class="p">,</span> <span class="nx">price</span><span class="o">:</span><span class="mi">1000</span> <span class="p">},</span>
</span><span class='line'>          <span class="p">{</span> <span class="nx">menuName</span><span class="o">:</span><span class="s1">&#39;Bランチ&#39;</span><span class="p">,</span> <span class="nx">price</span><span class="o">:</span><span class="mi">1500</span> <span class="p">},</span>
</span><span class='line'>          <span class="p">{</span> <span class="nx">menuName</span><span class="o">:</span><span class="s1">&#39;スペシャルランチ&#39;</span><span class="p">,</span> <span class="nx">price</span><span class="o">:</span><span class="mi">3000</span> <span class="p">}</span>
</span><span class='line'>      <span class="p">];</span>
</span><span class='line'>      <span class="nx">self</span><span class="p">.</span><span class="nx">checkoutList</span> <span class="o">=</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">observableArray</span><span class="p">([</span>    <span class="c1">// 1</span>
</span><span class='line'>          <span class="k">new</span> <span class="nx">Checkout</span><span class="p">(</span><span class="s1">&#39;鈴木&#39;</span><span class="p">,</span> <span class="nx">self</span><span class="p">.</span><span class="nx">menuList</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">1</span><span class="p">),</span>
</span><span class='line'>          <span class="k">new</span> <span class="nx">Checkout</span><span class="p">(</span><span class="s1">&#39;鈴木&#39;</span><span class="p">,</span> <span class="nx">self</span><span class="p">.</span><span class="nx">menuList</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="mi">2</span><span class="p">),</span>
</span><span class='line'>      <span class="p">]);</span>
</span><span class='line'>      <span class="nx">self</span><span class="p">.</span><span class="nx">removeData</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span> <span class="nx">self</span><span class="p">.</span><span class="nx">checkoutList</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span> <span class="p">}</span>  <span class="c1">// 2</span>
</span><span class='line'>      <span class="nx">self</span><span class="p">.</span><span class="nx">addData</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">self</span><span class="p">.</span><span class="nx">checkoutList</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">Checkout</span><span class="p">(</span><span class="s1">&#39;佐藤&#39;</span><span class="p">,</span> <span class="nx">self</span><span class="p">.</span><span class="nx">newmenu</span><span class="p">,</span> <span class="nx">self</span><span class="p">.</span><span class="nx">newnum</span><span class="p">));</span>    <span class="c1">//3</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nx">self</span><span class="p">.</span><span class="nx">total</span> <span class="o">=</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">computed</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">t</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>          <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">self</span><span class="p">.</span><span class="nx">checkoutList</span><span class="p">().</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">t</span> <span class="o">+=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">checkoutList</span><span class="p">()[</span><span class="nx">i</span><span class="p">].</span><span class="nx">check</span><span class="p">();</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">t</span><span class="p">;</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">self</span><span class="p">.</span><span class="nx">newmenu</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">menuList</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span> <span class="c1">//4</span>
</span><span class='line'>      <span class="nx">self</span><span class="p">.</span><span class="nx">newnum</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>   <span class="c1">//4</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">ko</span><span class="p">.</span><span class="nx">applyBindings</span><span class="p">(</span><span class="k">new</span> <span class="nx">CashierViewModel</span><span class="p">());</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;strong&gt;</span>配列表示のテスト(レストランの会計)<span class="nt">&lt;/strong&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span>売り上げ合計：<span class="nt">&lt;span</span> <span class="na">data-bind=</span><span class="s">&quot;text: total()&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>円<span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;table&gt;</span>
</span><span class='line'>    <span class="nt">&lt;thead&gt;&lt;tr&gt;</span>
</span><span class='line'>        <span class="nt">&lt;th&gt;</span>レジ担当者<span class="nt">&lt;/th&gt;&lt;th&gt;</span>メニュー<span class="nt">&lt;/th&gt;&lt;th&gt;</span>数量<span class="nt">&lt;/th&gt;&lt;th&gt;</span>価格<span class="nt">&lt;/th&gt;&lt;th&gt;&lt;/th&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;&lt;/thead&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tbody</span> <span class="na">data-bind=</span><span class="s">&quot;foreach: checkoutList&quot;</span><span class="nt">&gt;</span> <span class="c">&lt;!-- 5 --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>            <span class="nt">&lt;td</span> <span class="na">data-bind=</span><span class="s">&quot;text: name&quot;</span><span class="nt">&gt;&lt;/td&gt;</span>
</span><span class='line'>            <span class="nt">&lt;td&gt;&lt;select</span> <span class="na">data-bind=</span><span class="s">&quot;options: $root.menuList, value: menu, optionsText: &#39;menuName&#39;&quot;</span><span class="nt">&gt;&lt;/select&gt;&lt;/td&gt;</span>
</span><span class='line'>            <span class="nt">&lt;td&gt;&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">data-bind=</span><span class="s">&quot;value: num&quot;</span> <span class="nt">/&gt;&lt;/td&gt;</span>
</span><span class='line'>            <span class="nt">&lt;td</span> <span class="na">data-bind=</span><span class="s">&quot;text: check&quot;</span><span class="nt">&gt;&lt;/td&gt;</span>
</span><span class='line'>            <span class="nt">&lt;td&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span> <span class="na">data-bind=</span><span class="s">&quot;click: $root.removeData&quot;</span><span class="nt">&gt;</span>Remove<span class="nt">&lt;/a&gt;&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tbody&gt;</span>
</span><span class='line'><span class="nt">&lt;/table&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span>データ追加<span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span>メニュー：<span class="nt">&lt;select</span> <span class="na">data-bind=</span><span class="s">&quot;options: $root.menuList, value: newmenu, optionsText: &#39;menuName&#39;&quot;</span><span class="nt">&gt;&lt;/select&gt;</span>
</span><span class='line'>数量：<span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">data-bind=</span><span class="s">&quot;value: newnum&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;button</span> <span class="na">data-bind=</span><span class="s">&quot;click: addData&quot;</span><span class="nt">&gt;</span>追加<span class="nt">&lt;/button&gt;&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>実行結果は↓</p>

<!-- more -->


<h4>サンプル2実行結果</h4>

<script type='text/javascript' src='http://ajax.aspnetcdn.com/ajax/knockout/knockout-2.2.1.js'></script>


<script>
window.addEventListener('DOMContentLoaded', function(){
    function Checkout(name, menu, num) {
        var self = this;
        self.name = name;
        self.menu = ko.observable(menu);    // 1
        self.num = ko.observable(num);
        self.check = ko.computed(function() {
            return self.menu().price * self.num();
        });
    }

    function CashierViewModel() {
        var self = this;
        self.menuList = [
            { menuName:'Aランチ', price:1000 },
            { menuName:'Bランチ', price:1500 },
            { menuName:'スペシャルランチ', price:3000 }
        ];
        self.newmenu = self.menuList[0];
        self.newnum = 1;
        self.checkoutList = ko.observableArray([
            new Checkout('鈴木', self.menuList[0], 1),
            new Checkout('鈴木', self.menuList[1], 2),
        ]);
        self.removeData = function(data) { self.checkoutList.remove(data); }
        self.addData = function() {
            self.checkoutList.push(new Checkout('佐藤', self.newmenu, self.newnum));
        }

        self.total = ko.computed(function() {
            var t = 0;
            for(var i = 0; i < self.checkoutList().length; i ++) {
                t += self.checkoutList()[i].check();
            }
            return t;
        });
    }

    ko.applyBindings(new CashierViewModel());
});
</script>


<p><strong>配列表示のテスト(レストランの会計)</strong></p>

<p>売り上げ合計：<span data-bind="text: total()"></span>円</p>


<table>
    <thead><tr>
        <th>レジ担当者</th><th>メニュー</th><th>数量</th><th>価格</th><th></th>
    </tr></thead>
    <tbody data-bind="foreach: checkoutList"> <!-- -->
        <tr>
            <td data-bind="text: name"></td>
            <td><select data-bind="options: $root.menuList, value: menu, optionsText: 'menuName'"></select></td>
            <td><input type="text" data-bind="value: num" /></td>
            <td data-bind="text: check"></td>
            <td><a href="#" data-bind="click: $root.removeData">Remove</a></td>
        </tr>
    </tbody>
</table>


<p>データ追加</p>


<p>メニュー：<select data-bind="options: $root.menuList, value: newmenu, optionsText: 'menuName'"></select>
数量：<input type="text" data-bind="value: newnum" />
<button data-bind="click: addData">追加</button></p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Knockout.jsお試し(1)]]></title>
    <link href="http://sat-pg.com/blog/knockoutjs1.html"/>
    <updated>2013-06-10T01:37:00+09:00</updated>
    <id>http://sat-pg.com/blog/knockoutjs1</id>
    <content type="html"><![CDATA[<p>せっかく勉強会で概要を聞いてきたので、サンプルを動かしてみる。
<a href="http://learn.knockoutjs.com/#/?tutorial=intro">公式ページのサンプル</a>の内容をちょっとだけ変更。</p>

<h4>サンプル1</h4>

<ol>
<li>変数をko.observable()で囲うことで、監視対象にできる。</li>
<li>computedを使うことで、複数のobservableな変数を組み合わせた値を作れる。observableな変数が変更されると、computedな値も変更される。</li>
<li>applyBindingでViewModelを登録</li>
<li>data-bindを利用してDOMとViewModelの変数を関連付け</li>
<li>clickイベントと関数の紐付け。サンプルはクリックで大文字小文字を変更。</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s1">&#39;text/javascript&#39;</span> <span class="nx">src</span><span class="o">=</span><span class="s1">&#39;http://ajax.aspnetcdn.com/ajax/knockout/knockout-2.2.1.js&#39;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;DOMContentLoaded&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">flag</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">AppViewModel</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">=</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">observable</span><span class="p">(</span><span class="s2">&quot;hello&quot;</span><span class="p">);</span>    <span class="c1">// 1</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span> <span class="o">=</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">observable</span><span class="p">(</span><span class="s2">&quot;world!&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">fullName</span> <span class="o">=</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">computed</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>   <span class="c1">// 2</span>
</span><span class='line'>          <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span><span class="p">()</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">();</span>
</span><span class='line'>      <span class="p">},</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">toggleLastName</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">current</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">();</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">flag</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">(</span><span class="nx">current</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">());</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">(</span><span class="nx">current</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">());</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="nx">flag</span> <span class="o">=</span> <span class="o">!</span><span class="nx">flag</span><span class="p">;</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="c1">// Activates knockout.js</span>
</span><span class='line'>  <span class="nx">ko</span><span class="p">.</span><span class="nx">applyBindings</span><span class="p">(</span><span class="k">new</span> <span class="nx">AppViewModel</span><span class="p">());</span>   <span class="c1">// 3</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;p&gt;</span>First name: <span class="nt">&lt;input</span> <span class="na">data-bind=</span><span class="s">&quot;value: firstName&quot;</span> <span class="nt">/&gt;&lt;/p&gt;</span> <span class="c">&lt;!-- 4 --&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span>Last name: <span class="nt">&lt;input</span> <span class="na">data-bind=</span><span class="s">&quot;value: lastName&quot;</span> <span class="nt">/&gt;&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span>FULL NAME: <span class="nt">&lt;strong</span> <span class="na">data-bind=</span><span class="s">&quot;text: fullName&quot;</span><span class="nt">&gt;&lt;/strong&gt;&lt;/P&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;button</span> <span class="na">data-bind=</span><span class="s">&quot;click: toggleLastName&quot;</span><span class="nt">&gt;</span>toggle!<span class="nt">&lt;/button&gt;</span>   <span class="c">&lt;!-- 5 --&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>実行結果は↓</p>

<!-- more -->


<h4>サンプル1実行結果</h4>

<p>toggleボタンを押すと、Last nameのみでなく、FULL NAMEも同時に変わる。jQueryでやるより楽かも。</p>

<script type='text/javascript' src='http://ajax.aspnetcdn.com/ajax/knockout/knockout-2.2.1.js'></script>


<script>
window.addEventListener('DOMContentLoaded', function(){
    var flag = true;
    function AppViewModel() {
        this.firstName = ko.observable("hello");
        this.lastName = ko.observable("world!");
        this.fullName = ko.computed(function() {
            return this.firstName() + " " + this.lastName();
        }, this);

        this.toggleLastName = function() {
            var current = this.lastName();
            if (flag) {
                this.lastName(current.toUpperCase());
            } else {
                this.lastName(current.toLowerCase());
            }
            flag = !flag;
        };
    }
    // Activates knockout.js
    ko.applyBindings(new AppViewModel());
});
</script>




<p>First name: <input data-bind="value: firstName" /></p>


<p>Last name: <input data-bind="value: lastName" /></p>


<p>FULL NAME: <strong data-bind="text: fullName"></strong></P>


<p><button data-bind="click: toggleLastName">toggle!</button></p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第1回 Build Insider OFFLINEメモ]]></title>
    <link href="http://sat-pg.com/blog/buildinsider.html"/>
    <updated>2013-06-08T23:45:00+09:00</updated>
    <id>http://sat-pg.com/blog/buildinsider</id>
    <content type="html"><![CDATA[<p><a href="http://www.buildinsider.net/event/offline/01">第1回 Build Insider OFFLINE</a>に行ってきたので、聞いてきた話をメモ。</p>

<!-- more -->


<h2>Keynote</h2>

<p>キーノートには遅れていったので気になった言葉のみ：<a href="http://www.microsoft.com/japan/web/webmatrix/">WebMatrix</a>、<a href="http://research.microsoft.com/en-us/projects/illumiroom/">illumiroom</a>、<a href="http://re.buildinsider.net/about/biwanted.pdf">記事募集</a></p>

<hr />

<h2>JavaScript ライブラリーを使い倒そう</h2>

<p>WINGSプロジェクト 安西 剛さんの講演。</p>

<p>かつてはエンタープライズでは邪魔者扱いのJavaScriptだったが、GoogleMapでのAjax利用から、みんなが使い始め、
最近になってJavaScript天国な状況になってきた。その分、複雑化している状況。</p>

<p>今後ますますライブラリが重要ということで、6つの観点で紹介。</p>

<h4>1. 手間を省こう系</h4>

<ul>
<li><p>jQuery, prottotype.js：prototype.jsは既存オブジェクトを拡張している。jQueryはしていない。(この差が今の普及の差に繋がっている?)</p></li>
<li><p>UI系: 無数にありすぎる。利用によりできるだけコードを書かずにリッチなUIを実現する系。</p>

<ul>
<li>Chosen (セレクトボックス)</li>
<li>竹取JS (縦書き)</li>
<li>jQuery UI</li>
</ul>
</li>
<li>UIフレームワーク

<ul>
<li>Twitter Bootstrap: どちらかというとCSSフレームワーク?</li>
</ul>
</li>
</ul>


<p>これらのライブラリを使うと、ページの初期表示速度が遅くなるため、CSSスプライト等を利用して読み込むファイルを少なくしたり、JSの処理を一番下に記載して、ページ読み込み時の処理を最小限にすることが重要。</p>

<h4>2. 言語特性補う系</h4>

<ul>
<li>CoffeeScript：言語特性からくる問題を回避。スコープ、クロージャなど。</li>
<li>TypeScript</li>
</ul>


<h4>3. フレームワーク</h4>

<p>JavaScriptが大規模複雑化したことによる設計の困難さを回避。まだ乱立している状態。
ポイントはHTML/UIとの関係性をどのようにするかや、マウスやキーなどのイベントをどう拾うか。
github上ではbackbone.jsが人気の模様。(backbone/knockout/Angularは2つめの講演で詳細あり)</p>

<ul>
<li>MVCフレームワーク

<ul>
<li>backbone.js：後述</li>
</ul>
</li>
<li>MVVM

<ul>
<li>Knockout：後述</li>
</ul>
</li>
<li>CoffeeScript対応MVC

<ul>
<li>Batman.js</li>
<li>Spine.js：Ruby on Railsみたいな感じにコマンドベースで作れる</li>
</ul>
</li>
<li>ViewとModelのデータバインディング

<ul>
<li>Angular.js：後述</li>
<li>Ember.js：データバインディングに特徴あり。JSとHTMLを宣言部分で紐付け。テンプレートエンジンと組み合わせて表示。</li>
</ul>
</li>
</ul>


<h4>4. ゲーム系</h4>

<ul>
<li>enchant.js

<ul>
<li>教育に適しているのではないか。キャラクターをオブジェクトとして考えやすいため、オブジェクト思考の勉強にもよいかも。</li>
<li>イベントドリブンで、イベントは非同期処理</li>
</ul>
</li>
</ul>


<h4>5. サーバ系</h4>

<ul>
<li>Node.js

<ul>
<li>v8エンジンが入っていて速い</li>
<li>イベントルーブとノンブロッキングIOが特徴で、シングルスレッドが特徴。</li>
<li>イベントが起きてもどんどんキューに入れていって処理を行う形態。</li>
<li>同期的な処理は書きづらい。phpみたいなようなことは難しい。MySQL問い合わせなども非同期で書く必要がある。</li>
<li>Express.jsがデファクト。Webアプリケーションを作る最低限が準備されている。例外やセッションも作成可能。</li>
<li>app.js→ルーティング→ビュー(テンプレートエンジン)</li>
</ul>
</li>
</ul>


<h4>6. テスト系</h4>

<p>ウォーターフォールは、品質をあとで担保するモデル。皆、この考えがしみついている。
現在は、反応を見るため、早めに市場にリリースし、頻繁なバージョンアップが必要な時代になっており、
あとで担保するような考えかたは難しくなってきている。</p>

<p>そこで、自動テスト、テスト駆動開発、継続的インテグレーション、クロスブラウザ対応、、等々が必要で、
常にリリース可能な品質を保つよう、マインドを変えたほうがいい。品質はあとでなく、随時作りこんでいく必要がある。</p>

<p>ライブラリを利用してこれらに対応する。</p>

<ul>
<li>テスティングフレームワーク

<ul>
<li>Mocha
  BDD(振る舞い駆動開発)、TDD(テスト駆動)、、など色々できる。
  TDDはテストを書いてからメソッド実装
  BDDはユーザから見たふるまいから</li>
</ul>
</li>
<li>アサートモジュール</li>
<li>クロスブラウザ自動チェック

<ul>
<li>JSTestDriver</li>
<li>サーバプロセスを立ち上げ、各ブラウザでアクセス</li>
<li>テスト実行→各ブラウザで実行される</li>
</ul>
</li>
<li>モック、スタブ: sinon.js、レスポンスの偽装ができる</li>
<li>静的解析1 JSLint、JSHint</li>
<li>静的解析2 jscoverage: どこまで試験ができているか。</li>
</ul>


<hr />

<h2>3つのMVC系人気フレームワーク、Backbone.js／AngularJS／Knockout.js</h2>

<h4><a href="http://backbonejs.org/">Backbone.js</a></h4>

<p>LINE株式会社 開発１室 UITチーム　清水 大輔さんの講演。</p>

<ul>
<li>MV*アプリを作る手助けとなるJSライブラリ。軽量、シンプル。</li>
<li>オブジェクト思考、MVC知識が必要</li>
<li>動的要素が少ないページでは不要</li>
<li>必要なライブラリは、jQuery(Zepto, Enderでも可)、underscore.js(配列操作などのUtility)、json2.js(jsonパーサ)など。</li>
<li>構成要素は、Bacobone.Event、Model、Collection、View、Sync、Router</li>
<li>MVCの利点: DOMからビジネスロジックが分離できる、UTがやりやすい等</li>
<li>Grunt.jsというビルドツールが便利。jshint、jasminなどでのチェック、ミニファイ等を実施</li>
<li>パフォーマンス

<ul>
<li>DOM: reflow、repaintを減らす。delegate eventを利用する</li>
<li>メモリ管理: メモリリークがある。view#removeでの後処理を意識する</li>
<li>通信: localStrageをうまく利用する</li>
</ul>
</li>
</ul>


<h4><a href="http://angularjs.org/">AngularJS</a> 概説</h4>

<p>AngularJS Japan User Group 管理人の金井 健一さんの講演</p>

<ul>
<li>Google製のフルスタックMVCフレームワーク</li>
<li>{{ なみかっこで囲う書き方 }}</li>
<li>得意：CRUD系のアプリケーション、管理ページ、マイページ等</li>
<li>苦手：モバイル向け(フルスタックのため容量が多め)、ゲーム系のグラフィックの扱い</li>
<li>開発環境：YEOMAN(YO, GRUNT, BOWER)

<ul>
<li>双方向データバインディング</li>
<li>テンプレートとしてのHTML：サーバからJSONもらって組み立て)</li>
<li>再利用可能なコンポーネント：WebComponentを見すえて、独自のタグ実装が可能。実装は結構複雑</li>
<li>ビューとルーティング</li>
<li>テストとその可用性：Karma(Angular用に開発されており相性がいい)</li>
</ul>
</li>
<li>モバイルについては、ng-mobileというモジュールが追加され機能が追加された。
ただし、その分容量が増加しているため、最初の一回が遅い(100kbほど)。2回目以降はキャッシュされる。</li>
<li>UIは、AngularUIなどのAngularが用意しているライブラリの他、プラグインもある。</li>
</ul>


<h4><a href="http://knockoutjs.com/">Knockout.js</a>の概要</h4>

<p>沢渡 真雪さんの講演</p>

<ul>
<li>JavascirptアプリケーションのためのMVVMパターン。MVVMとは、ModelとViewの間にある、Viewのための振る舞いや状態を持つModel(ViewModel)。</li>
<li><a href="https://www.google.co.jp/search?q=MVVM+ugaya40&amp;oq=MVVM+ugaya40&amp;aqs=chrome.0.57j0.307j0&amp;sourceid=chrome&amp;ie=UTF-8">MVVM ugaya40で検索</a>するとわかりやすいらしい</li>
<li>単一のライブラリ(knockout.js)で、Observableと、バインディング機構のみで成り立っており軽量、シンプル。</li>
<li>ASP.NET開発チームの方が個人で開発しているため、ASP.NET MVCとともに採用されていることも多い。</li>
<li>Windows Azureポータルや、アメーバピグのスマホ版で利用</li>
<li>Observable

<ul>
<li>値を監視可能な形にラップする仕組み。</li>
<li>ko.observable：var a = 1 は監視できないが、var v = ko.observable(1)とすると、v()で値取得(getter)、v(value)で値代入(setter)とすることができる。</li>
<li>subscribeメソッドで監視して、変更時にコールバックが可能。v.subscribe(function(newv) { &#8230; }, this);</li>
<li>ko.observableArrayを使うことで、同様の監視を配列でも可能。push、popなどもあり。</li>
<li>ko.computed：observable同様の監視可能な形。observableの変更も取得可能。普通の変数の値を変えても特に変化なし。</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">value1</span> <span class="o">=</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">observable</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="nx">value2</span> <span class="o">=</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">observable</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="nx">computed</span> <span class="o">=</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">computed</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">vaulue1</span><span class="p">()</span> <span class="o">+</span> <span class="nx">value2</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">computed</span><span class="p">();</span>
</span><span class='line'><span class="o">-&gt;</span><span class="mi">3</span>
</span><span class='line'><span class="nx">value2</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class='line'><span class="nx">computed</span><span class="p">();</span>
</span><span class='line'><span class="o">-&gt;</span><span class="mi">11</span>
</span><span class='line'><span class="nx">computed</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">newValue</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span><span class="nx">newValue</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">value1</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class='line'><span class="o">-&gt;</span><span class="err">アラートが出るはず</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>バインディング：監視可能なオブジェクトを、HTMLのDOMにひもづける機能</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">data-bind=</span><span class="s">&quot;value: value1&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">data-bind=</span><span class="s">&quot;value: value2&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;span</span> <span class="na">data-bind=</span><span class="s">&quot;value: computed&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>最後にJavaScript側でバインディグを適用する: applyBindings

<ul>
<li>値を入力(value、text、html)、属性オンオフ(CSS、style)、イベント(click、event)などが可能</li>
</ul>
</li>
</ul>


<hr />

<h2>リアルタイム Web 最前線 ～ Socket.IO ＆ SignalR 徹底解説</h2>

<p>ソーシャルグリッド株式会社 取締役CTO 芝村 達郎さんの講演</p>

<ul>
<li>リアルタイム・ウェブ：クライアント・サーバ間での双方向通信が特徴</li>
<li>サーバ→クライアントへのプッシュ通信。WebSocket、Server-Sent Event等</li>
<li>クライアント→サーバはAJAXなどを利用して実現</li>
<li>最近はWebSocketやSignalRが一般的。複数の通信方式をラッピングしている。</li>
</ul>


<h4>Socket.IOとSignalR(比較まとめ)</h4>

<table>
<thead>
<tr>
<th></th>
<th>Socket.IO</th>
<th>SignalR</th>
</tr>
</thead>
<tbody>
<tr>
<td>基本</td>
<td>Node.js上で動作する。Node.jsなのでシングルスレッド。</td>
<td>ASP.NET上のライブラリ。マルチスレッド</td>
</tr>
<tr>
<td>対応トランスポート</td>
<td>WebSocket、Adobe Flash Socket、AJAX long polling、AJAX multipart streaming、Forever Iframe(ほぼIE専用)、JSONP Polling(クロスドメインで利用可能)</td>
<td>WebSocket、Server-Sent Event、Forever Frame、Long Polling</td>
</tr>
<tr>
<td>クライアント</td>
<td>JavaScriptのみでなく、Java、Objective-C、C/C++、PHP、.NET等々、多数</td>
<td>JavaScript(jQuery依存)、.NET Framework4, 4.5、Windows Storeアプリ、WinPhone8、Silverlight、Xamarin.iOS/Xamarin.Android</td>
</tr>
<tr>
<td>向いているOS</td>
<td>Mac/Linux系</td>
<td>Windows系</td>
</tr>
<tr>
<td>パフォーマンス</td>
<td>シングルスレッド + クラスタ化であげる</td>
<td>マルチスレッド</td>
</tr>
<tr>
<td>設計思想</td>
<td>イベントベース</td>
<td>リモートプロシジャーコール</td>
</tr>
</tbody>
</table>


<!--
* Socket.IO
    - Node.js上で動作する
    - 対応しているトランスポート：WebSocket、Adobe Flash Socket、AJAX long polling、AJAX multipart streaming、Forever Iframe(ほぼIE専用)、JSONP Polling(クロスドメインで利用可能)
    - Windowsでは、WebMatrixのNode.jsテンプレートを使うと簡単。IISで動く独自のNodeを準備している。
    - Macでは、好きなエディタでどうぞ。
    - クライアントは、JavaScriptのみでなく、Java、Objective-C、C/C++、PHP、.NET等々、多数用意されている。
* SingnalR
    - ASP.NET上のライブラリ。マルチスレッド、Taskベースの非同期処理。シングルスレッドのNode.jsとはマルチコア時に速度差が出る
    - 対応しているトランスポート：WebSocket、Server-Sent Event、Forever Frame、Long Polling
    - Windowsの.NETで動作。
    - クライアントは、JavaScript(jQuery依存)、.NET Framework4, 4.5、Windows Storeアプリ、WinPhone8、Silverlight、Xamarin.iOS/Xamarin.Android
* 比較
    - パフォーマンス
        - Socket.IO: シングルスレッド + クラスタ化
        - SignalR: マルチスレッド
    - 設計思想
        - Socket.IO: イベントベース
        - SignalR: リモートプロシジャーコール
* WinならSignalR、Mac、LinuxならSocket.IOでいいんじゃ。
-->


<h4>スケールアウト</h4>

<ul>
<li>コネクションが貼りっぱなしであり、リソースを消費するため、1台のサーバで処理できるクライアント数は決まる。</li>
<li>単純に台数増やすだけではスケールしない。クライアントがどのサーバに繋っているかは他のサーバからは確認できない。WebSocketを使うAPの制約。メッセージング用サーバを用意して中継してあげる必要がある。</li>
<li>共通：Pub/Subメッセージングを利用する(RedisやWindowsAzureサービスバス)。  ※(?このへんよくわからず)</li>
<li>Socket.IO：接続情報をメモリでなく、外部ストレージに保存</li>
<li>SignalR：接続情報は共有せず、メッセージングに投げる(unique idを使って投げるのみ)</li>
</ul>


<h4>その他</h4>

<ul>
<li>双方向通信は必須ではない。必要なときにサーバからプッシュできればいい。<a href="http://pusher.com/">PUSHER</a>(プッシュするだけのサービス)がなりたつのでサーバからのプッシュの需要はあるんではないか。</li>
<li><p>通信頻度を下げる。underscore.jsのthrottle/debounceを使うことで、指定された秒数に最大1回実行/呼び出し後、指定された秒数がたったら呼び出しされる。</p></li>
<li><p>リアルタイム性を活かすアプリはあまり浮かばない(チャットアプリはもう飽きた)</p></li>
<li>プッシュ+クライアント同時接続を活かしたアプリ(チャット以外)を作ればいい。</li>
<li>スケールアウトは難しい。SignalRはメモリリーク解消に長い時間悩まされた。</li>
<li>今後は複数人でのリアルタイムコラボアプリに期待</li>
<li>センサーと同期して入退室管理とかもいいかも</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第39回html5とか勉強会+日本Androidの会5月定例]]></title>
    <link href="http://sat-pg.com/blog/html5.html"/>
    <updated>2013-05-28T18:58:00+09:00</updated>
    <id>http://sat-pg.com/blog/html5</id>
    <content type="html"><![CDATA[<p>第39回html5とか勉強会+日本Androidの会5月定例のでメモ</p>

<!-- more -->


<hr />

<h2>最近のHTML5はどうなっているのか</h2>

<p>html5jの白石俊平さんの講演。</p>

<p>「Android開発はよく知っているけど、Web技術の最新トレンドとかはあんまり・・」という方向けの、 最近のHTML5界隈がどう進化しているかを簡潔なおさらいとのこと。</p>

<h4>なぜHTML5か?</h4>

<ul>
<li>HTML5はマルチプラットフォームやマルチデバイスに対応しやすい</li>
<li>技術的な成熟-> 7つの○○ウェブで表現</li>
</ul>


<h4>1. オフラインウェブ: 地下鉄、飛行機でも観ることができる。</h4>

<ul>
<li>Web Storage</li>
<li>Indexed Database API</li>
<li>File API</li>
</ul>


<h4>2. リアルタイムウェブ</h4>

<ul>
<li>WebSocket</li>
<li>ServerSent-Event(Commetの実装)</li>
<li>WebRTC(ブラウザtoブラウザ) ->ChromeとFirefoxで疎通した</li>
</ul>


<h4>3. レスポンシブウェブ</h4>

<ul>
<li>1枚のHTMLで複数スクリーンに対応</li>
<li>CSSメディアクエリとかとか</li>
</ul>


<h4>4. セマンティックウェブ</h4>

<ul>
<li>エンジニアによる意図を持たせたマークアップが可能になる</li>
<li>検索エンジンが読み取ることができるので、Web全体がデータベースになる</li>
<li>HTML5 Semantic Elements</li>
<li>HTML5 Microdata</li>
<li>RDF/FDFa/RDFa Lite</li>
</ul>


<h4>5. スピーディウェブ</h4>

<ul>
<li>リクエスト1回→レスポンス1回の構造を変化させる(SPDY、HTTP2.0、オフライン)</li>
</ul>


<h4>6.プラットフォームウェブ</h4>

<ul>
<li>Tizen</li>
<li>Chrome OS</li>
<li>WinOS、、</li>
</ul>


<h4>7.インプレッシブ(感動的な)ウェブ</h4>

<ul>
<li>3Dの空間をいったりきたり</li>
<li>WebGL</li>
<li>Canvas</li>
<li>SVG</li>
<li>WebGL</li>
<li>WebAudioAPI</li>
</ul>


<hr />

<h2>AndroidとChromeの統合について</h2>

<p>日本Androidの会の丸山先生の講演。</p>

<p><a href="https://docs.google.com/file/d/0B04ol8GVySUuajVQTGxFbF9ibkk/edit">スライド</a></p>

<h4>「Webアプリ」の変化</h4>

<ul>
<li>サーバで作ってクライアントに送り出す、が普通だった</li>
<li>ANdroidアプリの多くが単体で動くアプリ。サーバサイドとの接点が少なかった</li>
<li>サーバサイドとHTML5を結合すると新しいものが生まれるのではないか。</li>
<li>クライアントのデバイスの処理能力が大きくなりはじめた。

<ul>
<li>PCよりクライアントがはるかにリッチ(センサ系)</li>
</ul>
</li>
<li>サーバ側はビジネスロジックに専念して、クライアント側でプレゼンテーション層(ViewとController)を実現することで、サーバの負荷低減にも繋がる。</li>
</ul>


<!--
    * Packagedd Web App
        - ChromeとかのApp
        - ネイティブと同等の機能を持つ。デバイス、OS、HWに依存しない
        - Offline enabled by default
        - cloud enabled by default
        - デバイスのHW、OSリソースへのアクセス
        - Packageの形であぷり配布
        - セキュリティポリシーも担保
    * サーバとクライアントの役割の見直し
        - PCよりクライアントがはるかにリッチ(センサ系)
        - サーバ負荷の増加
        - プログラムとViewの分離の難しさ
            - 全てがサーバ側でこんとろーるされているから
        - 8coreAndroidの始まり(4c + 4c)
        - Thin Server Architecture(TSA) 今日のWebアプリケーションへの反発
        - サーバ側はビジネスロジックに専念
        - サーバはDBとロジック
        - クライアントはviewとcontroller
        - プレゼンテーション層を全部クライアント側でやる
        - サーバの負荷が減る
    -->


<h4>AndroidとChromeの統合</h4>

<ul>
<li>今年何かが起こるかもしれない(?)</li>
<li>Android5とか、Chrome29とか</li>
</ul>


<!--
* Nexus7でChrome入れた。3月にChrome25出た
* HTML TestのおかげでHTML5対応が進んだ
* 今後は同じバージョンで出ることに
* ChromeOSで、デバイスに触るAPIが非常に多い
* 第3勢力は??
* ChromeのパッケージAPpをAndroidで動くように
* Androidはpackegeappの最大のプラットフォームになるだろう
* ChromeへDARTを載せるだろう
#### いつ合流? わからん
* Android5
* Chrome29

次のOSがキモかもね。
-->


<h4>マーケットの統合</h4>

<ul>
<li>最終的には統合されるだろう(Packaged Web Appとして)</li>
<li>ここで販売されるアプリは、デバイスだけでなく、OSも関係なく動く</li>
</ul>


<!--
#### Chrome Packaged App の開発
* ブラウザ上からランタイムへ
-->


<h4>Andorid > iOS</h4>

<ul>
<li>売り上げは3〜5倍の差</li>
<li>アプリ開発者は国内だけじゃなく、世界に出ることを考えるべき</li>
<li>日本の開発者は単なるオフラインでなくクラウドも使うべき</li>
</ul>


<hr />

<h2>ハイブリッドアプリの設計</h2>

<p>クックパッドの日高さんの講演。</p>

<!--
* メリデリ、ゲーム、ソーシャルゲーム、コードの話はしない
* 端末のスペックあがった →webviewでも許せる速さ
* HTML5決まってきた! →ブラウザ共通化
* iOS審査緩くなってきた →独自UIやりやすい
* AndroidのOS分布も変わってきた 4.2増えてきた
-->


<h4>ハイブリッドアプリの利点</h4>

<ul>
<li>HTML5を活かしたアプリ</li>
<li>公式マーケット配布できる</li>
<li>複数プラットフォーム対応しやすいメリット</li>
</ul>


<h4>ハイブリドアプリのタイプ</h4>

<ul>
<li>タイプ1: WebViewをラッピング1

<ul>
<li>包むだけ</li>
<li>HTMLはサーバに置く</li>
<li>Webアプリをそのまま置く</li>
<li>jsonじゃなくデータ量が多い</li>
</ul>
</li>
<li>タイプ2: webviewをラッピング2

<ul>
<li>1と違いHTMLはアプリに埋め込む</li>
<li>サーバとはAPI通信</li>
<li>ローカルでもだいたい動く。アプリの実装の変わりにHTML5使う</li>
</ul>
</li>
<li>タイプ3: 一部の画面でWebView。ピグトークはこれ

<ul>
<li>基本ネイティブ。</li>
<li>WebViewを利用するメリットのあるところは使う
クックパッドは1+3</li>
</ul>
</li>
</ul>


<p>とりあずHTMLで、ではなく、どちらでやったほうが価値(品質面・コスト面・運用面)がある画面なのか</p>

<h4>Webviewが適さないもの</h4>

<ul>
<li>リスト・ギャラリー画面

<ul>
<li>Nativeのリストが持つ再利用・画像キャッシュ、開放などのメリットが大きい</li>
<li>HTMLだとDomがどんどん増えていく。メモリ足りんくなる</li>
</ul>
</li>
<li>起動時の画面</li>
</ul>


<h4>webviewが適しているもの</h4>

<ul>
<li>詳細画面などのコンテンツ</li>
<li>レイアウト能力はNativeよりも高い。回り込み。枠付け、リンク挿入とか</li>
<li>更新されているくコンテンツとか</li>
</ul>


<h4>実装例</h4>

<ul>
<li>WebViewの進む・戻る遷移と、Nativeの画面遷移の管理の問題が起きやすい。</li>
<li>Webviewでのリンク遷移はさせないほうがいい or
遷移はWebviewで行い、Native部分はダイアログ管理</li>
</ul>


<!--
#### 実装例2
* 長押しの処理。フォーカスの管理とかはJSでやって、Nativeに通知
* Call: Mail: は使いたい
* Coookiieでログイン状態を連動させる
-->


<h4>忘れがちな違い</h4>

<ul>
<li>HTMLは画面毎に通信が発生するが、ネイティブならばデータを保持しておいてあとから展開とか、いろいろできる。</li>
</ul>


<h4>cookpadは何故ハイブリッドか</h4>

<ul>
<li>基本、コンテンツはWeb上にあり、ローカルで管理するものが少ない。</li>
<li>更新が多い。リアルタイム性も必要</li>
<li>A/Bテスト等で仮説・検証が行われている</li>
<li>特定の機能を提供するよりは、総合アプリ</li>
</ul>


<h4>ローカルでやってること</h4>

<ul>
<li>アカウント管理</li>
<li>ダイアログ、API通信</li>
<li>検索候補、音声検索</li>
</ul>


<hr />

<h2>ハイブリットソーシャルゲームの現場</h2>

<p>株式会社ポケラボの鈴木さんと前田さんの講演</p>

<!--
### 概要
* 200名
* GREE(プラットフォーム技術)
* SEGA(コンソール技術) 
* aeriaGames(北米. ドイツとかで売れてる。南国で1位)
* GROSS。Androidで悪い
-->


<h4>なぜハイブリッドか?</h4>

<ul>
<li>Webが最終的には勝つだろう! (iアプリ vs モバゲーグリー の結果などからも)</li>
<li>Flash作ってたのでネイティブが難しい</li>
<li>今はCreate.JS使ってる</li>
</ul>


<h3>今どうなの?</h3>

<ul>
<li>運用が楽。ios+androidできる</li>
<li>ネイティブ-> 映画。ソーシャル-> TV番組みたいな感覚のため、更新多い部分でネイティブはつらい</li>
<li>WebViewは遅いか?

<ul>
<li>適材適所で使ってやればいい。アニメがすくないとことか。</li>
<li>cssアニメ辛いところはCreateJSでやってる</li>
<li>通信はキャッシュで1回しかDLしないようにする。</li>
<li>WebViewが重いのでAndroid版でリリースできていない</li>
</ul>
</li>
</ul>


<!--
### Androidで目指すところ
* よりはやく、かいてきに、楽しんでもらう
* ハイブリッド・固定メニュー、高速アニメ、ユーザ連携

* ヘッダフッタの固定メニュー
iScroll->遅い
ヘッダフッタ用のコマンド用意。
JSONを解釈してネイティブでViewに変換してあげる
&#8211;>


<ul>
<li>高速アニメーションはライブラリ作って対応。</li>
<li>Flash->HTML5(JS)->Nativeの2段階変換をしている。</li>
<li>CreateJSの3倍のフレームレートが出る</li>
</ul>


<!--
* iOSとのUUID連携
AndroidのUUIDは使い辛い。サーバ側で作る。
AndroidではアンインスールされるとUUIDも消えちゃう。
別になってしまって連携できない。
ポケラボネットワークシステム→1uuid / 1台
コラボかのう。
-->


<hr />

<h2>「パネルディスカッション」</h2>

<h4>WebアプリケーションのプラットフォームとしてAndroidやモバイルデバイスのこれから</h4>

<ul>
<li><p>ブラウザでChromeのランタイムが動くようにしてる。
Packaged Web Appの流れが今年の流れになりそう。</p></li>
<li><p>Webアップはデバイスの機能を使い切れない。
今はインストール型にだけ特権を与えるかたちになりつつある。
今後は、インストール型で使えるAPI(Firefoxは標準、Chrome独自)と、
ブラウザベースのものの2つにわかれていくだろう。
ブラウザベースは標準化が追いつかない。</p></li>
</ul>


<h4>JS性能、ライブラリ、オフライン、リアルタイム動向</h4>

<ul>
<li>クライアントで処理するなら、好きなほうでやればいい。</li>
<li>サーバの処理を減らすのが基本的な流れだろう。</li>
<li>チップレベルでブラウザレイヤが最適化されないとつらい。</li>
<li>チューンナップが終わったらネイティブなくてもいいかも。</li>
<li>webアプリにできないこと、課題はまだまだある。ただ、どうにかしようと考えている人がいっぱいいる。
解決されないわけない!!</li>
<li>例えばasm.js→2倍くらいの速さ動く。</li>
<li>今後のアップルの動向も気になる。</li>
</ul>


<!--
#### 新野淳一（モデレーター）、丸山不二夫、佐々木陽、白石俊平

最近: GoogleIO

丸山さん: AndroidとCHrome統合

佐々木さん: GalaxyS4、超速い。アプリよくうごくよ。今のChromeが、2、3年後には、モバイルで体験できそう。

白石さん: GoogleIO。Chrome+HTML5セッション出た。多かったがめあたらしいのあんまなし。
パフォーマンス重視が多い。クロームのPackagedwebのver2。とWebコンポーネント。

新野さん: PublicKeyの人。

### WebアプリケーションのプラットフォームとしてAndroidやモバイルデバイスのこれから
Androidの5T対応は遅れてた。4まで。まだ半分くらい。
Chromeのポーティング進めてる。
ブラウザからChromeRuntime動くようにしてる。
Packaged Web Appの流れが今年の流れになりそう。

PhoneGapみたいなの作ってる。RuntimeEngine作って、jsでラップしてネイティブで売る。
iOS、Androidで移植→Tizen。楽。OpenGL使ってても。
これまでは遅かったからネイティブ使ってた。
最近は早くなってきたから移行? でも適材適所でしょ。
どんくらい遅い? 今は5だとCHromeくらいしかできん。リッチなやつは。
それいがいは5でもいいかもね。

2、3年まえからわかってたこと。Webアップはデバイスの機能を使い切れん。
今はインストール型にだけ特権を与えるかたちになりつつある。
2つにわかれていくだろう。
インストール型で使えるAPI(Firefoxは標準、Chrome独自)
HTMLは標準が必要。ブラウザベースは標準化が追いつかない。


### HTML5のCanvasやSVGに対して、OpenGLやネイティブAPの動向は
性能は大きな課題。
業務系ならHTML5でもけっこういける。
3Dまわりの動向は??

リッチはWebGL。
Canvas使わないのは回転拡大縮小ではつらい。
GPUで書けるから全然違う。
iPhone、webgl動かん。配信手段なし。独自のランタイム作った。WebViewはみんな作ってない。
HTML5+ネイティブエンジン(V8みたいなのを作るイメージ)→配布
古い端末サポートはつらい。結局C++で書いたほうがいい。
OpenGLで書くのがいい。Unityとかでもいい。
↑ゲームの世界の話。

ネイティブのUXになれちゃってるので、そういう要望もある。

Canvasについてどう思ってる??
一般的なWebサイトはそんなに重くないでしょ。
Canvasは最終手段。CSS3とかDOMでできるでしょ。

GPUにのると、100倍くらい速い。
Canvasの書きかたがよくわからん。3Dの属性をCSSに付けるとよいらしい。
WEB-RTCで画像編集→ GLFxjsは使える。


### Webアプリ=/ ハイブリッドAPの進化とは
#### JS性能、ライブラリ、オフライン、リアルタイム動向
* エンタープライズとWebの世界->いんぱくとを与えてる
* クライアントで処理するなら、好きなほうでやればいい。
* サーバの処理を減らすのが基本的な流れだろう。

* チップレベルでブラウザレイヤが最適化されないとつらい。
* Tizenとかは始めている。
* Galaxyではめちゃくちゃよく動く
* チューンナップが終わったらネイティブなくてもいいかも。

* webアップにできないこと、課題はまだまだある。
* どうにかしようと考えている人がいっぱいいる。
* 解決されないわけない!!
* asm.js->2倍くらい!の速さ動く。
* アップルの動向も気になる。

* Packaged Web App押し!!!!

6/26 UDX

&#8211;>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PhoneGap準備]]></title>
    <link href="http://sat-pg.com/blog/phonegap1.html"/>
    <updated>2013-05-25T22:46:00+09:00</updated>
    <id>http://sat-pg.com/blog/phonegap1</id>
    <content type="html"><![CDATA[<p>PhoneGapを使う初めの一歩。ここではiOS版を想定して、xcodeで実装する例を記載。</p>

<p>※PhoneGap関連は、Mac OS X10.8.2 xcode4.6.2、phonegap2.7.0で実行。</p>

<!-- more -->


<ol>
<li><p><a href="http://phonegap.com/">公式サイト</a>から最新のファイルをダウンロード</p></li>
<li><p>解凍したファイルを任意の場所に置く</p></li>
<li><p>置いたフォルダ内の、<code>/lib/ios/bin</code>に移動する</p></li>
<li><p><code>./create プロジェクトへのパス プロジェクトのパッケージ名 プロジェクト名</code>  と実行する。<br/>
 (今回は、<code>./create ~/work/hello com.sat-pg.hello hello</code> を実行)</p></li>
<li><p>指定したパス(~/work/hellophonegap)に、プロジェクト(hellophonegap)が出来ているので、中にあるhello.xcodeprojをダブルクリックすると、xcodeが起動します。</p></li>
<li><p>起動すると、以下の画像のようなファイル構造になっています。wwwフォルダ以下が、実際にphonegapのアプリから見えるファイルで、index.htmlが起動時に呼び出されます。(起動時呼び出しのファイル変更はconfix.xmlの、contentタグを修正すればよい)</p></li>
</ol>


<p><img src="http://sat-pg.com/images/blog/phonegap1_tree.png" alt="起動時" /></p>

<p>何も変更せず、ビルドして実行すると、以下のように表示されます。</p>

<p><img src="http://sat-pg.com/images/blog/phonegap1_build.png" alt="初回ビルド" /></p>

<ul>
<li>index.htmlに必要な処理
初期化処理として以下のような処理が必要なようです。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;cordova-2.2.0.js&quot;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;js/index.js&quot;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="nx">app</span><span class="p">.</span><span class="nx">initialize</span><span class="p">();</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>各ページで必要な処理
デバイスの準備待ちとして、deviceReadyのコールバック内に処理を書く必要があるようです。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">head</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;cordova-x.x.x.js&quot;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="kd">function</span> <span class="nx">onLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span>
</span><span class='line'>      <span class="err">‘</span><span class="nx">deviceready</span><span class="err">’</span><span class="p">,</span> <span class="nx">onDeviceReady</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">onDeviceReady</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// ここに処理を書く</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/head&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">body</span> <span class="nx">onload</span><span class="o">=</span><span class="err">”</span><span class="nx">onLoad</span><span class="p">();</span><span class="err">”</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="err">・・・</span>
</span></code></pre></td></tr></table></div></figure>


<h3>参考</h3>

<p><a href="http://docs.phonegap.com/en/2.7.0/guide_getting-started_ios_index.md.html#Getting%20Started%20with%20iOS">公式のiOS説明ページ</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SVCのテスト]]></title>
    <link href="http://sat-pg.com/blog/svctest.html"/>
    <updated>2013-05-19T11:35:00+09:00</updated>
    <id>http://sat-pg.com/blog/svctest</id>
    <content type="html"><![CDATA[<p>SVCのサンプルを記載します。</p>

<ul>
<li><a href="#base">基本図形</a></li>
<li><a href="#gra">グラデーション</a></li>
<li><a href="#poly">線、ポリゴン</a></li>
<li><a href="#text">テキスト</a></li>
<li><a href="#animation">アニメーション</a></li>
<li><a href="#sanko">参考</a></li>
</ul>


<!-- more -->


<h2><a name="base"></a>基本図形</h2>

<ul>
<li>rect: 長方形</li>
<li>line: 直線</li>
<li>circle: 円</li>
<li>ellipse: 楕円</li>
</ul>


<h4>サンプル</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;svg</span> <span class="na">width=</span><span class="s">&quot;600&quot;</span> <span class="na">height=</span><span class="s">&quot;300&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;rect</span> <span class="na">x=</span><span class="s">&quot;100&quot;</span> <span class="na">y=</span><span class="s">&quot;10&quot;</span> <span class="na">rx=</span><span class="s">&quot;20&quot;</span> <span class="na">ry=</span><span class="s">&quot;10&quot;</span> <span class="na">width=</span><span class="s">&quot;400&quot;</span> <span class="na">height=</span><span class="s">&quot;200&quot;</span> <span class="na">fill=</span><span class="s">&quot;lightblue&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;line</span> <span class="na">x1=</span><span class="s">&quot;100&quot;</span> <span class="na">y1=</span><span class="s">&quot;50&quot;</span> <span class="na">x2=</span><span class="s">&quot;400&quot;</span> <span class="na">y2=</span><span class="s">&quot;200&quot;</span> <span class="na">stroke-width=</span><span class="s">&quot;20&quot;</span> <span class="na">stroke=</span><span class="s">&quot;blue&quot;</span> <span class="na">stroke-linecap=</span><span class="s">&quot;round&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;circle</span> <span class="na">cx=</span><span class="s">&quot;250&quot;</span> <span class="na">cy=</span><span class="s">&quot;150&quot;</span> <span class="na">r=</span><span class="s">&quot;50&quot;</span> <span class="na">fill=</span><span class="s">&quot;red&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ellipse</span> <span class="na">cx=</span><span class="s">&quot;450&quot;</span> <span class="na">cy=</span><span class="s">&quot;50&quot;</span> <span class="na">rx=</span><span class="s">&quot;50&quot;</span> <span class="na">ry=</span><span class="s">&quot;20&quot;</span> <span class="na">fill=</span><span class="s">&quot;green&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/svg&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<dl>
    <svg width="600" height="300">
        <rect x="100" y="10" rx="20" ry="10" width="400" height="200" fill="lightblue" />
        <line x1="100" y1="50" x2="400" y2="200" stroke-width="20" stroke="blue" stroke-linecap="round" />
        <circle cx="250" cy="150" r="50" fill="red" />
        <ellipse cx="450" cy="50" rx="50" ry="20" fill="green" />
    </svg>
</dl>


<h2><a name="gra"></a>グラデーション</h2>

<ul>
<li>defsタグの中で設定の定義ができる。</li>
<li>linearGradient: 直線上のグラデーション</li>
<li>radialGradient: 円形のグラデーション</li>
</ul>


<h4>サンプル</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;svg</span> <span class="na">width=</span><span class="s">&quot;400&quot;</span> <span class="na">height=</span><span class="s">&quot;200&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;defs&gt;</span>
</span><span class='line'>      <span class="nt">&lt;linearGradient</span> <span class="na">id=</span><span class="s">&quot;g1&quot;</span> <span class="na">x1=</span><span class="s">&quot;0&quot;</span> <span class="na">y1=</span><span class="s">&quot;0&quot;</span> <span class="na">x2=</span><span class="s">&quot;1&quot;</span> <span class="na">y2=</span><span class="s">&quot;0.5&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;stop</span> <span class="na">offset=</span><span class="s">&quot;0&quot;</span> <span class="na">stop-color=</span><span class="s">&quot;skyblue&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>          <span class="nt">&lt;stop</span> <span class="na">offset=</span><span class="s">&quot;0.5&quot;</span> <span class="na">stop-color=</span><span class="s">&quot;pink&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>          <span class="nt">&lt;stop</span> <span class="na">offset=</span><span class="s">&quot;1&quot;</span> <span class="na">stop-color=</span><span class="s">&quot;yellow&quot;</span> <span class="na">stop-opacity=</span><span class="s">&quot;0.5&quot;</span> <span class="nt">/&gt;</span>                 
</span><span class='line'>      <span class="nt">&lt;/linearGradient&gt;</span>
</span><span class='line'>      <span class="nt">&lt;radialGradient</span> <span class="na">id=</span><span class="s">&quot;g2&quot;</span> <span class="na">cx=</span><span class="s">&quot;0.5&quot;</span> <span class="na">cy=</span><span class="s">&quot;0.5&quot;</span> <span class="na">r=</span><span class="s">&quot;0.5&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;stop</span> <span class="na">offset=</span><span class="s">&quot;0&quot;</span> <span class="na">stop-color=</span><span class="s">&quot;lightgreen&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>          <span class="nt">&lt;stop</span> <span class="na">offset=</span><span class="s">&quot;0.8&quot;</span> <span class="na">stop-color=</span><span class="s">&quot;pink&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>          <span class="nt">&lt;stop</span> <span class="na">offset=</span><span class="s">&quot;1&quot;</span> <span class="na">stop-color=</span><span class="s">&quot;yellow&quot;</span> <span class="na">stop-opacity=</span><span class="s">&quot;0.5&quot;</span> <span class="nt">/&gt;</span>                 
</span><span class='line'>      <span class="nt">&lt;/radialGradient&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/defs&gt;</span>
</span><span class='line'>  <span class="nt">&lt;rect</span> <span class="na">width=</span><span class="s">&quot;200&quot;</span> <span class="na">height=</span><span class="s">&quot;200&quot;</span> <span class="na">fill=</span><span class="s">&quot;url(#g1)&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;rect</span> <span class="na">x=</span><span class="s">&quot;200&quot;</span> <span class="na">width=</span><span class="s">&quot;400&quot;</span> <span class="na">height=</span><span class="s">&quot;200&quot;</span> <span class="na">fill=</span><span class="s">&quot;url(#g2)&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/svg&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<dl>
    <svg width="600" height="250">
        <defs>
            <linearGradient id="g1" x1="0" y1="0" x2="1" y2="0.5">
                <stop offset="0" stop-color="skyblue" />
                <stop offset="0.5" stop-color="pink" />
                <stop offset="1" stop-color="yellow" stop-opacity="0.5" />                  
            </linearGradient>
            <radialGradient id="g2" cx="0.5" cy="0.5" r="0.5">
                <stop offset="0" stop-color="lightgreen" />
                <stop offset="0.8" stop-color="pink" />
                <stop offset="1" stop-color="yellow" stop-opacity="0.5" />                  
            </radialGradient>
        </defs>
        <rect width="300" height="200" fill="url(#g1)" />
        <rect x="300" width="300" height="200" fill="url(#g2)" />
    </svg>
</dl>


<h2><a name="poly"></a>線、ポリゴン</h2>

<ul>
<li>polygonタグで図形描画: 座標を複数記入すると繋いでくれる</li>
<li>pathタグで直線

<ul>
<li>M: 移動する座標を記載</li>
<li>l: 線を引く座標を記載(?)</li>
<li>h: 水平方向に線を引く</li>
<li>v: 垂直方向に線を引く</li>
</ul>
</li>
</ul>


<h4>サンプル</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;svg</span> <span class="na">width=</span><span class="s">&quot;600&quot;</span> <span class="na">height=</span><span class="s">&quot;300&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;polygon</span> <span class="na">points=</span><span class="s">&quot;100 50 250 100 50 100 100 0&quot;</span> <span class="na">stroke=</span><span class="s">&quot;black&quot;</span> <span class="na">fill=</span><span class="s">&quot;url(#g1)&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="c">&lt;!-- (100,150) から x方向に50、y方向に50の線を引き、水平方向に50、</span>
</span><span class='line'><span class="c">      垂直方向に30、水平方向に-30の線を引く   --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;path</span> <span class="na">d=</span><span class="s">&quot;M100 150 l50 50 h50 v30 h-30&quot;</span> <span class="na">stroke=</span><span class="s">&quot;black&quot;</span> <span class="na">fill=</span><span class="s">&quot;none&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/svg&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<dl>
    <svg width="600" height="300">
        <polygon points="100 50 250 100 50 100 100 0" stroke="black" fill="url(#g1)" />
        <path d="M100 150 l50 50 h50 v30 h-30" stroke="black" fill="none" />
    </svg>
</dl>


<h2><a name="text"></a>テキスト</h2>

<ul>
<li>テキストタグで記載</li>
<li>rotateで傾けたりも可能</li>
</ul>


<h4>サンプル</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;svg</span> <span class="na">width=</span><span class="s">&quot;500&quot;</span> <span class="na">height=</span><span class="s">&quot;300&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;rect</span> <span class="na">width=</span><span class="s">&quot;500&quot;</span> <span class="na">height=</span><span class="s">&quot;300&quot;</span> <span class="na">fill=</span><span class="s">&quot;black&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;text</span> <span class="na">x=</span><span class="s">&quot;100&quot;</span> <span class="na">y=</span><span class="s">&quot;100&quot;</span> <span class="na">font-size=</span><span class="s">&quot;96&quot;</span> <span class="na">fill=</span><span class="s">&quot;lightpink&quot;</span> <span class="na">stroke=</span><span class="s">&quot;blue&quot;</span>
</span><span class='line'>      <span class="na">stroke-width=</span><span class="s">&quot;3&quot;</span><span class="nt">&gt;</span>Hello!<span class="nt">&lt;/text&gt;</span>
</span><span class='line'>  <span class="nt">&lt;text</span> <span class="na">x=</span><span class="s">&quot;100&quot;</span> <span class="na">y=</span><span class="s">&quot;200&quot;</span> <span class="na">font-size=</span><span class="s">&quot;96&quot;</span> <span class="na">fill=</span><span class="s">&quot;lightblue&quot;</span> <span class="na">stroke=</span><span class="s">&quot;blue&quot;</span>
</span><span class='line'>      <span class="na">stroke-width=</span><span class="s">&quot;3&quot;</span> <span class="na">rotate=</span><span class="s">&quot;30&quot;</span><span class="nt">&gt;</span>World!!<span class="nt">&lt;/text&gt;</span>  
</span><span class='line'><span class="nt">&lt;/svg&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<dl>
    <svg width="500" height="300">
        <rect width="500" height="300" fill="black" />
        <text x="100" y="100" font-size="96" fill="lightpink" stroke="blue"
            stroke-width="3">Hello!</text>
        <text x="100" y="200" font-size="96" fill="lightblue" stroke="blue" 
            stroke-width="3" rotate="30">World!!</text> 
    </svg>
</dl>


<h2><a name="animation"></a>アニメーション</h2>

<ul>
<li>図形タグの中にanimateタグを追記して作成する</li>
<li>属性を指定して、fromとtoで値を指定し、durで時間を指定</li>
<li>repeatCountで回数を指定。無限回はindefinite</li>
</ul>


<h4>サンプル</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;svg</span> <span class="na">width=</span><span class="s">&quot;500&quot;</span> <span class="na">height=</span><span class="s">&quot;250&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;rect</span> <span class="na">width=</span><span class="s">&quot;10&quot;</span> <span class="na">height=</span><span class="s">&quot;10&quot;</span> <span class="na">fill=</span><span class="s">&quot;url(#g1)&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;animate</span> <span class="na">attributeName=</span><span class="s">&quot;width&quot;</span> <span class="na">from=</span><span class="s">&quot;10&quot;</span> <span class="na">to=</span><span class="s">&quot;500&quot;</span> <span class="na">dur=</span><span class="s">&quot;5s&quot;</span> <span class="na">repeatCount=</span><span class="s">&quot;10&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;animate</span> <span class="na">attributeName=</span><span class="s">&quot;height&quot;</span> <span class="na">from=</span><span class="s">&quot;10&quot;</span> <span class="na">to=</span><span class="s">&quot;200&quot;</span> <span class="na">dur=</span><span class="s">&quot;3s&quot;</span> <span class="na">repeatCount=</span><span class="s">&quot;10&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/rect&gt;</span>
</span><span class='line'><span class="nt">&lt;/svg&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<dl>
    <svg width="500" height="250">
        <rect width="10" height="10" fill="url(#g1)" >
            <animate attributeName="width" from="10" to="500" dur="5s" repeatCount="10" />
            <animate attributeName="height" from="10" to="200" dur="3s" repeatCount="indefinite" />
        </rect>
    </svg>
</dl>


<h2><a name="js"></a>JavaScriptとの連携</h2>

<ul>
<li>setAttributeメソッドを利用して、JavaScriptから値の変更が容易に可能</li>
</ul>


<h4>ボタン押すたびに変更するサンプル</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;svg</span> <span class="na">width=</span><span class="s">&quot;600&quot;</span> <span class="na">height=</span><span class="s">&quot;250&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;rect</span> <span class="na">width=</span><span class="s">&quot;600&quot;</span> <span class="na">height=</span><span class="s">&quot;250&quot;</span> <span class="na">stroke=</span><span class="s">&quot;black&quot;</span> <span class="na">fill=</span><span class="s">&quot;white&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;circle</span> <span class="na">cx=</span><span class="s">&quot;100&quot;</span> <span class="na">cy=</span><span class="s">&quot;100&quot;</span> <span class="na">r=</span><span class="s">&quot;20&quot;</span> <span class="na">fill=</span><span class="s">&quot;white&quot;</span> <span class="na">name=</span><span class="s">&quot;test&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;circle</span> <span class="na">cx=</span><span class="s">&quot;100&quot;</span> <span class="na">cy=</span><span class="s">&quot;100&quot;</span> <span class="na">r=</span><span class="s">&quot;20&quot;</span> <span class="na">fill=</span><span class="s">&quot;white&quot;</span> <span class="na">name=</span><span class="s">&quot;test&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;circle</span> <span class="na">cx=</span><span class="s">&quot;100&quot;</span> <span class="na">cy=</span><span class="s">&quot;100&quot;</span> <span class="na">r=</span><span class="s">&quot;20&quot;</span> <span class="na">fill=</span><span class="s">&quot;white&quot;</span> <span class="na">name=</span><span class="s">&quot;test&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;circle</span> <span class="na">cx=</span><span class="s">&quot;100&quot;</span> <span class="na">cy=</span><span class="s">&quot;100&quot;</span> <span class="na">r=</span><span class="s">&quot;20&quot;</span> <span class="na">fill=</span><span class="s">&quot;white&quot;</span> <span class="na">name=</span><span class="s">&quot;test&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;circle</span> <span class="na">cx=</span><span class="s">&quot;100&quot;</span> <span class="na">cy=</span><span class="s">&quot;100&quot;</span> <span class="na">r=</span><span class="s">&quot;20&quot;</span> <span class="na">fill=</span><span class="s">&quot;white&quot;</span> <span class="na">name=</span><span class="s">&quot;test&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;circle</span> <span class="na">cx=</span><span class="s">&quot;100&quot;</span> <span class="na">cy=</span><span class="s">&quot;100&quot;</span> <span class="na">r=</span><span class="s">&quot;20&quot;</span> <span class="na">fill=</span><span class="s">&quot;white&quot;</span> <span class="na">name=</span><span class="s">&quot;test&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;circle</span> <span class="na">cx=</span><span class="s">&quot;100&quot;</span> <span class="na">cy=</span><span class="s">&quot;100&quot;</span> <span class="na">r=</span><span class="s">&quot;20&quot;</span> <span class="na">fill=</span><span class="s">&quot;white&quot;</span> <span class="na">name=</span><span class="s">&quot;test&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;circle</span> <span class="na">cx=</span><span class="s">&quot;100&quot;</span> <span class="na">cy=</span><span class="s">&quot;100&quot;</span> <span class="na">r=</span><span class="s">&quot;20&quot;</span> <span class="na">fill=</span><span class="s">&quot;white&quot;</span> <span class="na">name=</span><span class="s">&quot;test&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;circle</span> <span class="na">cx=</span><span class="s">&quot;100&quot;</span> <span class="na">cy=</span><span class="s">&quot;100&quot;</span> <span class="na">r=</span><span class="s">&quot;20&quot;</span> <span class="na">fill=</span><span class="s">&quot;white&quot;</span> <span class="na">name=</span><span class="s">&quot;test&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/svg&gt;</span>
</span><span class='line'><span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">onclick=</span><span class="s">&quot;</span>
</span><span class='line'><span class="s">  var c = document.getElementsByName(&#39;test&#39;);</span>
</span><span class='line'><span class="s">  for (var i = 0; i &lt; c.length; i ++) {</span>
</span><span class='line'><span class="s">      c[i].setAttribute(&#39;cx&#39;, r(500));</span>
</span><span class='line'><span class="s">      c[i].setAttribute(&#39;cy&#39;, r(250));</span>
</span><span class='line'><span class="s">      c[i].setAttribute(&#39;r&#39;, r(100));</span>
</span><span class='line'><span class="s">      c[i].setAttribute(&#39;fill&#39;, &#39;rgb(&#39; +r(255)+&#39;,&#39; +r(255)+&#39;,&#39; +r(255)+&#39;)&#39;);</span>
</span><span class='line'><span class="s">  }</span>
</span><span class='line'><span class="s">  function r(n) {</span>
</span><span class='line'><span class="s">      return Math.floor(Math.random() * (n + 1));</span>
</span><span class='line'><span class="s">  }</span>
</span><span class='line'><span class="s">&quot;</span><span class="nt">&gt;</span>reload<span class="nt">&lt;/button&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<dl>
    <svg width="600" height="250">
        <rect width="600" height="250" stroke="black" fill="white" />
        <circle cx="100" cy="100" r="20" fill="white" name="test" />
        <circle cx="100" cy="100" r="20" fill="white" name="test" />
        <circle cx="100" cy="100" r="20" fill="white" name="test" />
        <circle cx="100" cy="100" r="20" fill="white" name="test" />
        <circle cx="100" cy="100" r="20" fill="white" name="test" />
        <circle cx="100" cy="100" r="20" fill="white" name="test" />
        <circle cx="100" cy="100" r="20" fill="white" name="test" />
        <circle cx="100" cy="100" r="20" fill="white" name="test" />
        <circle cx="100" cy="100" r="20" fill="white" name="test" />
    </svg>
    <button type="button" onclick="
        var c = document.getElementsByName('test');
        for (var i = 0; i < c.length; i ++) {
            c[i].setAttribute('cx', r(500));
            c[i].setAttribute('cy', r(250));
            c[i].setAttribute('r', r(100));
            c[i].setAttribute('fill', 'rgb(' +r(255)+',' +r(255)+',' +r(255)+')');
        }
        function r(n) {
            return Math.floor(Math.random() * (n + 1));
        }
    ">reload</button><br><br>
</dl>


<h2>参考</h2>

<ul>
<li><a href="http://dotinstall.com/lessons/basic_svg">ドットインストール</a> を参考にさせて頂きました。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WebRTCサンプル]]></title>
    <link href="http://sat-pg.com/blog/webrtc.html"/>
    <updated>2013-05-06T04:05:00+09:00</updated>
    <id>http://sat-pg.com/blog/webrtc</id>
    <content type="html"><![CDATA[<p>WebRTCのサンプルを動かしてみたのでまとめます。</p>

<h3><a href="http://dl.dropboxusercontent.com/u/321302/html5/webrtc.html">カメラから映像を取り込み、そのまま流すのみのサンプル</a></h3>

<p>2013/5/6現在、MacのGoogle Chorome Version 26では以下を読み込んで動作しました。</p>

<figure class='code'><figcaption><span> (webrtc.html)</span> <a href='http://sat-pg.com/downloads/code/webrtc.html'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;ja&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>WebRTC<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://code.jquery.com/jquery-1.9.1.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;video</span> <span class="na">id=</span><span class="s">&quot;myvideo&quot;</span> <span class="na">width=</span><span class="s">&quot;320&quot;</span> <span class="na">height=</span><span class="s">&quot;240&quot;</span> <span class="na">autoplay</span> <span class="na">style=</span><span class="s">&quot;border:1px solid black&quot;</span><span class="nt">&gt;&lt;/video&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">navigator</span><span class="p">.</span><span class="nx">webkitGetUserMedia</span><span class="p">({</span><span class="nx">video</span><span class="o">:</span><span class="kc">true</span><span class="p">,</span> <span class="nx">audio</span><span class="o">:</span><span class="kc">true</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">stream</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">myvideo</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#myvideo&quot;</span><span class="p">).</span><span class="nx">get</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">myvideo</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="nx">webkitURL</span><span class="p">.</span><span class="nx">createObjectURL</span><span class="p">(</span><span class="nx">stream</span><span class="p">);</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Androidでは、version26を利用し、アドレスバーに
<code>about:flags</code>と入力後、以下の「WebRTCを有効にする」を選択してChromeを再起動することで
実行が可能になります。</p>

<p><img src="http://sat-pg.com/images/cap/webrtc_android.png"></p>

<p>iOSは現状ではSafari, Chromeとも動作しない模様です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressのいろいろ]]></title>
    <link href="http://sat-pg.com/blog/octopress-config.html"/>
    <updated>2013-05-06T03:02:00+09:00</updated>
    <id>http://sat-pg.com/blog/octopress-config</id>
    <content type="html"><![CDATA[<p>Octopressの設定など色々まとめていきます。<br/>
設定追加毎に記事も追加していきます。</p>

<ul>
<li><a href="#include_code">ソースコードの引用</a></li>
<li><a href="#escape">特殊文字のエスケープ</a></li>
<li><a href="#image">画像貼り付け</a></li>
<li><a href="#publish">記事の非公開設定</a></li>
<li><a href="#domain">ドメインの設定</a></li>
<li><a href="#table">テーブルの作成</a></li>
</ul>


<!-- more -->


<h2><a name="include_code"></a>ソースコードの引用</h2>

<p>以下の通り記載することで引用が可能です</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{% include_code [title] [lang:language] path/to/file %}</span></code></pre></td></tr></table></div></figure>


<p>ファイルは、<code>source/downloads/code</code> が基本のパスのようです。
例えばindex.htmlを、<code>source/downloads/code/</code> に置いて</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{% include_code index.html %}</span></code></pre></td></tr></table></div></figure>


<p>と書くと、以下の通り出力されます。</p>

<figure class='code'><figcaption><span> (index.html)</span> <a href='http://sat-pg.com/downloads/code/index.html'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>---
</span><span class='line'>layout: default
</span><span class='line'>---
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;blog-index&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  {% assign index = true %}
</span><span class='line'>  {% for post in paginator.posts %}
</span><span class='line'>  {% assign content = post.content %}
</span><span class='line'>    <span class="nt">&lt;article&gt;</span>
</span><span class='line'>      {% include article.html %}
</span><span class='line'>    <span class="nt">&lt;/article&gt;</span>
</span><span class='line'>  {% endfor %}
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;pagination&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    {% if paginator.next_page %}
</span><span class='line'>      <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;prev&quot;</span> <span class="na">href=</span><span class="s">&quot;{{paginator.next_page}}&quot;</span><span class="nt">&gt;</span><span class="ni">&amp;larr;</span> Older<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>    {% endif %}
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/blog/archives&quot;</span><span class="nt">&gt;</span>Blog Archives<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>    {% if paginator.previous_page %}
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;next&quot;</span> <span class="na">href=</span><span class="s">&quot;{{paginator.previous_page}}&quot;</span><span class="nt">&gt;</span>Newer <span class="ni">&amp;rarr;</span><span class="nt">&lt;/a&gt;</span>
</span><span class='line'>    {% endif %}
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;aside</span> <span class="na">class=</span><span class="s">&quot;sidebar&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  {% if site.blog_index_asides.size %}
</span><span class='line'>    {% include_array blog_index_asides %}
</span><span class='line'>  {% else %}
</span><span class='line'>    {% include_array default_asides %}
</span><span class='line'>  {% endif %}
</span><span class='line'><span class="nt">&lt;/aside&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="http://octopress.org/docs/plugins/include-code/">公式の説明ページ</a></li>
</ul>


<h2><a name="escape"></a>特殊文字のエスケープ</h2>

<p>include_codeなど、自動的にoctopressによって展開される文字を
そのまま出力させるには、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{% raw %} 
</span><span class='line'>と 
</span><span class='line'>{％ endraw ％}</span></code></pre></td></tr></table></div></figure>


<p>で囲むことでエスケープして文字を出力可能です。
(endrawの％部分は半角に直す必要があり。)</p>

<h2><a name="image"></a>画像貼り付け</h2>

<p>ソースコードとほぼ同様で、以下の通り記載することで引用が可能です</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{% img [class names] /path/to/image [width] [height] [title text [alt text]] %}</span></code></pre></td></tr></table></div></figure>


<p>画像ファイルのトップディレクトリは、<code>source/</code> のようです。例えば、<code>source/images/search.png</code>というファイルがデフォルトでありますが、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{% img /images/search.png %}</span></code></pre></td></tr></table></div></figure>


<p>と記載することで以下の通り表示されます。</p>

<p><img class="[class names]" src="http://sat-pg.com/images/search.png"></p>

<ul>
<li><a href="http://octopress.org/docs/plugins/image-tag/">公式の説明ページ</a></li>
</ul>


<h2><a name="publish"></a>記事の非公開</h2>

<p><code>rake new_post['hogehoge']</code> で新規markdownファイルを作ったあとも、
すぐには公開したくない場合、記事の設定部分に
<code>published: false</code>を追加することで対応可能です。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>layout: post
</span><span class='line'>title: "hogehoge"
</span><span class='line'>date: 2013-05-06 22:46
</span><span class='line'>published: false
</span><span class='line'>comments: true
</span><span class='line'>categories: phonegap
</span><span class='line'>---</span></code></pre></td></tr></table></div></figure>


<p>編集が完了した後、<code>published: true</code>としてdeployすれば記事が公開されます。</p>

<p>※ちなみに、publishをfalseにしても、プレビューでは表示されます。</p>

<h2><a name="domain"></a>ドメインの設定</h2>

<p>サブドメインを使わない場合、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% echo 'sat-pg.com' &gt;&gt; source/CNAME</span></code></pre></td></tr></table></div></figure>


<p>のように、新たにCNAMEファイルを作成する。</p>

<p>上記と合わせて、取得したドメインに対応するDNSのAレコードに、207.97.227.245 を設定することで、
30分くらいすると指定したドメインでのアクセスが可能になります。</p>

<ul>
<li><a href="http://octopress.org/docs/deploying/github/">公式の説明ページ</a>: ここの「Custom Domains」に記載があります。</li>
</ul>


<h2><a name="table"></a>テーブルの作成</h2>

<p>table用のCSSを作成し、source/_includes/head.htmlから参照するように設定する。以下を参考にさせて頂きました。</p>

<ul>
<li><a href="http://morizyun.github.io/blog/octopress-table-tag-css/">Octopressでテーブルをmarkdownで編集できるようにする</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressの導入]]></title>
    <link href="http://sat-pg.com/blog/octopress.html"/>
    <updated>2013-05-04T03:37:00+09:00</updated>
    <id>http://sat-pg.com/blog/octopress</id>
    <content type="html"><![CDATA[<p>GitHubを初めるにあたって、Octopressを導入したのでその方法についてまとめました。</p>

<p>以下4点、順番に説明します。</p>

<ol>
<li><a href="#ruby_install">Rubyインストール</a></li>
<li><a href="#github_pages">GitHub Pagesレポジトリ作成</a></li>
<li><a href="#octopress">Octopressインストール</a></li>
<li><a href="#newpost">記事作成</a></li>
</ol>


<!-- more -->


<h2><a name="ruby_install"></a>1. Rubyインストール</h2>

<p>私の環境は、Mac OS 10.8.3 ですが、デフォルトのRubyは1.8.7が入っていました。
Octopressのインストールには1.9.3以上が必要とのことなので、
rvmというRubyのバージョン管理用ソフトをインストールします。</p>

<h3>RVMとRuby1.9.3のインストール</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% curl -L https://get.rvm.io | bash -s stable --ruby
</span><span class='line'>% rvm list known</span></code></pre></td></tr></table></div></figure>


<p>とすることで、インストール可能なRubyのバージョンのリストが表示されます。</p>

<p>色々とネット上の記事を見ていると、XCode4.2の付属のLLVM gccではコンパイル不可らしく、
別途gccをダウンロードした上で作業をした等の記載を見つけましたが、
ここでは、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% rvm autolibs enable</span></code></pre></td></tr></table></div></figure>


<p>で依存関係を自動で解決するようにし、その後、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% rvm install 1.9.3-p392</span></code></pre></td></tr></table></div></figure>


<p>とすることで、問題無くインストールが進み、利用可能となりました。
(自分の環境ではpatchレベルの指定も必要でした。)</p>

<h3>RVMの設定</h3>

<p>以下の通りで利用バージョンが設定できます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% rvm use 1.9.3 
</span><span class='line'>% ruby -v
</span><span class='line'>ruby 1.9.3p392 (2013-02-22 revision 39386) [x86_64-darwin12.3.0]</span></code></pre></td></tr></table></div></figure>


<p><code>rvm use ...</code>の実行後にバージョンを戻すときは、<code>% rvm reset</code>とし、
デフォルトの使用バージョンを変える場合は、<code>% rvm --default 1.9.3</code>とすればOKです。</p>

<p>なお、各フォルダ毎に、.rvmrcファイルを作成して<code>rvm use ...</code>と記載しておくことで、
そのフォルダでのrubyの実行バージョンを制御できる模様です。</p>

<h2><a name="github_pages"></a>2. GitHub Pagesレポジトリ作成</h2>

<p>これは簡単で、GitHubに USERNAME.github.comのレポジトリを作成するのみです。
作成後、しばらくたつと、
http://USERNAME.github.com でアクセスできるようになります。</p>

<p>ドメインの指定等も可能みたいだけど、とりあえず省略です。</p>

<h2><a name="octopress"></a>3. Octopressインストール</h2>

<p>以下の通りでインストールできます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'>% cd octopress</span></code></pre></td></tr></table></div></figure>


<p>※octopressディレクトリには、.rvmrcが設置してあり、自動で1.9.3を使うように設定できます</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% sudo gem install bundler
</span><span class='line'>% sudo bundle install 
</span><span class='line'>% rake install
</span><span class='line'>% rake setup_github_pages</span></code></pre></td></tr></table></div></figure>


<p>ここまで来ると、Enter the read/write url for your repository と聞かれるので、
git@github.com:USERNAME/USERNAME.github.com.git と入力します。その後、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% rake generate
</span><span class='line'>% rake deploy</span></code></pre></td></tr></table></div></figure>


<p>とすることで、USERNAME.github.comにアクセス可能になります。</p>

<h2><a name="newpost"></a> 記事の投稿</h2>

<p>インストール後、以下コマンドで新規記事が作成できます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% rake new_post['post title']</span></code></pre></td></tr></table></div></figure>


<p>post title部分がURLになる(post-titleになる)ため、英語の必要があります。
ファイルは、source/_posts/yyyy-mm-dd-post-title.markdown が自動作成されるので、
markdown形式で編集することで記事を作成できます。</p>

<p>例えばこの記事の場合、markdownファイルの先頭は以下の通り。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>layout: post
</span><span class='line'>title: "Octopressの導入"
</span><span class='line'>date: 2013-05-04 03:37
</span><span class='line'>comments: true
</span><span class='line'>categories: octopress
</span><span class='line'>---</span></code></pre></td></tr></table></div></figure>


<p>title部分は、最初はpost titleが入るけど、後から日本語に変更が可能です。
この先頭の後は、普通にmarkdownで書くのみです。</p>

<p>書いた後、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% rake preview</span></code></pre></td></tr></table></div></figure>


<p>とすることでhttp://localhost:4000/ で記載内容を確認できます。</p>

<p>確認できたら、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% rake gen_deploy</span></code></pre></td></tr></table></div></figure>


<p>とすることでGithubに反映されます。(rake generate; rake deployの省略形のようです)<br/>
また、不要な記事は、markdownファイルを削除してから
再度gen_deployを実行することで削除可能です。</p>

<p>記事投稿をまとめると、</p>

<ul>
<li><code>rake new_post</code>でsourceフォルダにmarkdownファイルが作られ、</li>
<li><code>rake generate</code>でsourceフォルダからpublicフォルダにHTML形式が出力され、</li>
<li><code>rake deploy</code>でpublicフォルダから_deployフォルダにコピーされると共に、
GitHub側にも反映</li>
</ul>


<p>という流れです。</p>

<p>設定はおいおいやるとして、ひとまずこれでブログとして公開することができました。</p>

<h3>参考にさせて頂いたサイト</h3>

<ul>
<li><a href="http://octopress.org/">Octopress公式</a></li>
<li><a href="http://www.creativegear.jp/2012/12/29/octopress-post/">GitHubとOctopressで作るプログラマ向けブログ</a></li>
<li><a href="http://qiita.com/items/34e0ff2c369899169f90">Ruby1.9.3-p286インストール(RVM)</a></li>
<li><a href="http://spring-mt.tumblr.com/post/18486101350/ruby-rvm-install">rubyをrvmを使ってinstallする</a></li>
<li><a href="http://www.sankitch.me/blog/2012/05/05/build-octopress-on-github-dropbox/">Octopress + Github Pages + Dropbox でブログを構築</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
